
STM32F407G-DISC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000838c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800851c  0800851c  0001851c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085bc  080085bc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080085bc  080085bc  000185bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085c4  080085c4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080085c4  080085c4  000185c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085cc  080085cc  000185cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080085d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00001c7c  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001e60  20001e60  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d91  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038c4  00000000  00000000  00037fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  0003b870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc8  00000000  00000000  0003c6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000260c8  00000000  00000000  0003d378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000126fc  00000000  00000000  00063440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8999  00000000  00000000  00075b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013e4d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cf4  00000000  00000000  0013e528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008504 	.word	0x08008504

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008504 	.word	0x08008504

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <_ZN7LIS3DSH4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
 */

#include "LIS3DSH.h"

void LIS3DSH::init(SPI_HandleTypeDef *spiHandler,
				   GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	807b      	strh	r3, [r7, #2]

	spiHandle = spiHandler;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	621a      	str	r2, [r3, #32]
	csAccPinBank = csPinBank;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	625a      	str	r2, [r3, #36]	; 0x24
	csAccPin = csPin;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	887a      	ldrh	r2, [r7, #2]
 8000596:	851a      	strh	r2, [r3, #40]	; 0x28

	HAL_GPIO_WritePin(csAccPinBank, csAccPin, GPIO_PIN_SET);
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80005a0:	2201      	movs	r2, #1
 80005a2:	4619      	mov	r1, r3
 80005a4:	f001 fb30 	bl	8001c08 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005a8:	2064      	movs	r0, #100	; 0x64
 80005aa:	f000 fceb 	bl	8000f84 <HAL_Delay>

	LIS3DSH::writeToAddressPol(CTRL_REG4, 0b01101111); // ODR3 ODR2 ODR1 ODR0 BDU Zen Yen Xen
 80005ae:	226f      	movs	r2, #111	; 0x6f
 80005b0:	2120      	movs	r1, #32
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f000 f80e 	bl	80005d4 <_ZN7LIS3DSH17writeToAddressPolEhh>
	LIS3DSH::writeToAddressPol(CTRL_REG3, 0b11101000); // DR_EN IEA IEL INT2_EN INT1_EN VFILT - STRT
 80005b8:	22e8      	movs	r2, #232	; 0xe8
 80005ba:	2123      	movs	r1, #35	; 0x23
 80005bc:	68f8      	ldr	r0, [r7, #12]
 80005be:	f000 f809 	bl	80005d4 <_ZN7LIS3DSH17writeToAddressPolEhh>
  //LIS3DSH::writeToAddressPol(CTRL_REG5, 0b00000000); // BW2 BW1 FSCALE2 FSCALE1 FSCALE0 ST2 ST1 SIM
	LIS3DSH::writeToAddressPol(CTRL_REG6, 0b10010000); // BOOT FIFO_EN WTM_EN ADD_INC P1_EMPTY P1_WTM P1_OVERRUN P2_BOOT
 80005c2:	2290      	movs	r2, #144	; 0x90
 80005c4:	2125      	movs	r1, #37	; 0x25
 80005c6:	68f8      	ldr	r0, [r7, #12]
 80005c8:	f000 f804 	bl	80005d4 <_ZN7LIS3DSH17writeToAddressPolEhh>

}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN7LIS3DSH17writeToAddressPolEhh>:

void LIS3DSH::writeToAddressPol(uint8_t address, uint8_t data) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
 80005e0:	4613      	mov	r3, r2
 80005e2:	70bb      	strb	r3, [r7, #2]
  	uint8_t SPIDataTx [2] = {address, data};
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	733b      	strb	r3, [r7, #12]
 80005e8:	78bb      	ldrb	r3, [r7, #2]
 80005ea:	737b      	strb	r3, [r7, #13]
  	HAL_GPIO_WritePin(csAccPinBank, csAccPin, GPIO_PIN_RESET);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80005f4:	2200      	movs	r2, #0
 80005f6:	4619      	mov	r1, r3
 80005f8:	f001 fb06 	bl	8001c08 <HAL_GPIO_WritePin>
  	HAL_SPI_Transmit(spiHandle, SPIDataTx, 2, HAL_MAX_DELAY);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6a18      	ldr	r0, [r3, #32]
 8000600:	f107 010c 	add.w	r1, r7, #12
 8000604:	f04f 33ff 	mov.w	r3, #4294967295
 8000608:	2202      	movs	r2, #2
 800060a:	f003 f988 	bl	800391e <HAL_SPI_Transmit>
  	HAL_GPIO_WritePin(csAccPinBank, csAccPin, GPIO_PIN_SET);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000616:	2201      	movs	r2, #1
 8000618:	4619      	mov	r1, r3
 800061a:	f001 faf5 	bl	8001c08 <HAL_GPIO_WritePin>
}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <_ZN7LIS3DSH11readDataDMAEv>:
	xRaw = SPIDataRx [1] | (SPIDataRx [2] << 8);
	yRaw = SPIDataRx [3] | (SPIDataRx [4] << 8);
	zRaw = SPIDataRx [5] | (SPIDataRx [6] << 8);
}

uint8_t LIS3DSH::readDataDMA() {
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(csAccPinBank, csAccPin, GPIO_PIN_RESET);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000636:	2200      	movs	r2, #0
 8000638:	4619      	mov	r1, r3
 800063a:	f001 fae5 	bl	8001c08 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive_DMA(spiHandle, accDataTx, (uint8_t *) accDataRx, SPI_BUFFER_SIZE) == HAL_OK) {
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6a18      	ldr	r0, [r3, #32]
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	1dda      	adds	r2, r3, #7
 8000648:	2307      	movs	r3, #7
 800064a:	f003 faa5 	bl	8003b98 <HAL_SPI_TransmitReceive_DMA>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	bf0c      	ite	eq
 8000654:	2301      	moveq	r3, #1
 8000656:	2300      	movne	r3, #0
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <_ZN7LIS3DSH11readDataDMAEv+0x3c>
		return HAL_OK;
 800065e:	2300      	movs	r3, #0
 8000660:	e008      	b.n	8000674 <_ZN7LIS3DSH11readDataDMAEv+0x4e>
	} else {
	HAL_GPIO_WritePin(csAccPinBank, csAccPin, GPIO_PIN_SET);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800066a:	2201      	movs	r2, #1
 800066c:	4619      	mov	r1, r3
 800066e:	f001 facb 	bl	8001c08 <HAL_GPIO_WritePin>
	return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
	}
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <_ZN7LIS3DSH19readDataDMACompleteEv>:

void LIS3DSH::readDataDMAComplete() {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(csAccPinBank, csAccPin, GPIO_PIN_SET);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	f001 faba 	bl	8001c08 <HAL_GPIO_WritePin>
	xRaw = accDataRx [1] | (accDataRx [2] << 8);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	7a1b      	ldrb	r3, [r3, #8]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	b21a      	sxth	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7a5b      	ldrb	r3, [r3, #9]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b21b      	sxth	r3, r3
 80006a6:	4313      	orrs	r3, r2
 80006a8:	b21a      	sxth	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	81da      	strh	r2, [r3, #14]
	yRaw = accDataRx [3] | (accDataRx [4] << 8);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	7a9b      	ldrb	r3, [r3, #10]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	b21a      	sxth	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	7adb      	ldrb	r3, [r3, #11]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	021b      	lsls	r3, r3, #8
 80006be:	b21b      	sxth	r3, r3
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b21a      	sxth	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	821a      	strh	r2, [r3, #16]
	zRaw = accDataRx [5] | (accDataRx [6] << 8);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7b1b      	ldrb	r3, [r3, #12]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	b21a      	sxth	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7b5b      	ldrb	r3, [r3, #13]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	b21b      	sxth	r3, r3
 80006da:	4313      	orrs	r3, r2
 80006dc:	b21a      	sxth	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	825a      	strh	r2, [r3, #18]
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <_ZN7LIS3DSH7getXRawEv>:

int16_t LIS3DSH::getXRaw() {
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
	return xRaw;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <_ZN7LIS3DSH7getYRawEv>:

int16_t LIS3DSH::getYRaw() {
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	return yRaw;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <_ZN7LIS3DSH7getZRawEv>:

int16_t LIS3DSH::getZRaw() {
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
	return zRaw;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
}
 800072c:	4618      	mov	r0, r3
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <_ZN7LIS3DSHC1Ev>:
#define FIFO_SRC			0x2F




class LIS3DSH {
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	461a      	mov	r2, r3
 8000744:	2300      	movs	r3, #0
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	f8c2 3003 	str.w	r3, [r2, #3]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	22a8      	movs	r2, #168	; 0xa8
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	80fb      	strh	r3, [r7, #6]
	// Check if the EXINT Source is Interrupt pin from Accelerometer
	if(GPIO_Pin == ACC_INT_Pin) {
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d102      	bne.n	8000776 <HAL_GPIO_EXTI_Callback+0x16>
    	//accel.readDataRawPol();
    	accel.readDataDMA();
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <HAL_GPIO_EXTI_Callback+0x20>)
 8000772:	f7ff ff58 	bl	8000626 <_ZN7LIS3DSH11readDataDMAEv>
    }
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000318 	.word	0x20000318

08000784 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	// Check if the source is from SPI1
	if (hspi->Instance == SPI1) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_SPI_TxRxCpltCallback+0x20>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d102      	bne.n	800079c <HAL_SPI_TxRxCpltCallback+0x18>
		accel.readDataDMAComplete();
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <HAL_SPI_TxRxCpltCallback+0x24>)
 8000798:	f7ff ff70 	bl	800067c <_ZN7LIS3DSH19readDataDMACompleteEv>
	}
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40013000 	.word	0x40013000
 80007a8:	20000318 	.word	0x20000318

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b5b0      	push	{r4, r5, r7, lr}
 80007ae:	b0a2      	sub	sp, #136	; 0x88
 80007b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f000 fb75 	bl	8000ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f847 	bl	8000848 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 f91d 	bl	80009f8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80007be:	f000 f8f3 	bl	80009a8 <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 80007c2:	f000 f8b5 	bl	8000930 <_ZL12MX_SPI1_Initv>

  MX_USB_DEVICE_Init();
 80007c6:	f006 fd23 	bl	8007210 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  char dataBuf [128];
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d0:	4818      	ldr	r0, [pc, #96]	; (8000834 <main+0x88>)
 80007d2:	f001 fa19 	bl	8001c08 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 80007d6:	f241 3088 	movw	r0, #5000	; 0x1388
 80007da:	f000 fbd3 	bl	8000f84 <HAL_Delay>
  accel.init(&hspi1, NCS_ACC_GPIO_Port, NCS_ACC_Pin);
 80007de:	2308      	movs	r3, #8
 80007e0:	4a15      	ldr	r2, [pc, #84]	; (8000838 <main+0x8c>)
 80007e2:	4916      	ldr	r1, [pc, #88]	; (800083c <main+0x90>)
 80007e4:	4816      	ldr	r0, [pc, #88]	; (8000840 <main+0x94>)
 80007e6:	f7ff fec7 	bl	8000578 <_ZN7LIS3DSH4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(dataBuf, "%d %d %d\n", accel.getXRaw(),accel.getYRaw(),accel.getZRaw());
 80007ea:	4815      	ldr	r0, [pc, #84]	; (8000840 <main+0x94>)
 80007ec:	f7ff ff7d 	bl	80006ea <_ZN7LIS3DSH7getXRawEv>
 80007f0:	4603      	mov	r3, r0
 80007f2:	461c      	mov	r4, r3
 80007f4:	4812      	ldr	r0, [pc, #72]	; (8000840 <main+0x94>)
 80007f6:	f7ff ff85 	bl	8000704 <_ZN7LIS3DSH7getYRawEv>
 80007fa:	4603      	mov	r3, r0
 80007fc:	461d      	mov	r5, r3
 80007fe:	4810      	ldr	r0, [pc, #64]	; (8000840 <main+0x94>)
 8000800:	f7ff ff8d 	bl	800071e <_ZN7LIS3DSH7getZRawEv>
 8000804:	4603      	mov	r3, r0
 8000806:	4638      	mov	r0, r7
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	462b      	mov	r3, r5
 800080c:	4622      	mov	r2, r4
 800080e:	490d      	ldr	r1, [pc, #52]	; (8000844 <main+0x98>)
 8000810:	f007 fa4a 	bl	8007ca8 <siprintf>
	  CDC_Transmit_FS((uint8_t *) dataBuf, strlen(dataBuf));
 8000814:	463b      	mov	r3, r7
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fcda 	bl	80001d0 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	b29a      	uxth	r2, r3
 8000820:	463b      	mov	r3, r7
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f006 fdb1 	bl	800738c <CDC_Transmit_FS>
	  HAL_Delay(100);
 800082a:	2064      	movs	r0, #100	; 0x64
 800082c:	f000 fbaa 	bl	8000f84 <HAL_Delay>
	  sprintf(dataBuf, "%d %d %d\n", accel.getXRaw(),accel.getYRaw(),accel.getZRaw());
 8000830:	e7db      	b.n	80007ea <main+0x3e>
 8000832:	bf00      	nop
 8000834:	40020c00 	.word	0x40020c00
 8000838:	40021000 	.word	0x40021000
 800083c:	20000200 	.word	0x20000200
 8000840:	20000318 	.word	0x20000318
 8000844:	0800851c 	.word	0x0800851c

08000848 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	; 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	2230      	movs	r2, #48	; 0x30
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f007 fa1e 	bl	8007c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <_Z18SystemClock_Configv+0xe0>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	4a2c      	ldr	r2, [pc, #176]	; (8000928 <_Z18SystemClock_Configv+0xe0>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087a:	6413      	str	r3, [r2, #64]	; 0x40
 800087c:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <_Z18SystemClock_Configv+0xe0>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b27      	ldr	r3, [pc, #156]	; (800092c <_Z18SystemClock_Configv+0xe4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a26      	ldr	r2, [pc, #152]	; (800092c <_Z18SystemClock_Configv+0xe4>)
 8000892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <_Z18SystemClock_Configv+0xe4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008bc:	23a8      	movs	r3, #168	; 0xa8
 80008be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008c4:	2307      	movs	r3, #7
 80008c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fb51 	bl	8002f74 <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	bf14      	ite	ne
 80008d8:	2301      	movne	r3, #1
 80008da:	2300      	moveq	r3, #0
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80008e2:	f000 f921 	bl	8000b28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	230f      	movs	r3, #15
 80008e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2302      	movs	r3, #2
 80008ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2105      	movs	r1, #5
 8000904:	4618      	mov	r0, r3
 8000906:	f002 fdad 	bl	8003464 <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	bf14      	ite	ne
 8000910:	2301      	movne	r3, #1
 8000912:	2300      	moveq	r3, #0
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800091a:	f000 f905 	bl	8000b28 <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3750      	adds	r7, #80	; 0x50
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <_ZL12MX_SPI1_Initv+0x70>)
 8000936:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <_ZL12MX_SPI1_Initv+0x74>)
 8000938:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <_ZL12MX_SPI1_Initv+0x70>)
 800093c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000940:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <_ZL12MX_SPI1_Initv+0x70>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <_ZL12MX_SPI1_Initv+0x70>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <_ZL12MX_SPI1_Initv+0x70>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <_ZL12MX_SPI1_Initv+0x70>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <_ZL12MX_SPI1_Initv+0x70>)
 800095c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000960:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <_ZL12MX_SPI1_Initv+0x70>)
 8000964:	2228      	movs	r2, #40	; 0x28
 8000966:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <_ZL12MX_SPI1_Initv+0x70>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <_ZL12MX_SPI1_Initv+0x70>)
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <_ZL12MX_SPI1_Initv+0x70>)
 8000976:	2200      	movs	r2, #0
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <_ZL12MX_SPI1_Initv+0x70>)
 800097c:	220a      	movs	r2, #10
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000980:	4807      	ldr	r0, [pc, #28]	; (80009a0 <_ZL12MX_SPI1_Initv+0x70>)
 8000982:	f002 ff43 	bl	800380c <HAL_SPI_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	bf14      	ite	ne
 800098c:	2301      	movne	r3, #1
 800098e:	2300      	moveq	r3, #0
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000996:	f000 f8c7 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000200 	.word	0x20000200
 80009a4:	40013000 	.word	0x40013000

080009a8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <_ZL11MX_DMA_Initv+0x4c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <_ZL11MX_DMA_Initv+0x4c>)
 80009b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <_ZL11MX_DMA_Initv+0x4c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2038      	movs	r0, #56	; 0x38
 80009d0:	f000 fbd7 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009d4:	2038      	movs	r0, #56	; 0x38
 80009d6:	f000 fbf0 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	203b      	movs	r0, #59	; 0x3b
 80009e0:	f000 fbcf 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009e4:	203b      	movs	r0, #59	; 0x3b
 80009e6:	f000 fbe8 	bl	80011ba <HAL_NVIC_EnableIRQ>

}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b42      	ldr	r3, [pc, #264]	; (8000b1c <_ZL12MX_GPIO_Initv+0x124>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a41      	ldr	r2, [pc, #260]	; (8000b1c <_ZL12MX_GPIO_Initv+0x124>)
 8000a18:	f043 0310 	orr.w	r3, r3, #16
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b3f      	ldr	r3, [pc, #252]	; (8000b1c <_ZL12MX_GPIO_Initv+0x124>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0310 	and.w	r3, r3, #16
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b3b      	ldr	r3, [pc, #236]	; (8000b1c <_ZL12MX_GPIO_Initv+0x124>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a3a      	ldr	r2, [pc, #232]	; (8000b1c <_ZL12MX_GPIO_Initv+0x124>)
 8000a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b38      	ldr	r3, [pc, #224]	; (8000b1c <_ZL12MX_GPIO_Initv+0x124>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <_ZL12MX_GPIO_Initv+0x124>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a33      	ldr	r2, [pc, #204]	; (8000b1c <_ZL12MX_GPIO_Initv+0x124>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <_ZL12MX_GPIO_Initv+0x124>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <_ZL12MX_GPIO_Initv+0x124>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a2c      	ldr	r2, [pc, #176]	; (8000b1c <_ZL12MX_GPIO_Initv+0x124>)
 8000a6c:	f043 0308 	orr.w	r3, r3, #8
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <_ZL12MX_GPIO_Initv+0x124>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <_ZL12MX_GPIO_Initv+0x124>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a25      	ldr	r2, [pc, #148]	; (8000b1c <_ZL12MX_GPIO_Initv+0x124>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <_ZL12MX_GPIO_Initv+0x124>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NCS_ACC_GPIO_Port, NCS_ACC_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	4820      	ldr	r0, [pc, #128]	; (8000b20 <_ZL12MX_GPIO_Initv+0x128>)
 8000aa0:	f001 f8b2 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aaa:	481e      	ldr	r0, [pc, #120]	; (8000b24 <_ZL12MX_GPIO_Initv+0x12c>)
 8000aac:	f001 f8ac 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NCS_ACC_Pin */
  GPIO_InitStruct.Pin = NCS_ACC_Pin;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NCS_ACC_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4816      	ldr	r0, [pc, #88]	; (8000b20 <_ZL12MX_GPIO_Initv+0x128>)
 8000ac8:	f000 ff02 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000acc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480f      	ldr	r0, [pc, #60]	; (8000b24 <_ZL12MX_GPIO_Initv+0x12c>)
 8000ae6:	f000 fef3 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT_Pin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 8000aea:	2301      	movs	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4808      	ldr	r0, [pc, #32]	; (8000b20 <_ZL12MX_GPIO_Initv+0x128>)
 8000b00:	f000 fee6 	bl	80018d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	2006      	movs	r0, #6
 8000b0a:	f000 fb3a 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b0e:	2006      	movs	r0, #6
 8000b10:	f000 fb53 	bl	80011ba <HAL_NVIC_EnableIRQ>

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	; 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40020c00 	.word	0x40020c00

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d107      	bne.n	8000b54 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d102      	bne.n	8000b54 <_Z41__static_initialization_and_destruction_0ii+0x20>
LIS3DSH accel;
 8000b4e:	4803      	ldr	r0, [pc, #12]	; (8000b5c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000b50:	f7ff fdf2 	bl	8000738 <_ZN7LIS3DSHC1Ev>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000318 	.word	0x20000318

08000b60 <_GLOBAL__sub_I_hspi1>:
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f7ff ffe3 	bl	8000b34 <_Z41__static_initialization_and_destruction_0ii>
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_MspInit+0x4c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a48      	ldr	r2, [pc, #288]	; (8000d00 <HAL_SPI_MspInit+0x140>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	f040 808a 	bne.w	8000cf8 <HAL_SPI_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	4b46      	ldr	r3, [pc, #280]	; (8000d04 <HAL_SPI_MspInit+0x144>)
 8000bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bec:	4a45      	ldr	r2, [pc, #276]	; (8000d04 <HAL_SPI_MspInit+0x144>)
 8000bee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bf2:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf4:	4b43      	ldr	r3, [pc, #268]	; (8000d04 <HAL_SPI_MspInit+0x144>)
 8000bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	4b3f      	ldr	r3, [pc, #252]	; (8000d04 <HAL_SPI_MspInit+0x144>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	4a3e      	ldr	r2, [pc, #248]	; (8000d04 <HAL_SPI_MspInit+0x144>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c10:	4b3c      	ldr	r3, [pc, #240]	; (8000d04 <HAL_SPI_MspInit+0x144>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c1c:	23e0      	movs	r3, #224	; 0xe0
 8000c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4834      	ldr	r0, [pc, #208]	; (8000d08 <HAL_SPI_MspInit+0x148>)
 8000c38:	f000 fe4a 	bl	80018d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000c3c:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <HAL_SPI_MspInit+0x14c>)
 8000c3e:	4a34      	ldr	r2, [pc, #208]	; (8000d10 <HAL_SPI_MspInit+0x150>)
 8000c40:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <HAL_SPI_MspInit+0x14c>)
 8000c44:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c48:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4a:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <HAL_SPI_MspInit+0x14c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c50:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <HAL_SPI_MspInit+0x14c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <HAL_SPI_MspInit+0x14c>)
 8000c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c5c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <HAL_SPI_MspInit+0x14c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c64:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <HAL_SPI_MspInit+0x14c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <HAL_SPI_MspInit+0x14c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c70:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <HAL_SPI_MspInit+0x14c>)
 8000c72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c76:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <HAL_SPI_MspInit+0x14c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000c7e:	4823      	ldr	r0, [pc, #140]	; (8000d0c <HAL_SPI_MspInit+0x14c>)
 8000c80:	f000 fab6 	bl	80011f0 <HAL_DMA_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8000c8a:	f7ff ff4d 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <HAL_SPI_MspInit+0x14c>)
 8000c92:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c94:	4a1d      	ldr	r2, [pc, #116]	; (8000d0c <HAL_SPI_MspInit+0x14c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <HAL_SPI_MspInit+0x154>)
 8000c9c:	4a1e      	ldr	r2, [pc, #120]	; (8000d18 <HAL_SPI_MspInit+0x158>)
 8000c9e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <HAL_SPI_MspInit+0x154>)
 8000ca2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ca6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <HAL_SPI_MspInit+0x154>)
 8000caa:	2240      	movs	r2, #64	; 0x40
 8000cac:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <HAL_SPI_MspInit+0x154>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <HAL_SPI_MspInit+0x154>)
 8000cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cba:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_SPI_MspInit+0x154>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_SPI_MspInit+0x154>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_SPI_MspInit+0x154>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_SPI_MspInit+0x154>)
 8000cd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cd4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_SPI_MspInit+0x154>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <HAL_SPI_MspInit+0x154>)
 8000cde:	f000 fa87 	bl	80011f0 <HAL_DMA_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8000ce8:	f7ff ff1e 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <HAL_SPI_MspInit+0x154>)
 8000cf0:	649a      	str	r2, [r3, #72]	; 0x48
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_SPI_MspInit+0x154>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	3728      	adds	r7, #40	; 0x28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40013000 	.word	0x40013000
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	20000258 	.word	0x20000258
 8000d10:	40026410 	.word	0x40026410
 8000d14:	200002b8 	.word	0x200002b8
 8000d18:	40026458 	.word	0x40026458

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d68:	f000 f8ec 	bl	8000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT_Pin);
 8000d74:	2001      	movs	r0, #1
 8000d76:	f000 ff61 	bl	8001c3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <DMA2_Stream0_IRQHandler+0x10>)
 8000d86:	f000 fb39 	bl	80013fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000258 	.word	0x20000258

08000d94 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <DMA2_Stream3_IRQHandler+0x10>)
 8000d9a:	f000 fb2f 	bl	80013fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200002b8 	.word	0x200002b8

08000da8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <OTG_FS_IRQHandler+0x10>)
 8000dae:	f001 f8ad 	bl	8001f0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20001a48 	.word	0x20001a48

08000dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <_sbrk+0x5c>)
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <_sbrk+0x60>)
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d102      	bne.n	8000dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <_sbrk+0x64>)
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <_sbrk+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d207      	bcs.n	8000dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dec:	f006 ff2a 	bl	8007c44 <__errno>
 8000df0:	4603      	mov	r3, r0
 8000df2:	220c      	movs	r2, #12
 8000df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfa:	e009      	b.n	8000e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <_sbrk+0x64>)
 8000e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20020000 	.word	0x20020000
 8000e1c:	00000400 	.word	0x00000400
 8000e20:	20000344 	.word	0x20000344
 8000e24:	20001e60 	.word	0x20001e60

08000e28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SystemInit+0x20>)
 8000e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <SystemInit+0x20>)
 8000e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e52:	490e      	ldr	r1, [pc, #56]	; (8000e8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e54:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e68:	4c0b      	ldr	r4, [pc, #44]	; (8000e98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e76:	f7ff ffd7 	bl	8000e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f006 fee9 	bl	8007c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7e:	f7ff fc95 	bl	80007ac <main>
  bx  lr    
 8000e82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e8c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000e90:	080085d0 	.word	0x080085d0
  ldr r2, =_sbss
 8000e94:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000e98:	20001e60 	.word	0x20001e60

08000e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC_IRQHandler>
	...

08000ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <HAL_Init+0x40>)
 8000eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <HAL_Init+0x40>)
 8000eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_Init+0x40>)
 8000ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f94f 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 f808 	bl	8000ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed4:	f7ff fe4c 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023c00 	.word	0x40023c00

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x54>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f967 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00e      	b.n	8000f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d80a      	bhi.n	8000f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f000 f92f 	bl	8001182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f24:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <HAL_InitTick+0x5c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e000      	b.n	8000f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000004 	.word	0x20000004

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x24>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_IncTick+0x24>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000574 	.word	0x20000574

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000574 	.word	0x20000574

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff ffee 	bl	8000f6c <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_Delay+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000faa:	bf00      	nop
 8000fac:	f7ff ffde 	bl	8000f6c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f7ff ff8e 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff29 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff3e 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff8e 	bl	80010c0 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5d 	bl	800106c <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff31 	bl	8001030 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa2 	bl	8001128 <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff feb6 	bl	8000f6c <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e099      	b.n	8001340 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2202      	movs	r2, #2
 8001210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0201 	bic.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800122c:	e00f      	b.n	800124e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800122e:	f7ff fe9d 	bl	8000f6c <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b05      	cmp	r3, #5
 800123a:	d908      	bls.n	800124e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2220      	movs	r2, #32
 8001240:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2203      	movs	r2, #3
 8001246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e078      	b.n	8001340 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1e8      	bne.n	800122e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <HAL_DMA_Init+0x158>)
 8001268:	4013      	ands	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800127a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4313      	orrs	r3, r2
 800129e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d107      	bne.n	80012b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4313      	orrs	r3, r2
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f023 0307 	bic.w	r3, r3, #7
 80012ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d117      	bne.n	8001312 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00e      	beq.n	8001312 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 fa6f 	bl	80017d8 <DMA_CheckFifoParam>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2240      	movs	r2, #64	; 0x40
 8001304:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800130e:	2301      	movs	r3, #1
 8001310:	e016      	b.n	8001340 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fa26 	bl	800176c <DMA_CalcBaseAndBitshift>
 8001320:	4603      	mov	r3, r0
 8001322:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001328:	223f      	movs	r2, #63	; 0x3f
 800132a:	409a      	lsls	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	f010803f 	.word	0xf010803f

0800134c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800136a:	2b01      	cmp	r3, #1
 800136c:	d101      	bne.n	8001372 <HAL_DMA_Start_IT+0x26>
 800136e:	2302      	movs	r3, #2
 8001370:	e040      	b.n	80013f4 <HAL_DMA_Start_IT+0xa8>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b01      	cmp	r3, #1
 8001384:	d12f      	bne.n	80013e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2202      	movs	r2, #2
 800138a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 f9b8 	bl	8001710 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a4:	223f      	movs	r2, #63	; 0x3f
 80013a6:	409a      	lsls	r2, r3
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0216 	orr.w	r2, r2, #22
 80013ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d007      	beq.n	80013d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0208 	orr.w	r2, r2, #8
 80013d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0201 	orr.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e005      	b.n	80013f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013ee:	2302      	movs	r3, #2
 80013f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001408:	4b92      	ldr	r3, [pc, #584]	; (8001654 <HAL_DMA_IRQHandler+0x258>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a92      	ldr	r2, [pc, #584]	; (8001658 <HAL_DMA_IRQHandler+0x25c>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	0a9b      	lsrs	r3, r3, #10
 8001414:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001426:	2208      	movs	r2, #8
 8001428:	409a      	lsls	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d01a      	beq.n	8001468 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	d013      	beq.n	8001468 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0204 	bic.w	r2, r2, #4
 800144e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	2208      	movs	r2, #8
 8001456:	409a      	lsls	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001460:	f043 0201 	orr.w	r2, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146c:	2201      	movs	r2, #1
 800146e:	409a      	lsls	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d012      	beq.n	800149e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00b      	beq.n	800149e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	2201      	movs	r2, #1
 800148c:	409a      	lsls	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001496:	f043 0202 	orr.w	r2, r3, #2
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a2:	2204      	movs	r2, #4
 80014a4:	409a      	lsls	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d012      	beq.n	80014d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00b      	beq.n	80014d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c0:	2204      	movs	r2, #4
 80014c2:	409a      	lsls	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014cc:	f043 0204 	orr.w	r2, r3, #4
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d8:	2210      	movs	r2, #16
 80014da:	409a      	lsls	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d043      	beq.n	800156c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d03c      	beq.n	800156c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f6:	2210      	movs	r2, #16
 80014f8:	409a      	lsls	r2, r3
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d018      	beq.n	800153e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d108      	bne.n	800152c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	2b00      	cmp	r3, #0
 8001520:	d024      	beq.n	800156c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	4798      	blx	r3
 800152a:	e01f      	b.n	800156c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001530:	2b00      	cmp	r3, #0
 8001532:	d01b      	beq.n	800156c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	4798      	blx	r3
 800153c:	e016      	b.n	800156c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d107      	bne.n	800155c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0208 	bic.w	r2, r2, #8
 800155a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001570:	2220      	movs	r2, #32
 8001572:	409a      	lsls	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 808e 	beq.w	800169a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8086 	beq.w	800169a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001592:	2220      	movs	r2, #32
 8001594:	409a      	lsls	r2, r3
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d136      	bne.n	8001614 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0216 	bic.w	r2, r2, #22
 80015b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	695a      	ldr	r2, [r3, #20]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d103      	bne.n	80015d6 <HAL_DMA_IRQHandler+0x1da>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d007      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0208 	bic.w	r2, r2, #8
 80015e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ea:	223f      	movs	r2, #63	; 0x3f
 80015ec:	409a      	lsls	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001606:	2b00      	cmp	r3, #0
 8001608:	d07d      	beq.n	8001706 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	4798      	blx	r3
        }
        return;
 8001612:	e078      	b.n	8001706 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d01c      	beq.n	800165c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d108      	bne.n	8001642 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	2b00      	cmp	r3, #0
 8001636:	d030      	beq.n	800169a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	4798      	blx	r3
 8001640:	e02b      	b.n	800169a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001646:	2b00      	cmp	r3, #0
 8001648:	d027      	beq.n	800169a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	4798      	blx	r3
 8001652:	e022      	b.n	800169a <HAL_DMA_IRQHandler+0x29e>
 8001654:	20000000 	.word	0x20000000
 8001658:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10f      	bne.n	800168a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0210 	bic.w	r2, r2, #16
 8001678:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d032      	beq.n	8001708 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d022      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2205      	movs	r2, #5
 80016b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	3301      	adds	r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d307      	bcc.n	80016e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f2      	bne.n	80016c6 <HAL_DMA_IRQHandler+0x2ca>
 80016e0:	e000      	b.n	80016e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80016e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
 8001704:	e000      	b.n	8001708 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001706:	bf00      	nop
    }
  }
}
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop

08001710 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800172c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b40      	cmp	r3, #64	; 0x40
 800173c:	d108      	bne.n	8001750 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800174e:	e007      	b.n	8001760 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	60da      	str	r2, [r3, #12]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	3b10      	subs	r3, #16
 800177c:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <DMA_CalcBaseAndBitshift+0x64>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001786:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <DMA_CalcBaseAndBitshift+0x68>)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b03      	cmp	r3, #3
 8001798:	d909      	bls.n	80017ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017a2:	f023 0303 	bic.w	r3, r3, #3
 80017a6:	1d1a      	adds	r2, r3, #4
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	659a      	str	r2, [r3, #88]	; 0x58
 80017ac:	e007      	b.n	80017be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017b6:	f023 0303 	bic.w	r3, r3, #3
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	aaaaaaab 	.word	0xaaaaaaab
 80017d4:	08008580 	.word	0x08008580

080017d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d11f      	bne.n	8001832 <DMA_CheckFifoParam+0x5a>
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d856      	bhi.n	80018a6 <DMA_CheckFifoParam+0xce>
 80017f8:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <DMA_CheckFifoParam+0x28>)
 80017fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fe:	bf00      	nop
 8001800:	08001811 	.word	0x08001811
 8001804:	08001823 	.word	0x08001823
 8001808:	08001811 	.word	0x08001811
 800180c:	080018a7 	.word	0x080018a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d046      	beq.n	80018aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001820:	e043      	b.n	80018aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800182a:	d140      	bne.n	80018ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001830:	e03d      	b.n	80018ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800183a:	d121      	bne.n	8001880 <DMA_CheckFifoParam+0xa8>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d837      	bhi.n	80018b2 <DMA_CheckFifoParam+0xda>
 8001842:	a201      	add	r2, pc, #4	; (adr r2, 8001848 <DMA_CheckFifoParam+0x70>)
 8001844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001848:	08001859 	.word	0x08001859
 800184c:	0800185f 	.word	0x0800185f
 8001850:	08001859 	.word	0x08001859
 8001854:	08001871 	.word	0x08001871
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
      break;
 800185c:	e030      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d025      	beq.n	80018b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800186e:	e022      	b.n	80018b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001878:	d11f      	bne.n	80018ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800187e:	e01c      	b.n	80018ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d903      	bls.n	800188e <DMA_CheckFifoParam+0xb6>
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d003      	beq.n	8001894 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800188c:	e018      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	73fb      	strb	r3, [r7, #15]
      break;
 8001892:	e015      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00e      	beq.n	80018be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
      break;
 80018a4:	e00b      	b.n	80018be <DMA_CheckFifoParam+0xe6>
      break;
 80018a6:	bf00      	nop
 80018a8:	e00a      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      break;
 80018aa:	bf00      	nop
 80018ac:	e008      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      break;
 80018ae:	bf00      	nop
 80018b0:	e006      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      break;
 80018b2:	bf00      	nop
 80018b4:	e004      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      break;
 80018b6:	bf00      	nop
 80018b8:	e002      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80018ba:	bf00      	nop
 80018bc:	e000      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      break;
 80018be:	bf00      	nop
    }
  } 
  
  return status; 
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop

080018d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	e16b      	b.n	8001bc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018ec:	2201      	movs	r2, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	429a      	cmp	r2, r3
 8001906:	f040 815a 	bne.w	8001bbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d005      	beq.n	8001922 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800191e:	2b02      	cmp	r3, #2
 8001920:	d130      	bne.n	8001984 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001958:	2201      	movs	r2, #1
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 0201 	and.w	r2, r3, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b03      	cmp	r3, #3
 800198e:	d017      	beq.n	80019c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d123      	bne.n	8001a14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	08da      	lsrs	r2, r3, #3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3208      	adds	r2, #8
 80019d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	08da      	lsrs	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3208      	adds	r2, #8
 8001a0e:	69b9      	ldr	r1, [r7, #24]
 8001a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0203 	and.w	r2, r3, #3
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80b4 	beq.w	8001bbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b60      	ldr	r3, [pc, #384]	; (8001bdc <HAL_GPIO_Init+0x30c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a5f      	ldr	r2, [pc, #380]	; (8001bdc <HAL_GPIO_Init+0x30c>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <HAL_GPIO_Init+0x30c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a72:	4a5b      	ldr	r2, [pc, #364]	; (8001be0 <HAL_GPIO_Init+0x310>)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	220f      	movs	r2, #15
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a52      	ldr	r2, [pc, #328]	; (8001be4 <HAL_GPIO_Init+0x314>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d02b      	beq.n	8001af6 <HAL_GPIO_Init+0x226>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a51      	ldr	r2, [pc, #324]	; (8001be8 <HAL_GPIO_Init+0x318>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d025      	beq.n	8001af2 <HAL_GPIO_Init+0x222>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a50      	ldr	r2, [pc, #320]	; (8001bec <HAL_GPIO_Init+0x31c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d01f      	beq.n	8001aee <HAL_GPIO_Init+0x21e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4f      	ldr	r2, [pc, #316]	; (8001bf0 <HAL_GPIO_Init+0x320>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d019      	beq.n	8001aea <HAL_GPIO_Init+0x21a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4e      	ldr	r2, [pc, #312]	; (8001bf4 <HAL_GPIO_Init+0x324>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d013      	beq.n	8001ae6 <HAL_GPIO_Init+0x216>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4d      	ldr	r2, [pc, #308]	; (8001bf8 <HAL_GPIO_Init+0x328>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00d      	beq.n	8001ae2 <HAL_GPIO_Init+0x212>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4c      	ldr	r2, [pc, #304]	; (8001bfc <HAL_GPIO_Init+0x32c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d007      	beq.n	8001ade <HAL_GPIO_Init+0x20e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4b      	ldr	r2, [pc, #300]	; (8001c00 <HAL_GPIO_Init+0x330>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_GPIO_Init+0x20a>
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	e00e      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001ada:	2308      	movs	r3, #8
 8001adc:	e00c      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001ade:	2306      	movs	r3, #6
 8001ae0:	e00a      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	e008      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001aea:	2303      	movs	r3, #3
 8001aec:	e004      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_GPIO_Init+0x228>
 8001af6:	2300      	movs	r3, #0
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	f002 0203 	and.w	r2, r2, #3
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4093      	lsls	r3, r2
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b08:	4935      	ldr	r1, [pc, #212]	; (8001be0 <HAL_GPIO_Init+0x310>)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b16:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b3a:	4a32      	ldr	r2, [pc, #200]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b40:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b6a:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bb8:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <HAL_GPIO_Init+0x334>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	2b0f      	cmp	r3, #15
 8001bc8:	f67f ae90 	bls.w	80018ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40013800 	.word	0x40013800
 8001be4:	40020000 	.word	0x40020000
 8001be8:	40020400 	.word	0x40020400
 8001bec:	40020800 	.word	0x40020800
 8001bf0:	40020c00 	.word	0x40020c00
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40021400 	.word	0x40021400
 8001bfc:	40021800 	.word	0x40021800
 8001c00:	40021c00 	.word	0x40021c00
 8001c04:	40013c00 	.word	0x40013c00

08001c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
 8001c14:	4613      	mov	r3, r2
 8001c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c24:	e003      	b.n	8001c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	041a      	lsls	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	619a      	str	r2, [r3, #24]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d006      	beq.n	8001c60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fd80 	bl	8000760 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40013c00 	.word	0x40013c00

08001c6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6e:	b08f      	sub	sp, #60	; 0x3c
 8001c70:	af0a      	add	r7, sp, #40	; 0x28
 8001c72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e10f      	b.n	8001e9e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d106      	bne.n	8001c9e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f005 fcbf 	bl	800761c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 fbb2 	bl	8004426 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	687e      	ldr	r6, [r7, #4]
 8001cca:	466d      	mov	r5, sp
 8001ccc:	f106 0410 	add.w	r4, r6, #16
 8001cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ce0:	1d33      	adds	r3, r6, #4
 8001ce2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ce4:	6838      	ldr	r0, [r7, #0]
 8001ce6:	f002 fa89 	bl	80041fc <USB_CoreInit>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0d0      	b.n	8001e9e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f002 fba0 	bl	8004448 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e04a      	b.n	8001da4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	333d      	adds	r3, #61	; 0x3d
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	333c      	adds	r3, #60	; 0x3c
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	b298      	uxth	r0, r3
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	3342      	adds	r3, #66	; 0x42
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	1a9b      	subs	r3, r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	333f      	adds	r3, #63	; 0x3f
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	3344      	adds	r3, #68	; 0x44
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	3348      	adds	r3, #72	; 0x48
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	3350      	adds	r3, #80	; 0x50
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	3301      	adds	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3af      	bcc.n	8001d0e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	e044      	b.n	8001e3e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	1a9b      	subs	r3, r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	1a9b      	subs	r3, r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3b5      	bcc.n	8001db4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	687e      	ldr	r6, [r7, #4]
 8001e50:	466d      	mov	r5, sp
 8001e52:	f106 0410 	add.w	r4, r6, #16
 8001e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e66:	1d33      	adds	r3, r6, #4
 8001e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e6a:	6838      	ldr	r0, [r7, #0]
 8001e6c:	f002 fb38 	bl	80044e0 <USB_DevInit>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00d      	b.n	8001e9e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 fbb4 	bl	8005604 <USB_DevDisconnect>

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ea6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_PCD_Start+0x1c>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e020      	b.n	8001f04 <HAL_PCD_Start+0x5e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d109      	bne.n	8001ee6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d005      	beq.n	8001ee6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 fa8a 	bl	8004404 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 fb64 	bl	80055c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b08d      	sub	sp, #52	; 0x34
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fc22 	bl	800576c <USB_GetMode>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 839d 	bne.w	800266a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 fb86 	bl	8005646 <USB_ReadInterrupts>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 8393 	beq.w	8002668 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 fb7d 	bl	8005646 <USB_ReadInterrupts>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d107      	bne.n	8001f66 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f002 0202 	and.w	r2, r2, #2
 8001f64:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 fb6b 	bl	8005646 <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d161      	bne.n	800203e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699a      	ldr	r2, [r3, #24]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0210 	bic.w	r2, r2, #16
 8001f88:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	f003 020f 	and.w	r2, r3, #15
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	0c5b      	lsrs	r3, r3, #17
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d124      	bne.n	8002000 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d035      	beq.n	800202e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6a38      	ldr	r0, [r7, #32]
 8001fd6:	f003 f9a2 	bl	800531e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fe6:	441a      	add	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	699a      	ldr	r2, [r3, #24]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	091b      	lsrs	r3, r3, #4
 8001ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ff8:	441a      	add	r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	619a      	str	r2, [r3, #24]
 8001ffe:	e016      	b.n	800202e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	0c5b      	lsrs	r3, r3, #17
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	2b06      	cmp	r3, #6
 800200a:	d110      	bne.n	800202e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002012:	2208      	movs	r2, #8
 8002014:	4619      	mov	r1, r3
 8002016:	6a38      	ldr	r0, [r7, #32]
 8002018:	f003 f981 	bl	800531e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002028:	441a      	add	r2, r3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699a      	ldr	r2, [r3, #24]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0210 	orr.w	r2, r2, #16
 800203c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f003 faff 	bl	8005646 <USB_ReadInterrupts>
 8002048:	4603      	mov	r3, r0
 800204a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800204e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002052:	d16e      	bne.n	8002132 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fb05 	bl	800566c <USB_ReadDevAllOutEpInterrupt>
 8002062:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002064:	e062      	b.n	800212c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d057      	beq.n	8002120 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f003 fb2a 	bl	80056d4 <USB_ReadDevOutEPInterrupt>
 8002080:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00c      	beq.n	80020a6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	4413      	add	r3, r2
 8002094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002098:	461a      	mov	r2, r3
 800209a:	2301      	movs	r3, #1
 800209c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800209e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fdb1 	bl	8002c08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00c      	beq.n	80020ca <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020bc:	461a      	mov	r2, r3
 80020be:	2308      	movs	r3, #8
 80020c0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 feab 	bl	8002e20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e0:	461a      	mov	r2, r3
 80020e2:	2310      	movs	r3, #16
 80020e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fc:	461a      	mov	r2, r3
 80020fe:	2320      	movs	r3, #32
 8002100:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d009      	beq.n	8002120 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	4413      	add	r3, r2
 8002114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002118:	461a      	mov	r2, r3
 800211a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800211e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	3301      	adds	r3, #1
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	085b      	lsrs	r3, r3, #1
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	2b00      	cmp	r3, #0
 8002130:	d199      	bne.n	8002066 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f003 fa85 	bl	8005646 <USB_ReadInterrupts>
 800213c:	4603      	mov	r3, r0
 800213e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002142:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002146:	f040 80c0 	bne.w	80022ca <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f003 faa6 	bl	80056a0 <USB_ReadDevAllInEpInterrupt>
 8002154:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800215a:	e0b2      	b.n	80022c2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 80a7 	beq.w	80022b6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f003 facc 	bl	8005710 <USB_ReadDevInEPInterrupt>
 8002178:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d057      	beq.n	8002234 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	2201      	movs	r2, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	43db      	mvns	r3, r3
 800219e:	69f9      	ldr	r1, [r7, #28]
 80021a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021a4:	4013      	ands	r3, r2
 80021a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021b4:	461a      	mov	r2, r3
 80021b6:	2301      	movs	r3, #1
 80021b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d132      	bne.n	8002228 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	3348      	adds	r3, #72	; 0x48
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4403      	add	r3, r0
 80021e2:	3344      	adds	r3, #68	; 0x44
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4419      	add	r1, r3
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4403      	add	r3, r0
 80021f6:	3348      	adds	r3, #72	; 0x48
 80021f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d113      	bne.n	8002228 <HAL_PCD_IRQHandler+0x31c>
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	3350      	adds	r3, #80	; 0x50
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d108      	bne.n	8002228 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002220:	461a      	mov	r2, r3
 8002222:	2101      	movs	r1, #1
 8002224:	f003 fad4 	bl	80057d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	b2db      	uxtb	r3, r3
 800222c:	4619      	mov	r1, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f005 fa75 	bl	800771e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800224a:	461a      	mov	r2, r3
 800224c:	2308      	movs	r3, #8
 800224e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002266:	461a      	mov	r2, r3
 8002268:	2310      	movs	r3, #16
 800226a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d008      	beq.n	8002288 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	4413      	add	r3, r2
 800227e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002282:	461a      	mov	r2, r3
 8002284:	2340      	movs	r3, #64	; 0x40
 8002286:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229e:	461a      	mov	r2, r3
 80022a0:	2302      	movs	r3, #2
 80022a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fc1b 	bl	8002aec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	3301      	adds	r3, #1
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022be:	085b      	lsrs	r3, r3, #1
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f47f af49 	bne.w	800215c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 f9b9 	bl	8005646 <USB_ReadInterrupts>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022de:	d122      	bne.n	8002326 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d108      	bne.n	8002310 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002306:	2100      	movs	r1, #0
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fe27 	bl	8002f5c <HAL_PCDEx_LPM_Callback>
 800230e:	e002      	b.n	8002316 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f005 fa7b 	bl	800780c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002324:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f003 f98b 	bl	8005646 <USB_ReadInterrupts>
 8002330:	4603      	mov	r3, r0
 8002332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800233a:	d112      	bne.n	8002362 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d102      	bne.n	8002352 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f005 fa37 	bl	80077c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695a      	ldr	r2, [r3, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002360:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f003 f96d 	bl	8005646 <USB_ReadInterrupts>
 800236c:	4603      	mov	r3, r0
 800236e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002376:	f040 80c7 	bne.w	8002508 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2110      	movs	r1, #16
 8002394:	4618      	mov	r0, r3
 8002396:	f002 fa07 	bl	80047a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800239a:	2300      	movs	r3, #0
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800239e:	e056      	b.n	800244e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ac:	461a      	mov	r2, r3
 80023ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023b2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c4:	0151      	lsls	r1, r2, #5
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	440a      	add	r2, r1
 80023ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023d2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80023d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e4:	0151      	lsls	r1, r2, #5
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	440a      	add	r2, r1
 80023ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002400:	461a      	mov	r2, r3
 8002402:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002406:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002418:	0151      	lsls	r1, r2, #5
 800241a:	69fa      	ldr	r2, [r7, #28]
 800241c:	440a      	add	r2, r1
 800241e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002422:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002426:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	4413      	add	r3, r2
 8002430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002438:	0151      	lsls	r1, r2, #5
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	440a      	add	r2, r1
 800243e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002442:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002446:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	3301      	adds	r3, #1
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002454:	429a      	cmp	r2, r3
 8002456:	d3a3      	bcc.n	80023a0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002466:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800246a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	2b00      	cmp	r3, #0
 8002472:	d016      	beq.n	80024a2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800247a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002484:	f043 030b 	orr.w	r3, r3, #11
 8002488:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800249a:	f043 030b 	orr.w	r3, r3, #11
 800249e:	6453      	str	r3, [r2, #68]	; 0x44
 80024a0:	e015      	b.n	80024ce <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024b4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80024b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024c8:	f043 030b 	orr.w	r3, r3, #11
 80024cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80024e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024f2:	461a      	mov	r2, r3
 80024f4:	f003 f96c 	bl	80057d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002506:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f003 f89a 	bl	8005646 <USB_ReadInterrupts>
 8002512:	4603      	mov	r3, r0
 8002514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251c:	d124      	bne.n	8002568 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f003 f930 	bl	8005788 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f002 f998 	bl	8004862 <USB_GetDevSpeed>
 8002532:	4603      	mov	r3, r0
 8002534:	461a      	mov	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681c      	ldr	r4, [r3, #0]
 800253e:	f001 f959 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8002542:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	4620      	mov	r0, r4
 800254e:	f001 feb7 	bl	80042c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f005 f90b 	bl	800776e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002566:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f003 f86a 	bl	8005646 <USB_ReadInterrupts>
 8002572:	4603      	mov	r3, r0
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b08      	cmp	r3, #8
 800257a:	d10a      	bne.n	8002592 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f005 f8e8 	bl	8007752 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f002 0208 	and.w	r2, r2, #8
 8002590:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f003 f855 	bl	8005646 <USB_ReadInterrupts>
 800259c:	4603      	mov	r3, r0
 800259e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025a6:	d10f      	bne.n	80025c8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	4619      	mov	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f005 f94a 	bl	800784c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 f83a 	bl	8005646 <USB_ReadInterrupts>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025dc:	d10f      	bne.n	80025fe <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	4619      	mov	r1, r3
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f005 f91d 	bl	8007828 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80025fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f003 f81f 	bl	8005646 <USB_ReadInterrupts>
 8002608:	4603      	mov	r3, r0
 800260a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800260e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002612:	d10a      	bne.n	800262a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f005 f92b 	bl	8007870 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f003 f809 	bl	8005646 <USB_ReadInterrupts>
 8002634:	4603      	mov	r3, r0
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b04      	cmp	r3, #4
 800263c:	d115      	bne.n	800266a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f005 f91b 	bl	800788c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	430a      	orrs	r2, r1
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	e000      	b.n	800266a <HAL_PCD_IRQHandler+0x75e>
      return;
 8002668:	bf00      	nop
    }
  }
}
 800266a:	3734      	adds	r7, #52	; 0x34
 800266c:	46bd      	mov	sp, r7
 800266e:	bd90      	pop	{r4, r7, pc}

08002670 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_PCD_SetAddress+0x1a>
 8002686:	2302      	movs	r3, #2
 8002688:	e013      	b.n	80026b2 <HAL_PCD_SetAddress+0x42>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f002 ff67 	bl	8005576 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	4608      	mov	r0, r1
 80026c4:	4611      	mov	r1, r2
 80026c6:	461a      	mov	r2, r3
 80026c8:	4603      	mov	r3, r0
 80026ca:	70fb      	strb	r3, [r7, #3]
 80026cc:	460b      	mov	r3, r1
 80026ce:	803b      	strh	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	da0f      	bge.n	8002700 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	f003 020f 	and.w	r2, r3, #15
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	3338      	adds	r3, #56	; 0x38
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	3304      	adds	r3, #4
 80026f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2201      	movs	r2, #1
 80026fc:	705a      	strb	r2, [r3, #1]
 80026fe:	e00f      	b.n	8002720 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	f003 020f 	and.w	r2, r3, #15
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	3304      	adds	r3, #4
 8002718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	b2da      	uxtb	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800272c:	883a      	ldrh	r2, [r7, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	78ba      	ldrb	r2, [r7, #2]
 8002736:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	785b      	ldrb	r3, [r3, #1]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800274a:	78bb      	ldrb	r3, [r7, #2]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d102      	bne.n	8002756 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_PCD_EP_Open+0xaa>
 8002760:	2302      	movs	r3, #2
 8002762:	e00e      	b.n	8002782 <HAL_PCD_EP_Open+0xc8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68f9      	ldr	r1, [r7, #12]
 8002772:	4618      	mov	r0, r3
 8002774:	f002 f89a 	bl	80048ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002780:	7afb      	ldrb	r3, [r7, #11]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002796:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800279a:	2b00      	cmp	r3, #0
 800279c:	da0f      	bge.n	80027be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	f003 020f 	and.w	r2, r3, #15
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	3338      	adds	r3, #56	; 0x38
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	3304      	adds	r3, #4
 80027b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2201      	movs	r2, #1
 80027ba:	705a      	strb	r2, [r3, #1]
 80027bc:	e00f      	b.n	80027de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	f003 020f 	and.w	r2, r3, #15
 80027c4:	4613      	mov	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	4413      	add	r3, r2
 80027d4:	3304      	adds	r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_PCD_EP_Close+0x6e>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e00e      	b.n	8002816 <HAL_PCD_EP_Close+0x8c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68f9      	ldr	r1, [r7, #12]
 8002806:	4618      	mov	r0, r3
 8002808:	f002 f8d8 	bl	80049bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	460b      	mov	r3, r1
 800282c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800282e:	7afb      	ldrb	r3, [r7, #11]
 8002830:	f003 020f 	and.w	r2, r3, #15
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4413      	add	r3, r2
 8002844:	3304      	adds	r3, #4
 8002846:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2200      	movs	r2, #0
 8002858:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2200      	movs	r2, #0
 800285e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002860:	7afb      	ldrb	r3, [r7, #11]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	b2da      	uxtb	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d102      	bne.n	800287a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800287a:	7afb      	ldrb	r3, [r7, #11]
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	6979      	ldr	r1, [r7, #20]
 8002892:	f002 fbb3 	bl	8004ffc <USB_EP0StartXfer>
 8002896:	e008      	b.n	80028aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	6979      	ldr	r1, [r7, #20]
 80028a6:	f002 f965 	bl	8004b74 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	f003 020f 	and.w	r2, r3, #15
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	460b      	mov	r3, r1
 80028f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f4:	7afb      	ldrb	r3, [r7, #11]
 80028f6:	f003 020f 	and.w	r2, r3, #15
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	3338      	adds	r3, #56	; 0x38
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	3304      	adds	r3, #4
 800290a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2200      	movs	r2, #0
 800291c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2201      	movs	r2, #1
 8002922:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002924:	7afb      	ldrb	r3, [r7, #11]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	b2da      	uxtb	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d102      	bne.n	800293e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800293e:	7afb      	ldrb	r3, [r7, #11]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	6979      	ldr	r1, [r7, #20]
 8002956:	f002 fb51 	bl	8004ffc <USB_EP0StartXfer>
 800295a:	e008      	b.n	800296e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	6979      	ldr	r1, [r7, #20]
 800296a:	f002 f903 	bl	8004b74 <USB_EPStartXfer>
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	f003 020f 	and.w	r2, r3, #15
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	429a      	cmp	r2, r3
 8002990:	d901      	bls.n	8002996 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e050      	b.n	8002a38 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800299a:	2b00      	cmp	r3, #0
 800299c:	da0f      	bge.n	80029be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	f003 020f 	and.w	r2, r3, #15
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	3338      	adds	r3, #56	; 0x38
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	3304      	adds	r3, #4
 80029b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	705a      	strb	r2, [r3, #1]
 80029bc:	e00d      	b.n	80029da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	3304      	adds	r3, #4
 80029d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_PCD_EP_SetStall+0x82>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e01e      	b.n	8002a38 <HAL_PCD_EP_SetStall+0xc0>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68f9      	ldr	r1, [r7, #12]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 fce0 	bl	80053ce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	b2d9      	uxtb	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f002 fed1 	bl	80057d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	f003 020f 	and.w	r2, r3, #15
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d901      	bls.n	8002a5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e042      	b.n	8002ae4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	da0f      	bge.n	8002a86 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	f003 020f 	and.w	r2, r3, #15
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	3338      	adds	r3, #56	; 0x38
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	705a      	strb	r2, [r3, #1]
 8002a84:	e00f      	b.n	8002aa6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	f003 020f 	and.w	r2, r3, #15
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_PCD_EP_ClrStall+0x86>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e00e      	b.n	8002ae4 <HAL_PCD_EP_ClrStall+0xa4>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68f9      	ldr	r1, [r7, #12]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f002 fce8 	bl	80054aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	3338      	adds	r3, #56	; 0x38
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	3304      	adds	r3, #4
 8002b12:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	699a      	ldr	r2, [r3, #24]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d901      	bls.n	8002b24 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e06c      	b.n	8002bfe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	695a      	ldr	r2, [r3, #20]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d902      	bls.n	8002b40 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	3303      	adds	r3, #3
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b48:	e02b      	b.n	8002ba2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d902      	bls.n	8002b66 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3303      	adds	r3, #3
 8002b6a:	089b      	lsrs	r3, r3, #2
 8002b6c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68d9      	ldr	r1, [r3, #12]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	4603      	mov	r3, r0
 8002b84:	6978      	ldr	r0, [r7, #20]
 8002b86:	f002 fb8c 	bl	80052a2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	441a      	add	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	441a      	add	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d809      	bhi.n	8002bcc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	699a      	ldr	r2, [r3, #24]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d203      	bcs.n	8002bcc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1be      	bne.n	8002b4a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d811      	bhi.n	8002bfc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	2201      	movs	r2, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	6939      	ldr	r1, [r7, #16]
 8002bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	333c      	adds	r3, #60	; 0x3c
 8002c20:	3304      	adds	r3, #4
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	f040 80a0 	bne.w	8002d80 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d015      	beq.n	8002c76 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4a72      	ldr	r2, [pc, #456]	; (8002e18 <PCD_EP_OutXfrComplete_int+0x210>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	f240 80dd 	bls.w	8002e0e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80d7 	beq.w	8002e0e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c72:	6093      	str	r3, [r2, #8]
 8002c74:	e0cb      	b.n	8002e0e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d009      	beq.n	8002c94 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2320      	movs	r3, #32
 8002c90:	6093      	str	r3, [r2, #8]
 8002c92:	e0bc      	b.n	8002e0e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f040 80b7 	bne.w	8002e0e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a5d      	ldr	r2, [pc, #372]	; (8002e18 <PCD_EP_OutXfrComplete_int+0x210>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d90f      	bls.n	8002cc8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cc4:	6093      	str	r3, [r2, #8]
 8002cc6:	e0a2      	b.n	8002e0e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cda:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	0159      	lsls	r1, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002cee:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4403      	add	r3, r0
 8002cfe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d02:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d16:	6819      	ldr	r1, [r3, #0]
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4403      	add	r3, r0
 8002d26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4419      	add	r1, r3
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4403      	add	r3, r0
 8002d3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d40:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d114      	bne.n	8002d72 <PCD_EP_OutXfrComplete_int+0x16a>
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d108      	bne.n	8002d72 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	f002 fd2f 	bl	80057d0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	4619      	mov	r1, r3
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f004 fcb5 	bl	80076e8 <HAL_PCD_DataOutStageCallback>
 8002d7e:	e046      	b.n	8002e0e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a26      	ldr	r2, [pc, #152]	; (8002e1c <PCD_EP_OutXfrComplete_int+0x214>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d124      	bne.n	8002dd2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002da4:	6093      	str	r3, [r2, #8]
 8002da6:	e032      	b.n	8002e0e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	4619      	mov	r1, r3
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f004 fc8c 	bl	80076e8 <HAL_PCD_DataOutStageCallback>
 8002dd0:	e01d      	b.n	8002e0e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d114      	bne.n	8002e02 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d108      	bne.n	8002e02 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	f002 fce7 	bl	80057d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	4619      	mov	r1, r3
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f004 fc6d 	bl	80076e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	4f54300a 	.word	0x4f54300a
 8002e1c:	4f54310a 	.word	0x4f54310a

08002e20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	333c      	adds	r3, #60	; 0x3c
 8002e38:	3304      	adds	r3, #4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d90e      	bls.n	8002e74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d009      	beq.n	8002e74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f004 fc25 	bl	80076c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d90c      	bls.n	8002e9c <PCD_EP_OutSetupPacket_int+0x7c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d108      	bne.n	8002e9c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e94:	461a      	mov	r2, r3
 8002e96:	2101      	movs	r1, #1
 8002e98:	f002 fc9a 	bl	80057d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	4f54300a 	.word	0x4f54300a

08002eac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	70fb      	strb	r3, [r7, #3]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d107      	bne.n	8002eda <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002eca:	883b      	ldrh	r3, [r7, #0]
 8002ecc:	0419      	lsls	r1, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ed8:	e028      	b.n	8002f2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	0c1b      	lsrs	r3, r3, #16
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	e00d      	b.n	8002f0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	3340      	adds	r3, #64	; 0x40
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	0c1b      	lsrs	r3, r3, #16
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	4413      	add	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	3301      	adds	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
 8002f0a:	7bfa      	ldrb	r2, [r7, #15]
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d3ec      	bcc.n	8002eee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f14:	883b      	ldrh	r3, [r7, #0]
 8002f16:	0418      	lsls	r0, r3, #16
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6819      	ldr	r1, [r3, #0]
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	4302      	orrs	r2, r0
 8002f24:	3340      	adds	r3, #64	; 0x40
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e264      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d075      	beq.n	800307e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f92:	4ba3      	ldr	r3, [pc, #652]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f9e:	4ba0      	ldr	r3, [pc, #640]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d112      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002faa:	4b9d      	ldr	r3, [pc, #628]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	4b99      	ldr	r3, [pc, #612]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d05b      	beq.n	800307c <HAL_RCC_OscConfig+0x108>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d157      	bne.n	800307c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e23f      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd8:	d106      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x74>
 8002fda:	4b91      	ldr	r3, [pc, #580]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a90      	ldr	r2, [pc, #576]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e01d      	b.n	8003024 <HAL_RCC_OscConfig+0xb0>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0x98>
 8002ff2:	4b8b      	ldr	r3, [pc, #556]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a8a      	ldr	r2, [pc, #552]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b88      	ldr	r3, [pc, #544]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a87      	ldr	r2, [pc, #540]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e00b      	b.n	8003024 <HAL_RCC_OscConfig+0xb0>
 800300c:	4b84      	ldr	r3, [pc, #528]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a83      	ldr	r2, [pc, #524]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8003012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b81      	ldr	r3, [pc, #516]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a80      	ldr	r2, [pc, #512]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 800301e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d013      	beq.n	8003054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fd ff9e 	bl	8000f6c <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003034:	f7fd ff9a 	bl	8000f6c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e204      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	4b76      	ldr	r3, [pc, #472]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0xc0>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fd ff8a 	bl	8000f6c <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800305c:	f7fd ff86 	bl	8000f6c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	; 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e1f0      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306e:	4b6c      	ldr	r3, [pc, #432]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0xe8>
 800307a:	e000      	b.n	800307e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d063      	beq.n	8003152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800308a:	4b65      	ldr	r3, [pc, #404]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003096:	4b62      	ldr	r3, [pc, #392]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d11c      	bne.n	80030dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a2:	4b5f      	ldr	r3, [pc, #380]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d116      	bne.n	80030dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ae:	4b5c      	ldr	r3, [pc, #368]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_RCC_OscConfig+0x152>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d001      	beq.n	80030c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e1c4      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c6:	4b56      	ldr	r3, [pc, #344]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4952      	ldr	r1, [pc, #328]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030da:	e03a      	b.n	8003152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d020      	beq.n	8003126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e4:	4b4f      	ldr	r3, [pc, #316]	; (8003224 <HAL_RCC_OscConfig+0x2b0>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fd ff3f 	bl	8000f6c <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f2:	f7fd ff3b 	bl	8000f6c <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e1a5      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003104:	4b46      	ldr	r3, [pc, #280]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003110:	4b43      	ldr	r3, [pc, #268]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4940      	ldr	r1, [pc, #256]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8003120:	4313      	orrs	r3, r2
 8003122:	600b      	str	r3, [r1, #0]
 8003124:	e015      	b.n	8003152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003126:	4b3f      	ldr	r3, [pc, #252]	; (8003224 <HAL_RCC_OscConfig+0x2b0>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fd ff1e 	bl	8000f6c <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003134:	f7fd ff1a 	bl	8000f6c <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e184      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003146:	4b36      	ldr	r3, [pc, #216]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d030      	beq.n	80031c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d016      	beq.n	8003194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003166:	4b30      	ldr	r3, [pc, #192]	; (8003228 <HAL_RCC_OscConfig+0x2b4>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316c:	f7fd fefe 	bl	8000f6c <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003174:	f7fd fefa 	bl	8000f6c <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e164      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003186:	4b26      	ldr	r3, [pc, #152]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x200>
 8003192:	e015      	b.n	80031c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003194:	4b24      	ldr	r3, [pc, #144]	; (8003228 <HAL_RCC_OscConfig+0x2b4>)
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fd fee7 	bl	8000f6c <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a2:	f7fd fee3 	bl	8000f6c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e14d      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b4:	4b1a      	ldr	r3, [pc, #104]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 80031b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f0      	bne.n	80031a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80a0 	beq.w	800330e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d2:	4b13      	ldr	r3, [pc, #76]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10f      	bne.n	80031fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ec:	6413      	str	r3, [r2, #64]	; 0x40
 80031ee:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fa:	2301      	movs	r3, #1
 80031fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_RCC_OscConfig+0x2b8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d121      	bne.n	800324e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320a:	4b08      	ldr	r3, [pc, #32]	; (800322c <HAL_RCC_OscConfig+0x2b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a07      	ldr	r2, [pc, #28]	; (800322c <HAL_RCC_OscConfig+0x2b8>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003216:	f7fd fea9 	bl	8000f6c <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	e011      	b.n	8003242 <HAL_RCC_OscConfig+0x2ce>
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	42470000 	.word	0x42470000
 8003228:	42470e80 	.word	0x42470e80
 800322c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003230:	f7fd fe9c 	bl	8000f6c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e106      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003242:	4b85      	ldr	r3, [pc, #532]	; (8003458 <HAL_RCC_OscConfig+0x4e4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d106      	bne.n	8003264 <HAL_RCC_OscConfig+0x2f0>
 8003256:	4b81      	ldr	r3, [pc, #516]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	4a80      	ldr	r2, [pc, #512]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6713      	str	r3, [r2, #112]	; 0x70
 8003262:	e01c      	b.n	800329e <HAL_RCC_OscConfig+0x32a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b05      	cmp	r3, #5
 800326a:	d10c      	bne.n	8003286 <HAL_RCC_OscConfig+0x312>
 800326c:	4b7b      	ldr	r3, [pc, #492]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	4a7a      	ldr	r2, [pc, #488]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 8003272:	f043 0304 	orr.w	r3, r3, #4
 8003276:	6713      	str	r3, [r2, #112]	; 0x70
 8003278:	4b78      	ldr	r3, [pc, #480]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327c:	4a77      	ldr	r2, [pc, #476]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6713      	str	r3, [r2, #112]	; 0x70
 8003284:	e00b      	b.n	800329e <HAL_RCC_OscConfig+0x32a>
 8003286:	4b75      	ldr	r3, [pc, #468]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a74      	ldr	r2, [pc, #464]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	6713      	str	r3, [r2, #112]	; 0x70
 8003292:	4b72      	ldr	r3, [pc, #456]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	4a71      	ldr	r2, [pc, #452]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 8003298:	f023 0304 	bic.w	r3, r3, #4
 800329c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d015      	beq.n	80032d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a6:	f7fd fe61 	bl	8000f6c <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fd fe5d 	bl	8000f6c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e0c5      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c4:	4b65      	ldr	r3, [pc, #404]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0ee      	beq.n	80032ae <HAL_RCC_OscConfig+0x33a>
 80032d0:	e014      	b.n	80032fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d2:	f7fd fe4b 	bl	8000f6c <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fd fe47 	bl	8000f6c <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0af      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f0:	4b5a      	ldr	r3, [pc, #360]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ee      	bne.n	80032da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d105      	bne.n	800330e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003302:	4b56      	ldr	r3, [pc, #344]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a55      	ldr	r2, [pc, #340]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 8003308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 809b 	beq.w	800344e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003318:	4b50      	ldr	r3, [pc, #320]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 030c 	and.w	r3, r3, #12
 8003320:	2b08      	cmp	r3, #8
 8003322:	d05c      	beq.n	80033de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d141      	bne.n	80033b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332c:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <HAL_RCC_OscConfig+0x4ec>)
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fd fe1b 	bl	8000f6c <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333a:	f7fd fe17 	bl	8000f6c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e081      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334c:	4b43      	ldr	r3, [pc, #268]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1f0      	bne.n	800333a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	019b      	lsls	r3, r3, #6
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	3b01      	subs	r3, #1
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	061b      	lsls	r3, r3, #24
 800337c:	4937      	ldr	r1, [pc, #220]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003382:	4b37      	ldr	r3, [pc, #220]	; (8003460 <HAL_RCC_OscConfig+0x4ec>)
 8003384:	2201      	movs	r2, #1
 8003386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fd fdf0 	bl	8000f6c <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003390:	f7fd fdec 	bl	8000f6c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e056      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a2:	4b2e      	ldr	r3, [pc, #184]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x41c>
 80033ae:	e04e      	b.n	800344e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b0:	4b2b      	ldr	r3, [pc, #172]	; (8003460 <HAL_RCC_OscConfig+0x4ec>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b6:	f7fd fdd9 	bl	8000f6c <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033be:	f7fd fdd5 	bl	8000f6c <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e03f      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d0:	4b22      	ldr	r3, [pc, #136]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f0      	bne.n	80033be <HAL_RCC_OscConfig+0x44a>
 80033dc:	e037      	b.n	800344e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e032      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033ea:	4b1c      	ldr	r3, [pc, #112]	; (800345c <HAL_RCC_OscConfig+0x4e8>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d028      	beq.n	800344a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d121      	bne.n	800344a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d11a      	bne.n	800344a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800341a:	4013      	ands	r3, r2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003420:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003422:	4293      	cmp	r3, r2
 8003424:	d111      	bne.n	800344a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	3b01      	subs	r3, #1
 8003434:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003436:	429a      	cmp	r2, r3
 8003438:	d107      	bne.n	800344a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40007000 	.word	0x40007000
 800345c:	40023800 	.word	0x40023800
 8003460:	42470060 	.word	0x42470060

08003464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0cc      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003478:	4b68      	ldr	r3, [pc, #416]	; (800361c <HAL_RCC_ClockConfig+0x1b8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d90c      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003486:	4b65      	ldr	r3, [pc, #404]	; (800361c <HAL_RCC_ClockConfig+0x1b8>)
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b63      	ldr	r3, [pc, #396]	; (800361c <HAL_RCC_ClockConfig+0x1b8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0b8      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d020      	beq.n	80034ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b8:	4b59      	ldr	r3, [pc, #356]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4a58      	ldr	r2, [pc, #352]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d0:	4b53      	ldr	r3, [pc, #332]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a52      	ldr	r2, [pc, #328]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034dc:	4b50      	ldr	r3, [pc, #320]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	494d      	ldr	r1, [pc, #308]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d044      	beq.n	8003584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b47      	ldr	r3, [pc, #284]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d119      	bne.n	8003542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e07f      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d003      	beq.n	8003522 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800351e:	2b03      	cmp	r3, #3
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003522:	4b3f      	ldr	r3, [pc, #252]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e06f      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003532:	4b3b      	ldr	r3, [pc, #236]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e067      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003542:	4b37      	ldr	r3, [pc, #220]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f023 0203 	bic.w	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	4934      	ldr	r1, [pc, #208]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	4313      	orrs	r3, r2
 8003552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003554:	f7fd fd0a 	bl	8000f6c <HAL_GetTick>
 8003558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355a:	e00a      	b.n	8003572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800355c:	f7fd fd06 	bl	8000f6c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f241 3288 	movw	r2, #5000	; 0x1388
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e04f      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	4b2b      	ldr	r3, [pc, #172]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 020c 	and.w	r2, r3, #12
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	429a      	cmp	r2, r3
 8003582:	d1eb      	bne.n	800355c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003584:	4b25      	ldr	r3, [pc, #148]	; (800361c <HAL_RCC_ClockConfig+0x1b8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d20c      	bcs.n	80035ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b22      	ldr	r3, [pc, #136]	; (800361c <HAL_RCC_ClockConfig+0x1b8>)
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e032      	b.n	8003612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4916      	ldr	r1, [pc, #88]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	490e      	ldr	r1, [pc, #56]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ea:	f000 f821 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035ee:	4602      	mov	r2, r0
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	490a      	ldr	r1, [pc, #40]	; (8003624 <HAL_RCC_ClockConfig+0x1c0>)
 80035fc:	5ccb      	ldrb	r3, [r1, r3]
 80035fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003602:	4a09      	ldr	r2, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_ClockConfig+0x1c8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd fc6a 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40023c00 	.word	0x40023c00
 8003620:	40023800 	.word	0x40023800
 8003624:	08008570 	.word	0x08008570
 8003628:	20000000 	.word	0x20000000
 800362c:	20000004 	.word	0x20000004

08003630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	2300      	movs	r3, #0
 8003642:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003648:	4b67      	ldr	r3, [pc, #412]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 030c 	and.w	r3, r3, #12
 8003650:	2b08      	cmp	r3, #8
 8003652:	d00d      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x40>
 8003654:	2b08      	cmp	r3, #8
 8003656:	f200 80bd 	bhi.w	80037d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x34>
 800365e:	2b04      	cmp	r3, #4
 8003660:	d003      	beq.n	800366a <HAL_RCC_GetSysClockFreq+0x3a>
 8003662:	e0b7      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003664:	4b61      	ldr	r3, [pc, #388]	; (80037ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003666:	60bb      	str	r3, [r7, #8]
       break;
 8003668:	e0b7      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800366a:	4b61      	ldr	r3, [pc, #388]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800366c:	60bb      	str	r3, [r7, #8]
      break;
 800366e:	e0b4      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003670:	4b5d      	ldr	r3, [pc, #372]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003678:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800367a:	4b5b      	ldr	r3, [pc, #364]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d04d      	beq.n	8003722 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003686:	4b58      	ldr	r3, [pc, #352]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	461a      	mov	r2, r3
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003696:	f04f 0100 	mov.w	r1, #0
 800369a:	ea02 0800 	and.w	r8, r2, r0
 800369e:	ea03 0901 	and.w	r9, r3, r1
 80036a2:	4640      	mov	r0, r8
 80036a4:	4649      	mov	r1, r9
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	014b      	lsls	r3, r1, #5
 80036b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036b4:	0142      	lsls	r2, r0, #5
 80036b6:	4610      	mov	r0, r2
 80036b8:	4619      	mov	r1, r3
 80036ba:	ebb0 0008 	subs.w	r0, r0, r8
 80036be:	eb61 0109 	sbc.w	r1, r1, r9
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	018b      	lsls	r3, r1, #6
 80036cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036d0:	0182      	lsls	r2, r0, #6
 80036d2:	1a12      	subs	r2, r2, r0
 80036d4:	eb63 0301 	sbc.w	r3, r3, r1
 80036d8:	f04f 0000 	mov.w	r0, #0
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	00d9      	lsls	r1, r3, #3
 80036e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036e6:	00d0      	lsls	r0, r2, #3
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	eb12 0208 	adds.w	r2, r2, r8
 80036f0:	eb43 0309 	adc.w	r3, r3, r9
 80036f4:	f04f 0000 	mov.w	r0, #0
 80036f8:	f04f 0100 	mov.w	r1, #0
 80036fc:	0259      	lsls	r1, r3, #9
 80036fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003702:	0250      	lsls	r0, r2, #9
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	461a      	mov	r2, r3
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	f7fc fdb4 	bl	8000280 <__aeabi_uldivmod>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4613      	mov	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	e04a      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003722:	4b31      	ldr	r3, [pc, #196]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	099b      	lsrs	r3, r3, #6
 8003728:	461a      	mov	r2, r3
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003732:	f04f 0100 	mov.w	r1, #0
 8003736:	ea02 0400 	and.w	r4, r2, r0
 800373a:	ea03 0501 	and.w	r5, r3, r1
 800373e:	4620      	mov	r0, r4
 8003740:	4629      	mov	r1, r5
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	014b      	lsls	r3, r1, #5
 800374c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003750:	0142      	lsls	r2, r0, #5
 8003752:	4610      	mov	r0, r2
 8003754:	4619      	mov	r1, r3
 8003756:	1b00      	subs	r0, r0, r4
 8003758:	eb61 0105 	sbc.w	r1, r1, r5
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	018b      	lsls	r3, r1, #6
 8003766:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800376a:	0182      	lsls	r2, r0, #6
 800376c:	1a12      	subs	r2, r2, r0
 800376e:	eb63 0301 	sbc.w	r3, r3, r1
 8003772:	f04f 0000 	mov.w	r0, #0
 8003776:	f04f 0100 	mov.w	r1, #0
 800377a:	00d9      	lsls	r1, r3, #3
 800377c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003780:	00d0      	lsls	r0, r2, #3
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	1912      	adds	r2, r2, r4
 8003788:	eb45 0303 	adc.w	r3, r5, r3
 800378c:	f04f 0000 	mov.w	r0, #0
 8003790:	f04f 0100 	mov.w	r1, #0
 8003794:	0299      	lsls	r1, r3, #10
 8003796:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800379a:	0290      	lsls	r0, r2, #10
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4610      	mov	r0, r2
 80037a2:	4619      	mov	r1, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	461a      	mov	r2, r3
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	f7fc fd68 	bl	8000280 <__aeabi_uldivmod>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4613      	mov	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	60bb      	str	r3, [r7, #8]
      break;
 80037d2:	e002      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037d6:	60bb      	str	r3, [r7, #8]
      break;
 80037d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037da:	68bb      	ldr	r3, [r7, #8]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	00f42400 	.word	0x00f42400
 80037f0:	007a1200 	.word	0x007a1200

080037f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <HAL_RCC_GetHCLKFreq+0x14>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000000 	.word	0x20000000

0800380c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e07b      	b.n	8003916 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	2b00      	cmp	r3, #0
 8003824:	d108      	bne.n	8003838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800382e:	d009      	beq.n	8003844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	61da      	str	r2, [r3, #28]
 8003836:	e005      	b.n	8003844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd f9ae 	bl	8000bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800387a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	ea42 0103 	orr.w	r1, r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	f003 0104 	and.w	r1, r3, #4
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f003 0210 	and.w	r2, r3, #16
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69da      	ldr	r2, [r3, #28]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003904:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b088      	sub	sp, #32
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	4613      	mov	r3, r2
 800392c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_SPI_Transmit+0x22>
 800393c:	2302      	movs	r3, #2
 800393e:	e126      	b.n	8003b8e <HAL_SPI_Transmit+0x270>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003948:	f7fd fb10 	bl	8000f6c <HAL_GetTick>
 800394c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d002      	beq.n	8003964 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800395e:	2302      	movs	r3, #2
 8003960:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003962:	e10b      	b.n	8003b7c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_SPI_Transmit+0x52>
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003974:	e102      	b.n	8003b7c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2203      	movs	r2, #3
 800397a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	88fa      	ldrh	r2, [r7, #6]
 800398e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039bc:	d10f      	bne.n	80039de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d007      	beq.n	80039fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a04:	d14b      	bne.n	8003a9e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_SPI_Transmit+0xf6>
 8003a0e:	8afb      	ldrh	r3, [r7, #22]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d13e      	bne.n	8003a92 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	881a      	ldrh	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	1c9a      	adds	r2, r3, #2
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a38:	e02b      	b.n	8003a92 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d112      	bne.n	8003a6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	1c9a      	adds	r2, r3, #2
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a6c:	e011      	b.n	8003a92 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a6e:	f7fd fa7d 	bl	8000f6c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d803      	bhi.n	8003a86 <HAL_SPI_Transmit+0x168>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d102      	bne.n	8003a8c <HAL_SPI_Transmit+0x16e>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a90:	e074      	b.n	8003b7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1ce      	bne.n	8003a3a <HAL_SPI_Transmit+0x11c>
 8003a9c:	e04c      	b.n	8003b38 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_SPI_Transmit+0x18e>
 8003aa6:	8afb      	ldrh	r3, [r7, #22]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d140      	bne.n	8003b2e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ad2:	e02c      	b.n	8003b2e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d113      	bne.n	8003b0a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	330c      	adds	r3, #12
 8003aec:	7812      	ldrb	r2, [r2, #0]
 8003aee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b08:	e011      	b.n	8003b2e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b0a:	f7fd fa2f 	bl	8000f6c <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d803      	bhi.n	8003b22 <HAL_SPI_Transmit+0x204>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b20:	d102      	bne.n	8003b28 <HAL_SPI_Transmit+0x20a>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d102      	bne.n	8003b2e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b2c:	e026      	b.n	8003b7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1cd      	bne.n	8003ad4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	6839      	ldr	r1, [r7, #0]
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fb1b 	bl	8004178 <SPI_EndRxTxTransaction>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	e000      	b.n	8003b7c <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e0e3      	b.n	8003d80 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bc6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003bce:	7dbb      	ldrb	r3, [r7, #22]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d00d      	beq.n	8003bf0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bda:	d106      	bne.n	8003bea <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <HAL_SPI_TransmitReceive_DMA+0x52>
 8003be4:	7dbb      	ldrb	r3, [r7, #22]
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d002      	beq.n	8003bf0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003bea:	2302      	movs	r3, #2
 8003bec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bee:	e0c2      	b.n	8003d76 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d102      	bne.n	8003c08 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c06:	e0b6      	b.n	8003d76 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d003      	beq.n	8003c1c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2205      	movs	r2, #5
 8003c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	887a      	ldrh	r2, [r7, #2]
 8003c2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	887a      	ldrh	r2, [r7, #2]
 8003c32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	887a      	ldrh	r2, [r7, #2]
 8003c3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	887a      	ldrh	r2, [r7, #2]
 8003c44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d108      	bne.n	8003c70 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	4a49      	ldr	r2, [pc, #292]	; (8003d88 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6a:	4a48      	ldr	r2, [pc, #288]	; (8003d8c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003c6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c6e:	e007      	b.n	8003c80 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c74:	4a46      	ldr	r2, [pc, #280]	; (8003d90 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7c:	4a45      	ldr	r2, [pc, #276]	; (8003d94 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c84:	4a44      	ldr	r2, [pc, #272]	; (8003d98 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003c86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003ca8:	f7fd fb50 	bl	800134c <HAL_DMA_Start_IT>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00c      	beq.n	8003ccc <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	f043 0210 	orr.w	r2, r3, #16
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003cca:	e054      	b.n	8003d76 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce8:	2200      	movs	r2, #0
 8003cea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	4619      	mov	r1, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d12:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d14:	f7fd fb1a 	bl	800134c <HAL_DMA_Start_IT>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00c      	beq.n	8003d38 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	f043 0210 	orr.w	r2, r3, #16
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003d36:	e01e      	b.n	8003d76 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d42:	2b40      	cmp	r3, #64	; 0x40
 8003d44:	d007      	beq.n	8003d56 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d54:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0220 	orr.w	r2, r2, #32
 8003d64:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0202 	orr.w	r2, r2, #2
 8003d74:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	08003f25 	.word	0x08003f25
 8003d8c:	08003ded 	.word	0x08003ded
 8003d90:	08003f41 	.word	0x08003f41
 8003d94:	08003e95 	.word	0x08003e95
 8003d98:	08003f5d 	.word	0x08003f5d

08003d9c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dfa:	f7fd f8b7 	bl	8000f6c <HAL_GetTick>
 8003dfe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0e:	d03b      	beq.n	8003e88 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0220 	bic.w	r2, r2, #32
 8003e1e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10d      	bne.n	8003e44 <SPI_DMAReceiveCplt+0x58>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e30:	d108      	bne.n	8003e44 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0203 	bic.w	r2, r2, #3
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	e007      	b.n	8003e54 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	2164      	movs	r1, #100	; 0x64
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f927 	bl	80040ac <SPI_EndRxTransaction>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff ffa9 	bl	8003dd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003e86:	e002      	b.n	8003e8e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff ff87 	bl	8003d9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ea2:	f7fd f863 	bl	8000f6c <HAL_GetTick>
 8003ea6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb6:	d02f      	beq.n	8003f18 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0220 	bic.w	r2, r2, #32
 8003ec6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	2164      	movs	r1, #100	; 0x64
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f953 	bl	8004178 <SPI_EndRxTxTransaction>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0203 	bic.w	r2, r2, #3
 8003ef2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7ff ff61 	bl	8003dd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003f16:	e002      	b.n	8003f1e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f7fc fc33 	bl	8000784 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff ff3c 	bl	8003db0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f7ff ff38 	bl	8003dc4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0203 	bic.w	r2, r2, #3
 8003f78:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7e:	f043 0210 	orr.w	r2, r3, #16
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7ff ff22 	bl	8003dd8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f94:	bf00      	nop
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fac:	f7fc ffde 	bl	8000f6c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	4413      	add	r3, r2
 8003fba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fbc:	f7fc ffd6 	bl	8000f6c <HAL_GetTick>
 8003fc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fc2:	4b39      	ldr	r3, [pc, #228]	; (80040a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	015b      	lsls	r3, r3, #5
 8003fc8:	0d1b      	lsrs	r3, r3, #20
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	fb02 f303 	mul.w	r3, r2, r3
 8003fd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fd2:	e054      	b.n	800407e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d050      	beq.n	800407e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fdc:	f7fc ffc6 	bl	8000f6c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d902      	bls.n	8003ff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d13d      	bne.n	800406e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800400a:	d111      	bne.n	8004030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004014:	d004      	beq.n	8004020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401e:	d107      	bne.n	8004030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800402e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004038:	d10f      	bne.n	800405a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e017      	b.n	800409e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	3b01      	subs	r3, #1
 800407c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4013      	ands	r3, r2
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	bf0c      	ite	eq
 800408e:	2301      	moveq	r3, #1
 8004090:	2300      	movne	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	429a      	cmp	r2, r3
 800409a:	d19b      	bne.n	8003fd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20000000 	.word	0x20000000

080040ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040c0:	d111      	bne.n	80040e6 <SPI_EndRxTransaction+0x3a>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ca:	d004      	beq.n	80040d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d4:	d107      	bne.n	80040e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ee:	d12a      	bne.n	8004146 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f8:	d012      	beq.n	8004120 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2200      	movs	r2, #0
 8004102:	2180      	movs	r1, #128	; 0x80
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7ff ff49 	bl	8003f9c <SPI_WaitFlagStateUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d02d      	beq.n	800416c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e026      	b.n	800416e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2200      	movs	r2, #0
 8004128:	2101      	movs	r1, #1
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f7ff ff36 	bl	8003f9c <SPI_WaitFlagStateUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01a      	beq.n	800416c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	f043 0220 	orr.w	r2, r3, #32
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e013      	b.n	800416e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2200      	movs	r2, #0
 800414e:	2101      	movs	r1, #1
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff ff23 	bl	8003f9c <SPI_WaitFlagStateUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d007      	beq.n	800416c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	f043 0220 	orr.w	r2, r3, #32
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e000      	b.n	800416e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <SPI_EndRxTxTransaction+0x7c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <SPI_EndRxTxTransaction+0x80>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	0d5b      	lsrs	r3, r3, #21
 8004190:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004194:	fb02 f303 	mul.w	r3, r2, r3
 8004198:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a2:	d112      	bne.n	80041ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2200      	movs	r2, #0
 80041ac:	2180      	movs	r1, #128	; 0x80
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7ff fef4 	bl	8003f9c <SPI_WaitFlagStateUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d016      	beq.n	80041e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f043 0220 	orr.w	r2, r3, #32
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e00f      	b.n	80041ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e0:	2b80      	cmp	r3, #128	; 0x80
 80041e2:	d0f2      	beq.n	80041ca <SPI_EndRxTxTransaction+0x52>
 80041e4:	e000      	b.n	80041e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80041e6:	bf00      	nop
  }

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000000 	.word	0x20000000
 80041f8:	165e9f81 	.word	0x165e9f81

080041fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041fc:	b084      	sub	sp, #16
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	f107 001c 	add.w	r0, r7, #28
 800420a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	2b01      	cmp	r3, #1
 8004212:	d122      	bne.n	800425a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800423c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800423e:	2b01      	cmp	r3, #1
 8004240:	d105      	bne.n	800424e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f001 fb1c 	bl	800588c <USB_CoreReset>
 8004254:	4603      	mov	r3, r0
 8004256:	73fb      	strb	r3, [r7, #15]
 8004258:	e01a      	b.n	8004290 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f001 fb10 	bl	800588c <USB_CoreReset>
 800426c:	4603      	mov	r3, r0
 800426e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
 8004282:	e005      	b.n	8004290 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	2b01      	cmp	r3, #1
 8004294:	d10b      	bne.n	80042ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f043 0206 	orr.w	r2, r3, #6
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042ba:	b004      	add	sp, #16
 80042bc:	4770      	bx	lr
	...

080042c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	4613      	mov	r3, r2
 80042cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d165      	bne.n	80043a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4a41      	ldr	r2, [pc, #260]	; (80043dc <USB_SetTurnaroundTime+0x11c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d906      	bls.n	80042ea <USB_SetTurnaroundTime+0x2a>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4a40      	ldr	r2, [pc, #256]	; (80043e0 <USB_SetTurnaroundTime+0x120>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d202      	bcs.n	80042ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042e4:	230f      	movs	r3, #15
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e062      	b.n	80043b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4a3c      	ldr	r2, [pc, #240]	; (80043e0 <USB_SetTurnaroundTime+0x120>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d306      	bcc.n	8004300 <USB_SetTurnaroundTime+0x40>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4a3b      	ldr	r2, [pc, #236]	; (80043e4 <USB_SetTurnaroundTime+0x124>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d202      	bcs.n	8004300 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042fa:	230e      	movs	r3, #14
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	e057      	b.n	80043b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4a38      	ldr	r2, [pc, #224]	; (80043e4 <USB_SetTurnaroundTime+0x124>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d306      	bcc.n	8004316 <USB_SetTurnaroundTime+0x56>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4a37      	ldr	r2, [pc, #220]	; (80043e8 <USB_SetTurnaroundTime+0x128>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d202      	bcs.n	8004316 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004310:	230d      	movs	r3, #13
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	e04c      	b.n	80043b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4a33      	ldr	r2, [pc, #204]	; (80043e8 <USB_SetTurnaroundTime+0x128>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d306      	bcc.n	800432c <USB_SetTurnaroundTime+0x6c>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4a32      	ldr	r2, [pc, #200]	; (80043ec <USB_SetTurnaroundTime+0x12c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d802      	bhi.n	800432c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004326:	230c      	movs	r3, #12
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	e041      	b.n	80043b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4a2f      	ldr	r2, [pc, #188]	; (80043ec <USB_SetTurnaroundTime+0x12c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d906      	bls.n	8004342 <USB_SetTurnaroundTime+0x82>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4a2e      	ldr	r2, [pc, #184]	; (80043f0 <USB_SetTurnaroundTime+0x130>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d802      	bhi.n	8004342 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800433c:	230b      	movs	r3, #11
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	e036      	b.n	80043b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4a2a      	ldr	r2, [pc, #168]	; (80043f0 <USB_SetTurnaroundTime+0x130>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d906      	bls.n	8004358 <USB_SetTurnaroundTime+0x98>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	4a29      	ldr	r2, [pc, #164]	; (80043f4 <USB_SetTurnaroundTime+0x134>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d802      	bhi.n	8004358 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004352:	230a      	movs	r3, #10
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	e02b      	b.n	80043b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <USB_SetTurnaroundTime+0x134>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d906      	bls.n	800436e <USB_SetTurnaroundTime+0xae>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <USB_SetTurnaroundTime+0x138>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d202      	bcs.n	800436e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004368:	2309      	movs	r3, #9
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	e020      	b.n	80043b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4a21      	ldr	r2, [pc, #132]	; (80043f8 <USB_SetTurnaroundTime+0x138>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d306      	bcc.n	8004384 <USB_SetTurnaroundTime+0xc4>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	4a20      	ldr	r2, [pc, #128]	; (80043fc <USB_SetTurnaroundTime+0x13c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d802      	bhi.n	8004384 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800437e:	2308      	movs	r3, #8
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	e015      	b.n	80043b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <USB_SetTurnaroundTime+0x13c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d906      	bls.n	800439a <USB_SetTurnaroundTime+0xda>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4a1c      	ldr	r2, [pc, #112]	; (8004400 <USB_SetTurnaroundTime+0x140>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d202      	bcs.n	800439a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004394:	2307      	movs	r3, #7
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	e00a      	b.n	80043b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800439a:	2306      	movs	r3, #6
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	e007      	b.n	80043b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80043a6:	2309      	movs	r3, #9
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e001      	b.n	80043b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80043ac:	2309      	movs	r3, #9
 80043ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	029b      	lsls	r3, r3, #10
 80043c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80043c8:	431a      	orrs	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	00d8acbf 	.word	0x00d8acbf
 80043e0:	00e4e1c0 	.word	0x00e4e1c0
 80043e4:	00f42400 	.word	0x00f42400
 80043e8:	01067380 	.word	0x01067380
 80043ec:	011a499f 	.word	0x011a499f
 80043f0:	01312cff 	.word	0x01312cff
 80043f4:	014ca43f 	.word	0x014ca43f
 80043f8:	016e3600 	.word	0x016e3600
 80043fc:	01a6ab1f 	.word	0x01a6ab1f
 8004400:	01e84800 	.word	0x01e84800

08004404 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f043 0201 	orr.w	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f023 0201 	bic.w	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d115      	bne.n	8004496 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004476:	2001      	movs	r0, #1
 8004478:	f7fc fd84 	bl	8000f84 <HAL_Delay>
      ms++;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3301      	adds	r3, #1
 8004480:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f001 f972 	bl	800576c <USB_GetMode>
 8004488:	4603      	mov	r3, r0
 800448a:	2b01      	cmp	r3, #1
 800448c:	d01e      	beq.n	80044cc <USB_SetCurrentMode+0x84>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b31      	cmp	r3, #49	; 0x31
 8004492:	d9f0      	bls.n	8004476 <USB_SetCurrentMode+0x2e>
 8004494:	e01a      	b.n	80044cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d115      	bne.n	80044c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044a8:	2001      	movs	r0, #1
 80044aa:	f7fc fd6b 	bl	8000f84 <HAL_Delay>
      ms++;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3301      	adds	r3, #1
 80044b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f001 f959 	bl	800576c <USB_GetMode>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <USB_SetCurrentMode+0x84>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b31      	cmp	r3, #49	; 0x31
 80044c4:	d9f0      	bls.n	80044a8 <USB_SetCurrentMode+0x60>
 80044c6:	e001      	b.n	80044cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e005      	b.n	80044d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b32      	cmp	r3, #50	; 0x32
 80044d0:	d101      	bne.n	80044d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044e0:	b084      	sub	sp, #16
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b086      	sub	sp, #24
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	e009      	b.n	8004514 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	3340      	adds	r3, #64	; 0x40
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	2200      	movs	r2, #0
 800450c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	3301      	adds	r3, #1
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b0e      	cmp	r3, #14
 8004518:	d9f2      	bls.n	8004500 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800451a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d11c      	bne.n	800455a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800452e:	f043 0302 	orr.w	r3, r3, #2
 8004532:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	639a      	str	r2, [r3, #56]	; 0x38
 8004558:	e00b      	b.n	8004572 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004578:	461a      	mov	r2, r3
 800457a:	2300      	movs	r3, #0
 800457c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004584:	4619      	mov	r1, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458c:	461a      	mov	r2, r3
 800458e:	680b      	ldr	r3, [r1, #0]
 8004590:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004594:	2b01      	cmp	r3, #1
 8004596:	d10c      	bne.n	80045b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800459e:	2100      	movs	r1, #0
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f945 	bl	8004830 <USB_SetDevSpeed>
 80045a6:	e008      	b.n	80045ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045a8:	2101      	movs	r1, #1
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f940 	bl	8004830 <USB_SetDevSpeed>
 80045b0:	e003      	b.n	80045ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045b2:	2103      	movs	r1, #3
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f93b 	bl	8004830 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045ba:	2110      	movs	r1, #16
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f8f3 	bl	80047a8 <USB_FlushTxFifo>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f90f 	bl	80047f0 <USB_FlushRxFifo>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e2:	461a      	mov	r2, r3
 80045e4:	2300      	movs	r3, #0
 80045e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ee:	461a      	mov	r2, r3
 80045f0:	2300      	movs	r3, #0
 80045f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fa:	461a      	mov	r2, r3
 80045fc:	2300      	movs	r3, #0
 80045fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004600:	2300      	movs	r3, #0
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	e043      	b.n	800468e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800461c:	d118      	bne.n	8004650 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	461a      	mov	r2, r3
 8004632:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	e013      	b.n	8004662 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004646:	461a      	mov	r2, r3
 8004648:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	e008      	b.n	8004662 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465c:	461a      	mov	r2, r3
 800465e:	2300      	movs	r3, #0
 8004660:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466e:	461a      	mov	r2, r3
 8004670:	2300      	movs	r3, #0
 8004672:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004680:	461a      	mov	r2, r3
 8004682:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004686:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	3301      	adds	r3, #1
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	429a      	cmp	r2, r3
 8004694:	d3b7      	bcc.n	8004606 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	e043      	b.n	8004724 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046b2:	d118      	bne.n	80046e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c6:	461a      	mov	r2, r3
 80046c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	e013      	b.n	80046f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	461a      	mov	r2, r3
 80046de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	e008      	b.n	80046f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f2:	461a      	mov	r2, r3
 80046f4:	2300      	movs	r3, #0
 80046f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004704:	461a      	mov	r2, r3
 8004706:	2300      	movs	r3, #0
 8004708:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004716:	461a      	mov	r2, r3
 8004718:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800471c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	3301      	adds	r3, #1
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	429a      	cmp	r2, r3
 800472a:	d3b7      	bcc.n	800469c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800473a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800473e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800474c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	2b00      	cmp	r3, #0
 8004752:	d105      	bne.n	8004760 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f043 0210 	orr.w	r2, r3, #16
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <USB_DevInit+0x2c4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800476c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f043 0208 	orr.w	r2, r3, #8
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800477e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004780:	2b01      	cmp	r3, #1
 8004782:	d107      	bne.n	8004794 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800478c:	f043 0304 	orr.w	r3, r3, #4
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004794:	7dfb      	ldrb	r3, [r7, #23]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a0:	b004      	add	sp, #16
 80047a2:	4770      	bx	lr
 80047a4:	803c3800 	.word	0x803c3800

080047a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	019b      	lsls	r3, r3, #6
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	4a08      	ldr	r2, [pc, #32]	; (80047ec <USB_FlushTxFifo+0x44>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e006      	b.n	80047e0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b20      	cmp	r3, #32
 80047dc:	d0f1      	beq.n	80047c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	00030d40 	.word	0x00030d40

080047f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2210      	movs	r2, #16
 8004800:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3301      	adds	r3, #1
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	4a08      	ldr	r2, [pc, #32]	; (800482c <USB_FlushRxFifo+0x3c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e006      	b.n	8004820 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f003 0310 	and.w	r3, r3, #16
 800481a:	2b10      	cmp	r3, #16
 800481c:	d0f1      	beq.n	8004802 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	00030d40 	.word	0x00030d40

08004830 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004862:	b480      	push	{r7}
 8004864:	b087      	sub	sp, #28
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0306 	and.w	r3, r3, #6
 800487a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
 8004886:	e00a      	b.n	800489e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d002      	beq.n	8004894 <USB_GetDevSpeed+0x32>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b06      	cmp	r3, #6
 8004892:	d102      	bne.n	800489a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004894:	2302      	movs	r3, #2
 8004896:	75fb      	strb	r3, [r7, #23]
 8004898:	e001      	b.n	800489e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800489a:	230f      	movs	r3, #15
 800489c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800489e:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d13a      	bne.n	800493e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	2101      	movs	r1, #1
 80048da:	fa01 f303 	lsl.w	r3, r1, r3
 80048de:	b29b      	uxth	r3, r3
 80048e0:	68f9      	ldr	r1, [r7, #12]
 80048e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d155      	bne.n	80049ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	78db      	ldrb	r3, [r3, #3]
 800491a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800491c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	059b      	lsls	r3, r3, #22
 8004922:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004924:	4313      	orrs	r3, r2
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	0151      	lsls	r1, r2, #5
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	440a      	add	r2, r1
 800492e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e036      	b.n	80049ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	2101      	movs	r1, #1
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	041b      	lsls	r3, r3, #16
 8004956:	68f9      	ldr	r1, [r7, #12]
 8004958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800495c:	4313      	orrs	r3, r2
 800495e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d11a      	bne.n	80049ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	78db      	ldrb	r3, [r3, #3]
 8004990:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004992:	430b      	orrs	r3, r1
 8004994:	4313      	orrs	r3, r2
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
	...

080049bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	785b      	ldrb	r3, [r3, #1]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d161      	bne.n	8004a9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ee:	d11f      	bne.n	8004a30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	0151      	lsls	r1, r2, #5
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	440a      	add	r2, r1
 8004a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	0151      	lsls	r1, r2, #5
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	440a      	add	r2, r1
 8004a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	2101      	movs	r1, #1
 8004a42:	fa01 f303 	lsl.w	r3, r1, r3
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	68f9      	ldr	r1, [r7, #12]
 8004a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a50:	4013      	ands	r3, r2
 8004a52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	2101      	movs	r1, #1
 8004a66:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	68f9      	ldr	r1, [r7, #12]
 8004a70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a74:	4013      	ands	r3, r2
 8004a76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	0159      	lsls	r1, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	440b      	add	r3, r1
 8004a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a92:	4619      	mov	r1, r3
 8004a94:	4b35      	ldr	r3, [pc, #212]	; (8004b6c <USB_DeactivateEndpoint+0x1b0>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]
 8004a9a:	e060      	b.n	8004b5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ab2:	d11f      	bne.n	8004af4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ace:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ad2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004af2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	2101      	movs	r1, #1
 8004b06:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0a:	041b      	lsls	r3, r3, #16
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	68f9      	ldr	r1, [r7, #12]
 8004b10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b14:	4013      	ands	r3, r2
 8004b16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	2101      	movs	r1, #1
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	041b      	lsls	r3, r3, #16
 8004b30:	43db      	mvns	r3, r3
 8004b32:	68f9      	ldr	r1, [r7, #12]
 8004b34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	0159      	lsls	r1, r3, #5
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	440b      	add	r3, r1
 8004b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b56:	4619      	mov	r1, r3
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <USB_DeactivateEndpoint+0x1b4>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	ec337800 	.word	0xec337800
 8004b70:	eff37800 	.word	0xeff37800

08004b74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	; 0x28
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	785b      	ldrb	r3, [r3, #1]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	f040 815c 	bne.w	8004e4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d132      	bne.n	8004c04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	69fa      	ldr	r2, [r7, #28]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	0151      	lsls	r1, r2, #5
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	440a      	add	r2, r1
 8004bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004be0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	0151      	lsls	r1, r2, #5
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	440a      	add	r2, r1
 8004bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bfc:	0cdb      	lsrs	r3, r3, #19
 8004bfe:	04db      	lsls	r3, r3, #19
 8004c00:	6113      	str	r3, [r2, #16]
 8004c02:	e074      	b.n	8004cee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	0151      	lsls	r1, r2, #5
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	440a      	add	r2, r1
 8004c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c1e:	0cdb      	lsrs	r3, r3, #19
 8004c20:	04db      	lsls	r3, r3, #19
 8004c22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	0151      	lsls	r1, r2, #5
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	440a      	add	r2, r1
 8004c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6959      	ldr	r1, [r3, #20]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	440b      	add	r3, r1
 8004c60:	1e59      	subs	r1, r3, #1
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c6a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004c6c:	4b9d      	ldr	r3, [pc, #628]	; (8004ee4 <USB_EPStartXfer+0x370>)
 8004c6e:	400b      	ands	r3, r1
 8004c70:	69b9      	ldr	r1, [r7, #24]
 8004c72:	0148      	lsls	r0, r1, #5
 8004c74:	69f9      	ldr	r1, [r7, #28]
 8004c76:	4401      	add	r1, r0
 8004c78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c96:	69b9      	ldr	r1, [r7, #24]
 8004c98:	0148      	lsls	r0, r1, #5
 8004c9a:	69f9      	ldr	r1, [r7, #28]
 8004c9c:	4401      	add	r1, r0
 8004c9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	78db      	ldrb	r3, [r3, #3]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d11f      	bne.n	8004cee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ccc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d14b      	bne.n	8004d8c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d009      	beq.n	8004d10 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	461a      	mov	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	78db      	ldrb	r3, [r3, #3]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d128      	bne.n	8004d6a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d110      	bne.n	8004d4a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	0151      	lsls	r1, r2, #5
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	440a      	add	r2, r1
 8004d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	e00f      	b.n	8004d6a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	0151      	lsls	r1, r2, #5
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	440a      	add	r2, r1
 8004d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	e12f      	b.n	8004fec <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	0151      	lsls	r1, r2, #5
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	440a      	add	r2, r1
 8004da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004daa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	78db      	ldrb	r3, [r3, #3]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d015      	beq.n	8004de0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8117 	beq.w	8004fec <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	2101      	movs	r1, #1
 8004dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd4:	69f9      	ldr	r1, [r7, #28]
 8004dd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	634b      	str	r3, [r1, #52]	; 0x34
 8004dde:	e105      	b.n	8004fec <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d110      	bne.n	8004e12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	e00f      	b.n	8004e32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	68d9      	ldr	r1, [r3, #12]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	781a      	ldrb	r2, [r3, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	b298      	uxth	r0, r3
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4603      	mov	r3, r0
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fa2b 	bl	80052a2 <USB_WritePacket>
 8004e4c:	e0ce      	b.n	8004fec <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	0151      	lsls	r1, r2, #5
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	440a      	add	r2, r1
 8004e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e68:	0cdb      	lsrs	r3, r3, #19
 8004e6a:	04db      	lsls	r3, r3, #19
 8004e6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	0151      	lsls	r1, r2, #5
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	440a      	add	r2, r1
 8004e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d126      	bne.n	8004ee8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb0:	69b9      	ldr	r1, [r7, #24]
 8004eb2:	0148      	lsls	r0, r1, #5
 8004eb4:	69f9      	ldr	r1, [r7, #28]
 8004eb6:	4401      	add	r1, r0
 8004eb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ede:	6113      	str	r3, [r2, #16]
 8004ee0:	e036      	b.n	8004f50 <USB_EPStartXfer+0x3dc>
 8004ee2:	bf00      	nop
 8004ee4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	695a      	ldr	r2, [r3, #20]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	1e5a      	subs	r2, r3, #1
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	8afb      	ldrh	r3, [r7, #22]
 8004f0e:	04d9      	lsls	r1, r3, #19
 8004f10:	4b39      	ldr	r3, [pc, #228]	; (8004ff8 <USB_EPStartXfer+0x484>)
 8004f12:	400b      	ands	r3, r1
 8004f14:	69b9      	ldr	r1, [r7, #24]
 8004f16:	0148      	lsls	r0, r1, #5
 8004f18:	69f9      	ldr	r1, [r7, #28]
 8004f1a:	4401      	add	r1, r0
 8004f1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f20:	4313      	orrs	r3, r2
 8004f22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	8af9      	ldrh	r1, [r7, #22]
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f40:	69b9      	ldr	r1, [r7, #24]
 8004f42:	0148      	lsls	r0, r1, #5
 8004f44:	69f9      	ldr	r1, [r7, #28]
 8004f46:	4401      	add	r1, r0
 8004f48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d10d      	bne.n	8004f72 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	68d9      	ldr	r1, [r3, #12]
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6e:	460a      	mov	r2, r1
 8004f70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	78db      	ldrb	r3, [r3, #3]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d128      	bne.n	8004fcc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d110      	bne.n	8004fac <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	e00f      	b.n	8004fcc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	1ff80000 	.word	0x1ff80000

08004ffc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	785b      	ldrb	r3, [r3, #1]
 8005018:	2b01      	cmp	r3, #1
 800501a:	f040 80cd 	bne.w	80051b8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d132      	bne.n	800508c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	0151      	lsls	r1, r2, #5
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	440a      	add	r2, r1
 800503c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005040:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005044:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005048:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	440a      	add	r2, r1
 8005060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005064:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005068:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	0151      	lsls	r1, r2, #5
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	440a      	add	r2, r1
 8005080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005084:	0cdb      	lsrs	r3, r3, #19
 8005086:	04db      	lsls	r3, r3, #19
 8005088:	6113      	str	r3, [r2, #16]
 800508a:	e04e      	b.n	800512a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a6:	0cdb      	lsrs	r3, r3, #19
 80050a8:	04db      	lsls	r3, r3, #19
 80050aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050ce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	695a      	ldr	r2, [r3, #20]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d903      	bls.n	80050e4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005102:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	691a      	ldr	r2, [r3, #16]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800511a:	6939      	ldr	r1, [r7, #16]
 800511c:	0148      	lsls	r0, r1, #5
 800511e:	6979      	ldr	r1, [r7, #20]
 8005120:	4401      	add	r1, r0
 8005122:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005126:	4313      	orrs	r3, r2
 8005128:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d11e      	bne.n	800516e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d009      	beq.n	800514c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	461a      	mov	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	440a      	add	r2, r1
 8005162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005166:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	e092      	b.n	8005294 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005188:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800518c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d07e      	beq.n	8005294 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	2101      	movs	r1, #1
 80051a8:	fa01 f303 	lsl.w	r3, r1, r3
 80051ac:	6979      	ldr	r1, [r7, #20]
 80051ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051b2:	4313      	orrs	r3, r2
 80051b4:	634b      	str	r3, [r1, #52]	; 0x34
 80051b6:	e06d      	b.n	8005294 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d2:	0cdb      	lsrs	r3, r3, #19
 80051d4:	04db      	lsls	r3, r3, #19
 80051d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051fa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	0151      	lsls	r1, r2, #5
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	440a      	add	r2, r1
 8005222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800522a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005242:	6939      	ldr	r1, [r7, #16]
 8005244:	0148      	lsls	r0, r1, #5
 8005246:	6979      	ldr	r1, [r7, #20]
 8005248:	4401      	add	r1, r0
 800524a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800524e:	4313      	orrs	r3, r2
 8005250:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d10d      	bne.n	8005274 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d009      	beq.n	8005274 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	68d9      	ldr	r1, [r3, #12]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	460a      	mov	r2, r1
 8005272:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	0151      	lsls	r1, r2, #5
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	440a      	add	r2, r1
 800528a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800528e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005292:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b089      	sub	sp, #36	; 0x24
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	4611      	mov	r1, r2
 80052ae:	461a      	mov	r2, r3
 80052b0:	460b      	mov	r3, r1
 80052b2:	71fb      	strb	r3, [r7, #7]
 80052b4:	4613      	mov	r3, r2
 80052b6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80052c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d123      	bne.n	8005310 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052c8:	88bb      	ldrh	r3, [r7, #4]
 80052ca:	3303      	adds	r3, #3
 80052cc:	089b      	lsrs	r3, r3, #2
 80052ce:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052d0:	2300      	movs	r3, #0
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	e018      	b.n	8005308 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	031a      	lsls	r2, r3, #12
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e2:	461a      	mov	r2, r3
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3301      	adds	r3, #1
 80052ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	3301      	adds	r3, #1
 80052f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	3301      	adds	r3, #1
 80052fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	3301      	adds	r3, #1
 8005300:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	3301      	adds	r3, #1
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	429a      	cmp	r2, r3
 800530e:	d3e2      	bcc.n	80052d6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3724      	adds	r7, #36	; 0x24
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800531e:	b480      	push	{r7}
 8005320:	b08b      	sub	sp, #44	; 0x2c
 8005322:	af00      	add	r7, sp, #0
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	4613      	mov	r3, r2
 800532a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	089b      	lsrs	r3, r3, #2
 8005338:	b29b      	uxth	r3, r3
 800533a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005344:	2300      	movs	r3, #0
 8005346:	623b      	str	r3, [r7, #32]
 8005348:	e014      	b.n	8005374 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	601a      	str	r2, [r3, #0]
    pDest++;
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	3301      	adds	r3, #1
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	3301      	adds	r3, #1
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	3301      	adds	r3, #1
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	3301      	adds	r3, #1
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	3301      	adds	r3, #1
 8005372:	623b      	str	r3, [r7, #32]
 8005374:	6a3a      	ldr	r2, [r7, #32]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	429a      	cmp	r2, r3
 800537a:	d3e6      	bcc.n	800534a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800537c:	8bfb      	ldrh	r3, [r7, #30]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01e      	beq.n	80053c0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800538c:	461a      	mov	r2, r3
 800538e:	f107 0310 	add.w	r3, r7, #16
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	b2db      	uxtb	r3, r3
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	fa22 f303 	lsr.w	r3, r2, r3
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	701a      	strb	r2, [r3, #0]
      i++;
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	3301      	adds	r3, #1
 80053ac:	623b      	str	r3, [r7, #32]
      pDest++;
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	3301      	adds	r3, #1
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80053b4:	8bfb      	ldrh	r3, [r7, #30]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053ba:	8bfb      	ldrh	r3, [r7, #30]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1ea      	bne.n	8005396 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	372c      	adds	r7, #44	; 0x2c
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	785b      	ldrb	r3, [r3, #1]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d12c      	bne.n	8005444 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	db12      	blt.n	8005422 <USB_EPSetStall+0x54>
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00f      	beq.n	8005422 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005420:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	0151      	lsls	r1, r2, #5
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	440a      	add	r2, r1
 8005438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e02b      	b.n	800549c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	db12      	blt.n	800547c <USB_EPSetStall+0xae>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00f      	beq.n	800547c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	440a      	add	r2, r1
 8005472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005476:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800547a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	440a      	add	r2, r1
 8005492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005496:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800549a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	785b      	ldrb	r3, [r3, #1]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d128      	bne.n	8005518 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	78db      	ldrb	r3, [r3, #3]
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d003      	beq.n	80054f6 <USB_EPClearStall+0x4c>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	78db      	ldrb	r3, [r3, #3]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d138      	bne.n	8005568 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	440a      	add	r2, r1
 800550c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	e027      	b.n	8005568 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	440a      	add	r2, r1
 800552e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005532:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005536:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	78db      	ldrb	r3, [r3, #3]
 800553c:	2b03      	cmp	r3, #3
 800553e:	d003      	beq.n	8005548 <USB_EPClearStall+0x9e>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	78db      	ldrb	r3, [r3, #3]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d10f      	bne.n	8005568 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	0151      	lsls	r1, r2, #5
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	440a      	add	r2, r1
 800555e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005566:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005576:	b480      	push	{r7}
 8005578:	b085      	sub	sp, #20
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	460b      	mov	r3, r1
 8005580:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005594:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005598:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	78fb      	ldrb	r3, [r7, #3]
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80055aa:	68f9      	ldr	r1, [r7, #12]
 80055ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055b0:	4313      	orrs	r3, r2
 80055b2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055dc:	f023 0303 	bic.w	r3, r3, #3
 80055e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055f0:	f023 0302 	bic.w	r3, r3, #2
 80055f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005632:	f043 0302 	orr.w	r3, r3, #2
 8005636:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4013      	ands	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800565e:	68fb      	ldr	r3, [r7, #12]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	4013      	ands	r3, r2
 800568e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	0c1b      	lsrs	r3, r3, #16
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	4013      	ands	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	b29b      	uxth	r3, r3
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	4013      	ands	r3, r2
 8005700:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005702:	68bb      	ldr	r3, [r7, #8]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005732:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
 8005740:	01db      	lsls	r3, r3, #7
 8005742:	b2db      	uxtb	r3, r3
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800574a:	78fb      	ldrb	r3, [r7, #3]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4013      	ands	r3, r2
 800575c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800575e:	68bb      	ldr	r3, [r7, #8]
}
 8005760:	4618      	mov	r0, r3
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f003 0301 	and.w	r3, r3, #1
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057a6:	f023 0307 	bic.w	r3, r3, #7
 80057aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
	...

080057d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	460b      	mov	r3, r1
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	333c      	adds	r3, #60	; 0x3c
 80057e6:	3304      	adds	r3, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4a26      	ldr	r2, [pc, #152]	; (8005888 <USB_EP0_OutStart+0xb8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d90a      	bls.n	800580a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005804:	d101      	bne.n	800580a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	e037      	b.n	800587a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005810:	461a      	mov	r2, r3
 8005812:	2300      	movs	r3, #0
 8005814:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005824:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005828:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005838:	f043 0318 	orr.w	r3, r3, #24
 800583c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800584c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005850:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005852:	7afb      	ldrb	r3, [r7, #11]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d10f      	bne.n	8005878 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585e:	461a      	mov	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005872:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005876:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	4f54300a 	.word	0x4f54300a

0800588c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3301      	adds	r3, #1
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	4a13      	ldr	r2, [pc, #76]	; (80058ec <USB_CoreReset+0x60>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d901      	bls.n	80058a8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e01a      	b.n	80058de <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	daf3      	bge.n	8005898 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f043 0201 	orr.w	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3301      	adds	r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	4a09      	ldr	r2, [pc, #36]	; (80058ec <USB_CoreReset+0x60>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e006      	b.n	80058de <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d0f1      	beq.n	80058c0 <USB_CoreReset+0x34>

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	00030d40 	.word	0x00030d40

080058f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80058fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005900:	f002 f95c 	bl	8007bbc <USBD_static_malloc>
 8005904:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d105      	bne.n	8005918 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005914:	2302      	movs	r3, #2
 8005916:	e066      	b.n	80059e6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	7c1b      	ldrb	r3, [r3, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d119      	bne.n	800595c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800592c:	2202      	movs	r2, #2
 800592e:	2181      	movs	r1, #129	; 0x81
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f002 f820 	bl	8007976 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800593c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005940:	2202      	movs	r2, #2
 8005942:	2101      	movs	r1, #1
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f002 f816 	bl	8007976 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2210      	movs	r2, #16
 8005956:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800595a:	e016      	b.n	800598a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800595c:	2340      	movs	r3, #64	; 0x40
 800595e:	2202      	movs	r2, #2
 8005960:	2181      	movs	r1, #129	; 0x81
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f002 f807 	bl	8007976 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800596e:	2340      	movs	r3, #64	; 0x40
 8005970:	2202      	movs	r2, #2
 8005972:	2101      	movs	r1, #1
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f001 fffe 	bl	8007976 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2210      	movs	r2, #16
 8005986:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800598a:	2308      	movs	r3, #8
 800598c:	2203      	movs	r2, #3
 800598e:	2182      	movs	r1, #130	; 0x82
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 fff0 	bl	8007976 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	7c1b      	ldrb	r3, [r3, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d109      	bne.n	80059d4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059ca:	2101      	movs	r1, #1
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f002 f8c1 	bl	8007b54 <USBD_LL_PrepareReceive>
 80059d2:	e007      	b.n	80059e4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059da:	2340      	movs	r3, #64	; 0x40
 80059dc:	2101      	movs	r1, #1
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f002 f8b8 	bl	8007b54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b082      	sub	sp, #8
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	460b      	mov	r3, r1
 80059f8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80059fa:	2181      	movs	r1, #129	; 0x81
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 ffe0 	bl	80079c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a08:	2101      	movs	r1, #1
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f001 ffd9 	bl	80079c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005a18:	2182      	movs	r1, #130	; 0x82
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f001 ffd1 	bl	80079c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00e      	beq.n	8005a58 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f002 f8c4 	bl	8007bd8 <USBD_static_free>
    pdev->pClassData = NULL;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e0af      	b.n	8005bec <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d03f      	beq.n	8005b18 <USBD_CDC_Setup+0xb4>
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	f040 809f 	bne.w	8005bdc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	88db      	ldrh	r3, [r3, #6]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d02e      	beq.n	8005b04 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	b25b      	sxtb	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	da16      	bge.n	8005ade <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005abc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	88d2      	ldrh	r2, [r2, #6]
 8005ac2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	88db      	ldrh	r3, [r3, #6]
 8005ac8:	2b07      	cmp	r3, #7
 8005aca:	bf28      	it	cs
 8005acc:	2307      	movcs	r3, #7
 8005ace:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	89fa      	ldrh	r2, [r7, #14]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f001 fb19 	bl	800710e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005adc:	e085      	b.n	8005bea <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	785a      	ldrb	r2, [r3, #1]
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	88db      	ldrh	r3, [r3, #6]
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005af4:	6939      	ldr	r1, [r7, #16]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	88db      	ldrh	r3, [r3, #6]
 8005afa:	461a      	mov	r2, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f001 fb32 	bl	8007166 <USBD_CtlPrepareRx>
      break;
 8005b02:	e072      	b.n	8005bea <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	7850      	ldrb	r0, [r2, #1]
 8005b10:	2200      	movs	r2, #0
 8005b12:	6839      	ldr	r1, [r7, #0]
 8005b14:	4798      	blx	r3
      break;
 8005b16:	e068      	b.n	8005bea <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	2b0b      	cmp	r3, #11
 8005b1e:	d852      	bhi.n	8005bc6 <USBD_CDC_Setup+0x162>
 8005b20:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <USBD_CDC_Setup+0xc4>)
 8005b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b26:	bf00      	nop
 8005b28:	08005b59 	.word	0x08005b59
 8005b2c:	08005bd5 	.word	0x08005bd5
 8005b30:	08005bc7 	.word	0x08005bc7
 8005b34:	08005bc7 	.word	0x08005bc7
 8005b38:	08005bc7 	.word	0x08005bc7
 8005b3c:	08005bc7 	.word	0x08005bc7
 8005b40:	08005bc7 	.word	0x08005bc7
 8005b44:	08005bc7 	.word	0x08005bc7
 8005b48:	08005bc7 	.word	0x08005bc7
 8005b4c:	08005bc7 	.word	0x08005bc7
 8005b50:	08005b83 	.word	0x08005b83
 8005b54:	08005bad 	.word	0x08005bad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d107      	bne.n	8005b74 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b64:	f107 030a 	add.w	r3, r7, #10
 8005b68:	2202      	movs	r2, #2
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f001 face 	bl	800710e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b72:	e032      	b.n	8005bda <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 fa58 	bl	800702c <USBD_CtlError>
            ret = USBD_FAIL;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	75fb      	strb	r3, [r7, #23]
          break;
 8005b80:	e02b      	b.n	8005bda <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d107      	bne.n	8005b9e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b8e:	f107 030d 	add.w	r3, r7, #13
 8005b92:	2201      	movs	r2, #1
 8005b94:	4619      	mov	r1, r3
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f001 fab9 	bl	800710e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b9c:	e01d      	b.n	8005bda <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f001 fa43 	bl	800702c <USBD_CtlError>
            ret = USBD_FAIL;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	75fb      	strb	r3, [r7, #23]
          break;
 8005baa:	e016      	b.n	8005bda <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d00f      	beq.n	8005bd8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f001 fa36 	bl	800702c <USBD_CtlError>
            ret = USBD_FAIL;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005bc4:	e008      	b.n	8005bd8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005bc6:	6839      	ldr	r1, [r7, #0]
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f001 fa2f 	bl	800702c <USBD_CtlError>
          ret = USBD_FAIL;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	75fb      	strb	r3, [r7, #23]
          break;
 8005bd2:	e002      	b.n	8005bda <USBD_CDC_Setup+0x176>
          break;
 8005bd4:	bf00      	nop
 8005bd6:	e008      	b.n	8005bea <USBD_CDC_Setup+0x186>
          break;
 8005bd8:	bf00      	nop
      }
      break;
 8005bda:	e006      	b.n	8005bea <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f001 fa24 	bl	800702c <USBD_CtlError>
      ret = USBD_FAIL;
 8005be4:	2303      	movs	r3, #3
 8005be6:	75fb      	strb	r3, [r7, #23]
      break;
 8005be8:	bf00      	nop
  }

  return (uint8_t)ret;
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005c06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e04f      	b.n	8005cb6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005c1e:	78fa      	ldrb	r2, [r7, #3]
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	440b      	add	r3, r1
 8005c2c:	3318      	adds	r3, #24
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d029      	beq.n	8005c88 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c34:	78fa      	ldrb	r2, [r7, #3]
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	3318      	adds	r3, #24
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	78f9      	ldrb	r1, [r7, #3]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	1a5b      	subs	r3, r3, r1
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4403      	add	r3, r0
 8005c54:	3344      	adds	r3, #68	; 0x44
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c5c:	fb03 f301 	mul.w	r3, r3, r1
 8005c60:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d110      	bne.n	8005c88 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005c66:	78fa      	ldrb	r2, [r7, #3]
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	3318      	adds	r3, #24
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c7a:	78f9      	ldrb	r1, [r7, #3]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2200      	movs	r2, #0
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 ff46 	bl	8007b12 <USBD_LL_Transmit>
 8005c86:	e015      	b.n	8005cb4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00b      	beq.n	8005cb4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005cb0:	78fa      	ldrb	r2, [r7, #3]
 8005cb2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cd0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e015      	b.n	8005d0c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ce0:	78fb      	ldrb	r3, [r7, #3]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 ff56 	bl	8007b96 <USBD_LL_GetRxDataSize>
 8005cea:	4602      	mov	r2, r0
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d06:	4611      	mov	r1, r2
 8005d08:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d22:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e01b      	b.n	8005d66 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d015      	beq.n	8005d64 <USBD_CDC_EP0_RxReady+0x50>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d3e:	2bff      	cmp	r3, #255	; 0xff
 8005d40:	d010      	beq.n	8005d64 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005d50:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d58:	b292      	uxth	r2, r2
 8005d5a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	22ff      	movs	r2, #255	; 0xff
 8005d60:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2243      	movs	r2, #67	; 0x43
 8005d7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005d7e:	4b03      	ldr	r3, [pc, #12]	; (8005d8c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	20000094 	.word	0x20000094

08005d90 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2243      	movs	r2, #67	; 0x43
 8005d9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005d9e:	4b03      	ldr	r3, [pc, #12]	; (8005dac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	20000050 	.word	0x20000050

08005db0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2243      	movs	r2, #67	; 0x43
 8005dbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005dbe:	4b03      	ldr	r3, [pc, #12]	; (8005dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	200000d8 	.word	0x200000d8

08005dd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	220a      	movs	r2, #10
 8005ddc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005dde:	4b03      	ldr	r3, [pc, #12]	; (8005dec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	2000000c 	.word	0x2000000c

08005df0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e004      	b.n	8005e0e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b087      	sub	sp, #28
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e2c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e008      	b.n	8005e4a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b085      	sub	sp, #20
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e66:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e004      	b.n	8005e7c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e96:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e01a      	b.n	8005ee0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d114      	bne.n	8005ede <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ed2:	2181      	movs	r1, #129	; 0x81
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f001 fe1c 	bl	8007b12 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ef6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e016      	b.n	8005f34 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	7c1b      	ldrb	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d109      	bne.n	8005f22 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f18:	2101      	movs	r1, #1
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 fe1a 	bl	8007b54 <USBD_LL_PrepareReceive>
 8005f20:	e007      	b.n	8005f32 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f28:	2340      	movs	r3, #64	; 0x40
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f001 fe11 	bl	8007b54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	4613      	mov	r3, r2
 8005f48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e01f      	b.n	8005f94 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	79fa      	ldrb	r2, [r7, #7]
 8005f86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f001 fc8d 	bl	80078a8 <USBD_LL_Init>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e016      	b.n	8005fe2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00b      	beq.n	8005fe0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	f107 020e 	add.w	r2, r7, #14
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4798      	blx	r3
 8005fd8:	4602      	mov	r2, r0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f001 fca4 	bl	8007940 <USBD_LL_Start>
 8005ff8:	4603      	mov	r3, r0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006024:	2303      	movs	r3, #3
 8006026:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d009      	beq.n	8006046 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	78fa      	ldrb	r2, [r7, #3]
 800603c:	4611      	mov	r1, r2
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	4798      	blx	r3
 8006042:	4603      	mov	r3, r0
 8006044:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d007      	beq.n	8006076 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	78fa      	ldrb	r2, [r7, #3]
 8006070:	4611      	mov	r1, r2
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
  }

  return USBD_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f000 ff90 	bl	8006fb8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80060a6:	461a      	mov	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060b4:	f003 031f 	and.w	r3, r3, #31
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d01a      	beq.n	80060f2 <USBD_LL_SetupStage+0x72>
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d822      	bhi.n	8006106 <USBD_LL_SetupStage+0x86>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <USBD_LL_SetupStage+0x4a>
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d00a      	beq.n	80060de <USBD_LL_SetupStage+0x5e>
 80060c8:	e01d      	b.n	8006106 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fa62 	bl	800659c <USBD_StdDevReq>
 80060d8:	4603      	mov	r3, r0
 80060da:	73fb      	strb	r3, [r7, #15]
      break;
 80060dc:	e020      	b.n	8006120 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fac6 	bl	8006678 <USBD_StdItfReq>
 80060ec:	4603      	mov	r3, r0
 80060ee:	73fb      	strb	r3, [r7, #15]
      break;
 80060f0:	e016      	b.n	8006120 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fb05 	bl	800670a <USBD_StdEPReq>
 8006100:	4603      	mov	r3, r0
 8006102:	73fb      	strb	r3, [r7, #15]
      break;
 8006104:	e00c      	b.n	8006120 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800610c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006110:	b2db      	uxtb	r3, r3
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 fc73 	bl	8007a00 <USBD_LL_StallEP>
 800611a:	4603      	mov	r3, r0
 800611c:	73fb      	strb	r3, [r7, #15]
      break;
 800611e:	bf00      	nop
  }

  return ret;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b086      	sub	sp, #24
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	460b      	mov	r3, r1
 8006134:	607a      	str	r2, [r7, #4]
 8006136:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006138:	7afb      	ldrb	r3, [r7, #11]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d138      	bne.n	80061b0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006144:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800614c:	2b03      	cmp	r3, #3
 800614e:	d14a      	bne.n	80061e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	429a      	cmp	r2, r3
 800615a:	d913      	bls.n	8006184 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	1ad2      	subs	r2, r2, r3
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	4293      	cmp	r3, r2
 8006174:	bf28      	it	cs
 8006176:	4613      	movcs	r3, r2
 8006178:	461a      	mov	r2, r3
 800617a:	6879      	ldr	r1, [r7, #4]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f001 f80f 	bl	80071a0 <USBD_CtlContinueRx>
 8006182:	e030      	b.n	80061e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b03      	cmp	r3, #3
 800618e:	d10b      	bne.n	80061a8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d005      	beq.n	80061a8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f001 f80a 	bl	80071c2 <USBD_CtlSendStatus>
 80061ae:	e01a      	b.n	80061e6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d114      	bne.n	80061e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00e      	beq.n	80061e6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	7afa      	ldrb	r2, [r7, #11]
 80061d2:	4611      	mov	r1, r2
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	4798      	blx	r3
 80061d8:	4603      	mov	r3, r0
 80061da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	e000      	b.n	80061e8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	460b      	mov	r3, r1
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80061fe:	7afb      	ldrb	r3, [r7, #11]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d16b      	bne.n	80062dc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3314      	adds	r3, #20
 8006208:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006210:	2b02      	cmp	r3, #2
 8006212:	d156      	bne.n	80062c2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	429a      	cmp	r2, r3
 800621e:	d914      	bls.n	800624a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	1ad2      	subs	r2, r2, r3
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	461a      	mov	r2, r3
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 ff84 	bl	8007144 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800623c:	2300      	movs	r3, #0
 800623e:	2200      	movs	r2, #0
 8006240:	2100      	movs	r1, #0
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f001 fc86 	bl	8007b54 <USBD_LL_PrepareReceive>
 8006248:	e03b      	b.n	80062c2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	429a      	cmp	r2, r3
 8006254:	d11c      	bne.n	8006290 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800625e:	429a      	cmp	r2, r3
 8006260:	d316      	bcc.n	8006290 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800626c:	429a      	cmp	r2, r3
 800626e:	d20f      	bcs.n	8006290 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006270:	2200      	movs	r2, #0
 8006272:	2100      	movs	r1, #0
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 ff65 	bl	8007144 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006282:	2300      	movs	r3, #0
 8006284:	2200      	movs	r2, #0
 8006286:	2100      	movs	r1, #0
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f001 fc63 	bl	8007b54 <USBD_LL_PrepareReceive>
 800628e:	e018      	b.n	80062c2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b03      	cmp	r3, #3
 800629a:	d10b      	bne.n	80062b4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062b4:	2180      	movs	r1, #128	; 0x80
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f001 fba2 	bl	8007a00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 ff93 	bl	80071e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d122      	bne.n	8006312 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7ff fe98 	bl	8006002 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062da:	e01a      	b.n	8006312 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d114      	bne.n	8006312 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00e      	beq.n	8006312 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	7afa      	ldrb	r2, [r7, #11]
 80062fe:	4611      	mov	r1, r2
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	4798      	blx	r3
 8006304:	4603      	mov	r3, r0
 8006306:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800630e:	7dfb      	ldrb	r3, [r7, #23]
 8006310:	e000      	b.n	8006314 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800634c:	2303      	movs	r3, #3
 800634e:	e02f      	b.n	80063b0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00f      	beq.n	800637a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	6852      	ldr	r2, [r2, #4]
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	4611      	mov	r1, r2
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800637a:	2340      	movs	r3, #64	; 0x40
 800637c:	2200      	movs	r2, #0
 800637e:	2100      	movs	r1, #0
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 faf8 	bl	8007976 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2240      	movs	r2, #64	; 0x40
 8006392:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006396:	2340      	movs	r3, #64	; 0x40
 8006398:	2200      	movs	r2, #0
 800639a:	2180      	movs	r1, #128	; 0x80
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 faea 	bl	8007976 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2240      	movs	r2, #64	; 0x40
 80063ac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	78fa      	ldrb	r2, [r7, #3]
 80063c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2204      	movs	r2, #4
 80063f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b04      	cmp	r3, #4
 8006416:	d106      	bne.n	8006426 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800641e:	b2da      	uxtb	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006446:	2303      	movs	r3, #3
 8006448:	e012      	b.n	8006470 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b03      	cmp	r3, #3
 8006454:	d10b      	bne.n	800646e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d005      	beq.n	800646e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800648e:	2303      	movs	r3, #3
 8006490:	e014      	b.n	80064bc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b03      	cmp	r3, #3
 800649c:	d10d      	bne.n	80064ba <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	78fa      	ldrb	r2, [r7, #3]
 80064b4:	4611      	mov	r1, r2
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80064da:	2303      	movs	r3, #3
 80064dc:	e014      	b.n	8006508 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d10d      	bne.n	8006506 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d007      	beq.n	8006506 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	78fa      	ldrb	r2, [r7, #3]
 8006500:	4611      	mov	r1, r2
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653c:	2b00      	cmp	r3, #0
 800653e:	d009      	beq.n	8006554 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6852      	ldr	r2, [r2, #4]
 800654c:	b2d2      	uxtb	r2, r2
 800654e:	4611      	mov	r1, r2
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	4798      	blx	r3
  }

  return USBD_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800655e:	b480      	push	{r7}
 8006560:	b087      	sub	sp, #28
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	3301      	adds	r3, #1
 8006574:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800657c:	8a3b      	ldrh	r3, [r7, #16]
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	b21a      	sxth	r2, r3
 8006582:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006586:	4313      	orrs	r3, r2
 8006588:	b21b      	sxth	r3, r3
 800658a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800658c:	89fb      	ldrh	r3, [r7, #14]
}
 800658e:	4618      	mov	r0, r3
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
	...

0800659c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065b2:	2b40      	cmp	r3, #64	; 0x40
 80065b4:	d005      	beq.n	80065c2 <USBD_StdDevReq+0x26>
 80065b6:	2b40      	cmp	r3, #64	; 0x40
 80065b8:	d853      	bhi.n	8006662 <USBD_StdDevReq+0xc6>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00b      	beq.n	80065d6 <USBD_StdDevReq+0x3a>
 80065be:	2b20      	cmp	r3, #32
 80065c0:	d14f      	bne.n	8006662 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	4798      	blx	r3
 80065d0:	4603      	mov	r3, r0
 80065d2:	73fb      	strb	r3, [r7, #15]
      break;
 80065d4:	e04a      	b.n	800666c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b09      	cmp	r3, #9
 80065dc:	d83b      	bhi.n	8006656 <USBD_StdDevReq+0xba>
 80065de:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <USBD_StdDevReq+0x48>)
 80065e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e4:	08006639 	.word	0x08006639
 80065e8:	0800664d 	.word	0x0800664d
 80065ec:	08006657 	.word	0x08006657
 80065f0:	08006643 	.word	0x08006643
 80065f4:	08006657 	.word	0x08006657
 80065f8:	08006617 	.word	0x08006617
 80065fc:	0800660d 	.word	0x0800660d
 8006600:	08006657 	.word	0x08006657
 8006604:	0800662f 	.word	0x0800662f
 8006608:	08006621 	.word	0x08006621
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f9de 	bl	80069d0 <USBD_GetDescriptor>
          break;
 8006614:	e024      	b.n	8006660 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fb43 	bl	8006ca4 <USBD_SetAddress>
          break;
 800661e:	e01f      	b.n	8006660 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fb82 	bl	8006d2c <USBD_SetConfig>
 8006628:	4603      	mov	r3, r0
 800662a:	73fb      	strb	r3, [r7, #15]
          break;
 800662c:	e018      	b.n	8006660 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800662e:	6839      	ldr	r1, [r7, #0]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fc21 	bl	8006e78 <USBD_GetConfig>
          break;
 8006636:	e013      	b.n	8006660 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fc52 	bl	8006ee4 <USBD_GetStatus>
          break;
 8006640:	e00e      	b.n	8006660 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fc81 	bl	8006f4c <USBD_SetFeature>
          break;
 800664a:	e009      	b.n	8006660 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fc90 	bl	8006f74 <USBD_ClrFeature>
          break;
 8006654:	e004      	b.n	8006660 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fce7 	bl	800702c <USBD_CtlError>
          break;
 800665e:	bf00      	nop
      }
      break;
 8006660:	e004      	b.n	800666c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fce1 	bl	800702c <USBD_CtlError>
      break;
 800666a:	bf00      	nop
  }

  return ret;
 800666c:	7bfb      	ldrb	r3, [r7, #15]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop

08006678 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d005      	beq.n	800669e <USBD_StdItfReq+0x26>
 8006692:	2b40      	cmp	r3, #64	; 0x40
 8006694:	d82f      	bhi.n	80066f6 <USBD_StdItfReq+0x7e>
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <USBD_StdItfReq+0x26>
 800669a:	2b20      	cmp	r3, #32
 800669c:	d12b      	bne.n	80066f6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	3b01      	subs	r3, #1
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d81d      	bhi.n	80066e8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	889b      	ldrh	r3, [r3, #4]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d813      	bhi.n	80066de <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	4798      	blx	r3
 80066c4:	4603      	mov	r3, r0
 80066c6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	88db      	ldrh	r3, [r3, #6]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d110      	bne.n	80066f2 <USBD_StdItfReq+0x7a>
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10d      	bne.n	80066f2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fd73 	bl	80071c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80066dc:	e009      	b.n	80066f2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fca3 	bl	800702c <USBD_CtlError>
          break;
 80066e6:	e004      	b.n	80066f2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fc9e 	bl	800702c <USBD_CtlError>
          break;
 80066f0:	e000      	b.n	80066f4 <USBD_StdItfReq+0x7c>
          break;
 80066f2:	bf00      	nop
      }
      break;
 80066f4:	e004      	b.n	8006700 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fc97 	bl	800702c <USBD_CtlError>
      break;
 80066fe:	bf00      	nop
  }

  return ret;
 8006700:	7bfb      	ldrb	r3, [r7, #15]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	889b      	ldrh	r3, [r3, #4]
 800671c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006726:	2b40      	cmp	r3, #64	; 0x40
 8006728:	d007      	beq.n	800673a <USBD_StdEPReq+0x30>
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	f200 8145 	bhi.w	80069ba <USBD_StdEPReq+0x2b0>
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00c      	beq.n	800674e <USBD_StdEPReq+0x44>
 8006734:	2b20      	cmp	r3, #32
 8006736:	f040 8140 	bne.w	80069ba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	4798      	blx	r3
 8006748:	4603      	mov	r3, r0
 800674a:	73fb      	strb	r3, [r7, #15]
      break;
 800674c:	e13a      	b.n	80069c4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	785b      	ldrb	r3, [r3, #1]
 8006752:	2b03      	cmp	r3, #3
 8006754:	d007      	beq.n	8006766 <USBD_StdEPReq+0x5c>
 8006756:	2b03      	cmp	r3, #3
 8006758:	f300 8129 	bgt.w	80069ae <USBD_StdEPReq+0x2a4>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d07f      	beq.n	8006860 <USBD_StdEPReq+0x156>
 8006760:	2b01      	cmp	r3, #1
 8006762:	d03c      	beq.n	80067de <USBD_StdEPReq+0xd4>
 8006764:	e123      	b.n	80069ae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d002      	beq.n	8006778 <USBD_StdEPReq+0x6e>
 8006772:	2b03      	cmp	r3, #3
 8006774:	d016      	beq.n	80067a4 <USBD_StdEPReq+0x9a>
 8006776:	e02c      	b.n	80067d2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006778:	7bbb      	ldrb	r3, [r7, #14]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00d      	beq.n	800679a <USBD_StdEPReq+0x90>
 800677e:	7bbb      	ldrb	r3, [r7, #14]
 8006780:	2b80      	cmp	r3, #128	; 0x80
 8006782:	d00a      	beq.n	800679a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006784:	7bbb      	ldrb	r3, [r7, #14]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 f939 	bl	8007a00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800678e:	2180      	movs	r1, #128	; 0x80
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 f935 	bl	8007a00 <USBD_LL_StallEP>
 8006796:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006798:	e020      	b.n	80067dc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fc45 	bl	800702c <USBD_CtlError>
              break;
 80067a2:	e01b      	b.n	80067dc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	885b      	ldrh	r3, [r3, #2]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10e      	bne.n	80067ca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <USBD_StdEPReq+0xc0>
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	2b80      	cmp	r3, #128	; 0x80
 80067b6:	d008      	beq.n	80067ca <USBD_StdEPReq+0xc0>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	88db      	ldrh	r3, [r3, #6]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d104      	bne.n	80067ca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 f91b 	bl	8007a00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fcf9 	bl	80071c2 <USBD_CtlSendStatus>

              break;
 80067d0:	e004      	b.n	80067dc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fc29 	bl	800702c <USBD_CtlError>
              break;
 80067da:	bf00      	nop
          }
          break;
 80067dc:	e0ec      	b.n	80069b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d002      	beq.n	80067f0 <USBD_StdEPReq+0xe6>
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d016      	beq.n	800681c <USBD_StdEPReq+0x112>
 80067ee:	e030      	b.n	8006852 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067f0:	7bbb      	ldrb	r3, [r7, #14]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00d      	beq.n	8006812 <USBD_StdEPReq+0x108>
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	2b80      	cmp	r3, #128	; 0x80
 80067fa:	d00a      	beq.n	8006812 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067fc:	7bbb      	ldrb	r3, [r7, #14]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 f8fd 	bl	8007a00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006806:	2180      	movs	r1, #128	; 0x80
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 f8f9 	bl	8007a00 <USBD_LL_StallEP>
 800680e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006810:	e025      	b.n	800685e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fc09 	bl	800702c <USBD_CtlError>
              break;
 800681a:	e020      	b.n	800685e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	885b      	ldrh	r3, [r3, #2]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d11b      	bne.n	800685c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006824:	7bbb      	ldrb	r3, [r7, #14]
 8006826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800682a:	2b00      	cmp	r3, #0
 800682c:	d004      	beq.n	8006838 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800682e:	7bbb      	ldrb	r3, [r7, #14]
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f001 f903 	bl	8007a3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fcc2 	bl	80071c2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	4798      	blx	r3
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006850:	e004      	b.n	800685c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fbe9 	bl	800702c <USBD_CtlError>
              break;
 800685a:	e000      	b.n	800685e <USBD_StdEPReq+0x154>
              break;
 800685c:	bf00      	nop
          }
          break;
 800685e:	e0ab      	b.n	80069b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d002      	beq.n	8006872 <USBD_StdEPReq+0x168>
 800686c:	2b03      	cmp	r3, #3
 800686e:	d032      	beq.n	80068d6 <USBD_StdEPReq+0x1cc>
 8006870:	e097      	b.n	80069a2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006872:	7bbb      	ldrb	r3, [r7, #14]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <USBD_StdEPReq+0x17e>
 8006878:	7bbb      	ldrb	r3, [r7, #14]
 800687a:	2b80      	cmp	r3, #128	; 0x80
 800687c:	d004      	beq.n	8006888 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fbd3 	bl	800702c <USBD_CtlError>
                break;
 8006886:	e091      	b.n	80069ac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800688c:	2b00      	cmp	r3, #0
 800688e:	da0b      	bge.n	80068a8 <USBD_StdEPReq+0x19e>
 8006890:	7bbb      	ldrb	r3, [r7, #14]
 8006892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	3310      	adds	r3, #16
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	4413      	add	r3, r2
 80068a4:	3304      	adds	r3, #4
 80068a6:	e00b      	b.n	80068c0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068a8:	7bbb      	ldrb	r3, [r7, #14]
 80068aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068ae:	4613      	mov	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	4413      	add	r3, r2
 80068be:	3304      	adds	r3, #4
 80068c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2202      	movs	r2, #2
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fc1d 	bl	800710e <USBD_CtlSendData>
              break;
 80068d4:	e06a      	b.n	80069ac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80068d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	da11      	bge.n	8006902 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80068de:	7bbb      	ldrb	r3, [r7, #14]
 80068e0:	f003 020f 	and.w	r2, r3, #15
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	4613      	mov	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	440b      	add	r3, r1
 80068f0:	3324      	adds	r3, #36	; 0x24
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d117      	bne.n	8006928 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fb96 	bl	800702c <USBD_CtlError>
                  break;
 8006900:	e054      	b.n	80069ac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006902:	7bbb      	ldrb	r3, [r7, #14]
 8006904:	f003 020f 	and.w	r2, r3, #15
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	4613      	mov	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	440b      	add	r3, r1
 8006914:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d104      	bne.n	8006928 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fb83 	bl	800702c <USBD_CtlError>
                  break;
 8006926:	e041      	b.n	80069ac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800692c:	2b00      	cmp	r3, #0
 800692e:	da0b      	bge.n	8006948 <USBD_StdEPReq+0x23e>
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	3310      	adds	r3, #16
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	4413      	add	r3, r2
 8006944:	3304      	adds	r3, #4
 8006946:	e00b      	b.n	8006960 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	4413      	add	r3, r2
 800695e:	3304      	adds	r3, #4
 8006960:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006962:	7bbb      	ldrb	r3, [r7, #14]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d002      	beq.n	800696e <USBD_StdEPReq+0x264>
 8006968:	7bbb      	ldrb	r3, [r7, #14]
 800696a:	2b80      	cmp	r3, #128	; 0x80
 800696c:	d103      	bne.n	8006976 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	e00e      	b.n	8006994 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f001 f87e 	bl	8007a7c <USBD_LL_IsStallEP>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2201      	movs	r2, #1
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	e002      	b.n	8006994 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2202      	movs	r2, #2
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fbb7 	bl	800710e <USBD_CtlSendData>
              break;
 80069a0:	e004      	b.n	80069ac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fb41 	bl	800702c <USBD_CtlError>
              break;
 80069aa:	bf00      	nop
          }
          break;
 80069ac:	e004      	b.n	80069b8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fb3b 	bl	800702c <USBD_CtlError>
          break;
 80069b6:	bf00      	nop
      }
      break;
 80069b8:	e004      	b.n	80069c4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fb35 	bl	800702c <USBD_CtlError>
      break;
 80069c2:	bf00      	nop
  }

  return ret;
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	885b      	ldrh	r3, [r3, #2]
 80069ea:	0a1b      	lsrs	r3, r3, #8
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b01      	subs	r3, #1
 80069f0:	2b06      	cmp	r3, #6
 80069f2:	f200 8128 	bhi.w	8006c46 <USBD_GetDescriptor+0x276>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <USBD_GetDescriptor+0x2c>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a19 	.word	0x08006a19
 8006a00:	08006a31 	.word	0x08006a31
 8006a04:	08006a71 	.word	0x08006a71
 8006a08:	08006c47 	.word	0x08006c47
 8006a0c:	08006c47 	.word	0x08006c47
 8006a10:	08006be7 	.word	0x08006be7
 8006a14:	08006c13 	.word	0x08006c13
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	7c12      	ldrb	r2, [r2, #16]
 8006a24:	f107 0108 	add.w	r1, r7, #8
 8006a28:	4610      	mov	r0, r2
 8006a2a:	4798      	blx	r3
 8006a2c:	60f8      	str	r0, [r7, #12]
      break;
 8006a2e:	e112      	b.n	8006c56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	7c1b      	ldrb	r3, [r3, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10d      	bne.n	8006a54 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a40:	f107 0208 	add.w	r2, r7, #8
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
 8006a48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	2202      	movs	r2, #2
 8006a50:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a52:	e100      	b.n	8006c56 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	f107 0208 	add.w	r2, r7, #8
 8006a60:	4610      	mov	r0, r2
 8006a62:	4798      	blx	r3
 8006a64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	701a      	strb	r2, [r3, #0]
      break;
 8006a6e:	e0f2      	b.n	8006c56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	885b      	ldrh	r3, [r3, #2]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b05      	cmp	r3, #5
 8006a78:	f200 80ac 	bhi.w	8006bd4 <USBD_GetDescriptor+0x204>
 8006a7c:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <USBD_GetDescriptor+0xb4>)
 8006a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a82:	bf00      	nop
 8006a84:	08006a9d 	.word	0x08006a9d
 8006a88:	08006ad1 	.word	0x08006ad1
 8006a8c:	08006b05 	.word	0x08006b05
 8006a90:	08006b39 	.word	0x08006b39
 8006a94:	08006b6d 	.word	0x08006b6d
 8006a98:	08006ba1 	.word	0x08006ba1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	7c12      	ldrb	r2, [r2, #16]
 8006ab4:	f107 0108 	add.w	r1, r7, #8
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4798      	blx	r3
 8006abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006abe:	e091      	b.n	8006be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fab2 	bl	800702c <USBD_CtlError>
            err++;
 8006ac8:	7afb      	ldrb	r3, [r7, #11]
 8006aca:	3301      	adds	r3, #1
 8006acc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ace:	e089      	b.n	8006be4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00b      	beq.n	8006af4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	7c12      	ldrb	r2, [r2, #16]
 8006ae8:	f107 0108 	add.w	r1, r7, #8
 8006aec:	4610      	mov	r0, r2
 8006aee:	4798      	blx	r3
 8006af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006af2:	e077      	b.n	8006be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa98 	bl	800702c <USBD_CtlError>
            err++;
 8006afc:	7afb      	ldrb	r3, [r7, #11]
 8006afe:	3301      	adds	r3, #1
 8006b00:	72fb      	strb	r3, [r7, #11]
          break;
 8006b02:	e06f      	b.n	8006be4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	7c12      	ldrb	r2, [r2, #16]
 8006b1c:	f107 0108 	add.w	r1, r7, #8
 8006b20:	4610      	mov	r0, r2
 8006b22:	4798      	blx	r3
 8006b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b26:	e05d      	b.n	8006be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa7e 	bl	800702c <USBD_CtlError>
            err++;
 8006b30:	7afb      	ldrb	r3, [r7, #11]
 8006b32:	3301      	adds	r3, #1
 8006b34:	72fb      	strb	r3, [r7, #11]
          break;
 8006b36:	e055      	b.n	8006be4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	7c12      	ldrb	r2, [r2, #16]
 8006b50:	f107 0108 	add.w	r1, r7, #8
 8006b54:	4610      	mov	r0, r2
 8006b56:	4798      	blx	r3
 8006b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b5a:	e043      	b.n	8006be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa64 	bl	800702c <USBD_CtlError>
            err++;
 8006b64:	7afb      	ldrb	r3, [r7, #11]
 8006b66:	3301      	adds	r3, #1
 8006b68:	72fb      	strb	r3, [r7, #11]
          break;
 8006b6a:	e03b      	b.n	8006be4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00b      	beq.n	8006b90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	7c12      	ldrb	r2, [r2, #16]
 8006b84:	f107 0108 	add.w	r1, r7, #8
 8006b88:	4610      	mov	r0, r2
 8006b8a:	4798      	blx	r3
 8006b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b8e:	e029      	b.n	8006be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fa4a 	bl	800702c <USBD_CtlError>
            err++;
 8006b98:	7afb      	ldrb	r3, [r7, #11]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b9e:	e021      	b.n	8006be4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00b      	beq.n	8006bc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	7c12      	ldrb	r2, [r2, #16]
 8006bb8:	f107 0108 	add.w	r1, r7, #8
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4798      	blx	r3
 8006bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bc2:	e00f      	b.n	8006be4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fa30 	bl	800702c <USBD_CtlError>
            err++;
 8006bcc:	7afb      	ldrb	r3, [r7, #11]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006bd2:	e007      	b.n	8006be4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fa28 	bl	800702c <USBD_CtlError>
          err++;
 8006bdc:	7afb      	ldrb	r3, [r7, #11]
 8006bde:	3301      	adds	r3, #1
 8006be0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006be2:	bf00      	nop
      }
      break;
 8006be4:	e037      	b.n	8006c56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	7c1b      	ldrb	r3, [r3, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf6:	f107 0208 	add.w	r2, r7, #8
 8006bfa:	4610      	mov	r0, r2
 8006bfc:	4798      	blx	r3
 8006bfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c00:	e029      	b.n	8006c56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fa11 	bl	800702c <USBD_CtlError>
        err++;
 8006c0a:	7afb      	ldrb	r3, [r7, #11]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	72fb      	strb	r3, [r7, #11]
      break;
 8006c10:	e021      	b.n	8006c56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	7c1b      	ldrb	r3, [r3, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10d      	bne.n	8006c36 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	f107 0208 	add.w	r2, r7, #8
 8006c26:	4610      	mov	r0, r2
 8006c28:	4798      	blx	r3
 8006c2a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	2207      	movs	r2, #7
 8006c32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c34:	e00f      	b.n	8006c56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f9f7 	bl	800702c <USBD_CtlError>
        err++;
 8006c3e:	7afb      	ldrb	r3, [r7, #11]
 8006c40:	3301      	adds	r3, #1
 8006c42:	72fb      	strb	r3, [r7, #11]
      break;
 8006c44:	e007      	b.n	8006c56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f9ef 	bl	800702c <USBD_CtlError>
      err++;
 8006c4e:	7afb      	ldrb	r3, [r7, #11]
 8006c50:	3301      	adds	r3, #1
 8006c52:	72fb      	strb	r3, [r7, #11]
      break;
 8006c54:	bf00      	nop
  }

  if (err != 0U)
 8006c56:	7afb      	ldrb	r3, [r7, #11]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d11e      	bne.n	8006c9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	88db      	ldrh	r3, [r3, #6]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d016      	beq.n	8006c92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006c64:	893b      	ldrh	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00e      	beq.n	8006c88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	88da      	ldrh	r2, [r3, #6]
 8006c6e:	893b      	ldrh	r3, [r7, #8]
 8006c70:	4293      	cmp	r3, r2
 8006c72:	bf28      	it	cs
 8006c74:	4613      	movcs	r3, r2
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c7a:	893b      	ldrh	r3, [r7, #8]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	68f9      	ldr	r1, [r7, #12]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fa44 	bl	800710e <USBD_CtlSendData>
 8006c86:	e009      	b.n	8006c9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f9ce 	bl	800702c <USBD_CtlError>
 8006c90:	e004      	b.n	8006c9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fa95 	bl	80071c2 <USBD_CtlSendStatus>
 8006c98:	e000      	b.n	8006c9c <USBD_GetDescriptor+0x2cc>
    return;
 8006c9a:	bf00      	nop
  }
}
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop

08006ca4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	889b      	ldrh	r3, [r3, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d131      	bne.n	8006d1a <USBD_SetAddress+0x76>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	88db      	ldrh	r3, [r3, #6]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d12d      	bne.n	8006d1a <USBD_SetAddress+0x76>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	885b      	ldrh	r3, [r3, #2]
 8006cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc4:	d829      	bhi.n	8006d1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	885b      	ldrh	r3, [r3, #2]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d104      	bne.n	8006ce8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f9a3 	bl	800702c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ce6:	e01d      	b.n	8006d24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	7bfa      	ldrb	r2, [r7, #15]
 8006cec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 feed 	bl	8007ad4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fa61 	bl	80071c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d004      	beq.n	8006d10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0e:	e009      	b.n	8006d24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d18:	e004      	b.n	8006d24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f985 	bl	800702c <USBD_CtlError>
  }
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	885b      	ldrh	r3, [r3, #2]
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	4b4c      	ldr	r3, [pc, #304]	; (8006e74 <USBD_SetConfig+0x148>)
 8006d42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d44:	4b4b      	ldr	r3, [pc, #300]	; (8006e74 <USBD_SetConfig+0x148>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d905      	bls.n	8006d58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f96c 	bl	800702c <USBD_CtlError>
    return USBD_FAIL;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e088      	b.n	8006e6a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d002      	beq.n	8006d6a <USBD_SetConfig+0x3e>
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d025      	beq.n	8006db4 <USBD_SetConfig+0x88>
 8006d68:	e071      	b.n	8006e4e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d6a:	4b42      	ldr	r3, [pc, #264]	; (8006e74 <USBD_SetConfig+0x148>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d01c      	beq.n	8006dac <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006d72:	4b40      	ldr	r3, [pc, #256]	; (8006e74 <USBD_SetConfig+0x148>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d7c:	4b3d      	ldr	r3, [pc, #244]	; (8006e74 <USBD_SetConfig+0x148>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff f948 	bl	8006018 <USBD_SetClassConfig>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d004      	beq.n	8006d9c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f949 	bl	800702c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d9a:	e065      	b.n	8006e68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fa10 	bl	80071c2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2203      	movs	r2, #3
 8006da6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006daa:	e05d      	b.n	8006e68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fa08 	bl	80071c2 <USBD_CtlSendStatus>
      break;
 8006db2:	e059      	b.n	8006e68 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006db4:	4b2f      	ldr	r3, [pc, #188]	; (8006e74 <USBD_SetConfig+0x148>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d112      	bne.n	8006de2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006dc4:	4b2b      	ldr	r3, [pc, #172]	; (8006e74 <USBD_SetConfig+0x148>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006dce:	4b29      	ldr	r3, [pc, #164]	; (8006e74 <USBD_SetConfig+0x148>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff f93b 	bl	8006050 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f9f1 	bl	80071c2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006de0:	e042      	b.n	8006e68 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006de2:	4b24      	ldr	r3, [pc, #144]	; (8006e74 <USBD_SetConfig+0x148>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d02a      	beq.n	8006e46 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff f929 	bl	8006050 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006dfe:	4b1d      	ldr	r3, [pc, #116]	; (8006e74 <USBD_SetConfig+0x148>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e08:	4b1a      	ldr	r3, [pc, #104]	; (8006e74 <USBD_SetConfig+0x148>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff f902 	bl	8006018 <USBD_SetClassConfig>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00f      	beq.n	8006e3e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f903 	bl	800702c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff f90e 	bl	8006050 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e3c:	e014      	b.n	8006e68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f9bf 	bl	80071c2 <USBD_CtlSendStatus>
      break;
 8006e44:	e010      	b.n	8006e68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f9bb 	bl	80071c2 <USBD_CtlSendStatus>
      break;
 8006e4c:	e00c      	b.n	8006e68 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f8eb 	bl	800702c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e56:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <USBD_SetConfig+0x148>)
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff f8f7 	bl	8006050 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e62:	2303      	movs	r3, #3
 8006e64:	73fb      	strb	r3, [r7, #15]
      break;
 8006e66:	bf00      	nop
  }

  return ret;
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20000348 	.word	0x20000348

08006e78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	88db      	ldrh	r3, [r3, #6]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d004      	beq.n	8006e94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f8cd 	bl	800702c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e92:	e023      	b.n	8006edc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	dc02      	bgt.n	8006ea6 <USBD_GetConfig+0x2e>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	dc03      	bgt.n	8006eac <USBD_GetConfig+0x34>
 8006ea4:	e015      	b.n	8006ed2 <USBD_GetConfig+0x5a>
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	d00b      	beq.n	8006ec2 <USBD_GetConfig+0x4a>
 8006eaa:	e012      	b.n	8006ed2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f927 	bl	800710e <USBD_CtlSendData>
        break;
 8006ec0:	e00c      	b.n	8006edc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f91f 	bl	800710e <USBD_CtlSendData>
        break;
 8006ed0:	e004      	b.n	8006edc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f8a9 	bl	800702c <USBD_CtlError>
        break;
 8006eda:	bf00      	nop
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d81e      	bhi.n	8006f3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	88db      	ldrh	r3, [r3, #6]
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d004      	beq.n	8006f0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f890 	bl	800702c <USBD_CtlError>
        break;
 8006f0c:	e01a      	b.n	8006f44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f043 0202 	orr.w	r2, r3, #2
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	2202      	movs	r2, #2
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f8eb 	bl	800710e <USBD_CtlSendData>
      break;
 8006f38:	e004      	b.n	8006f44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f875 	bl	800702c <USBD_CtlError>
      break;
 8006f42:	bf00      	nop
  }
}
 8006f44:	bf00      	nop
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d106      	bne.n	8006f6c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f92b 	bl	80071c2 <USBD_CtlSendStatus>
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	3b01      	subs	r3, #1
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d80b      	bhi.n	8006fa4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	885b      	ldrh	r3, [r3, #2]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d10c      	bne.n	8006fae <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f910 	bl	80071c2 <USBD_CtlSendStatus>
      }
      break;
 8006fa2:	e004      	b.n	8006fae <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f840 	bl	800702c <USBD_CtlError>
      break;
 8006fac:	e000      	b.n	8006fb0 <USBD_ClrFeature+0x3c>
      break;
 8006fae:	bf00      	nop
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	781a      	ldrb	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	781a      	ldrb	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7ff fabb 	bl	800655e <SWAPBYTE>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	461a      	mov	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff faae 	bl	800655e <SWAPBYTE>
 8007002:	4603      	mov	r3, r0
 8007004:	461a      	mov	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3301      	adds	r3, #1
 8007014:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f7ff faa1 	bl	800655e <SWAPBYTE>
 800701c:	4603      	mov	r3, r0
 800701e:	461a      	mov	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	80da      	strh	r2, [r3, #6]
}
 8007024:	bf00      	nop
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007036:	2180      	movs	r1, #128	; 0x80
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fce1 	bl	8007a00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800703e:	2100      	movs	r1, #0
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fcdd 	bl	8007a00 <USBD_LL_StallEP>
}
 8007046:	bf00      	nop
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b086      	sub	sp, #24
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d036      	beq.n	80070d2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007068:	6938      	ldr	r0, [r7, #16]
 800706a:	f000 f836 	bl	80070da <USBD_GetLen>
 800706e:	4603      	mov	r3, r0
 8007070:	3301      	adds	r3, #1
 8007072:	b29b      	uxth	r3, r3
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	4413      	add	r3, r2
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	7812      	ldrb	r2, [r2, #0]
 8007086:	701a      	strb	r2, [r3, #0]
  idx++;
 8007088:	7dfb      	ldrb	r3, [r7, #23]
 800708a:	3301      	adds	r3, #1
 800708c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	4413      	add	r3, r2
 8007094:	2203      	movs	r2, #3
 8007096:	701a      	strb	r2, [r3, #0]
  idx++;
 8007098:	7dfb      	ldrb	r3, [r7, #23]
 800709a:	3301      	adds	r3, #1
 800709c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800709e:	e013      	b.n	80070c8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	4413      	add	r3, r2
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	7812      	ldrb	r2, [r2, #0]
 80070aa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	3301      	adds	r3, #1
 80070b0:	613b      	str	r3, [r7, #16]
    idx++;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
 80070b4:	3301      	adds	r3, #1
 80070b6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	4413      	add	r3, r2
 80070be:	2200      	movs	r2, #0
 80070c0:	701a      	strb	r2, [r3, #0]
    idx++;
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	3301      	adds	r3, #1
 80070c6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e7      	bne.n	80070a0 <USBD_GetString+0x52>
 80070d0:	e000      	b.n	80070d4 <USBD_GetString+0x86>
    return;
 80070d2:	bf00      	nop
  }
}
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070da:	b480      	push	{r7}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80070ea:	e005      	b.n	80070f8 <USBD_GetLen+0x1e>
  {
    len++;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
 80070ee:	3301      	adds	r3, #1
 80070f0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	3301      	adds	r3, #1
 80070f6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1f5      	bne.n	80070ec <USBD_GetLen+0x12>
  }

  return len;
 8007100:	7bfb      	ldrb	r3, [r7, #15]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2202      	movs	r2, #2
 800711e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	2100      	movs	r1, #0
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fcec 	bl	8007b12 <USBD_LL_Transmit>

  return USBD_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	2100      	movs	r1, #0
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 fcdb 	bl	8007b12 <USBD_LL_Transmit>

  return USBD_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2203      	movs	r2, #3
 8007176:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	2100      	movs	r1, #0
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fcdf 	bl	8007b54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	2100      	movs	r1, #0
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 fcce 	bl	8007b54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2204      	movs	r2, #4
 80071ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071d2:	2300      	movs	r3, #0
 80071d4:	2200      	movs	r2, #0
 80071d6:	2100      	movs	r1, #0
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fc9a 	bl	8007b12 <USBD_LL_Transmit>

  return USBD_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2205      	movs	r2, #5
 80071f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071f8:	2300      	movs	r3, #0
 80071fa:	2200      	movs	r2, #0
 80071fc:	2100      	movs	r1, #0
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fca8 	bl	8007b54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007214:	2200      	movs	r2, #0
 8007216:	4912      	ldr	r1, [pc, #72]	; (8007260 <MX_USB_DEVICE_Init+0x50>)
 8007218:	4812      	ldr	r0, [pc, #72]	; (8007264 <MX_USB_DEVICE_Init+0x54>)
 800721a:	f7fe fe8f 	bl	8005f3c <USBD_Init>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007224:	f7f9 fc80 	bl	8000b28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007228:	490f      	ldr	r1, [pc, #60]	; (8007268 <MX_USB_DEVICE_Init+0x58>)
 800722a:	480e      	ldr	r0, [pc, #56]	; (8007264 <MX_USB_DEVICE_Init+0x54>)
 800722c:	f7fe feb6 	bl	8005f9c <USBD_RegisterClass>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007236:	f7f9 fc77 	bl	8000b28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800723a:	490c      	ldr	r1, [pc, #48]	; (800726c <MX_USB_DEVICE_Init+0x5c>)
 800723c:	4809      	ldr	r0, [pc, #36]	; (8007264 <MX_USB_DEVICE_Init+0x54>)
 800723e:	f7fe fdd7 	bl	8005df0 <USBD_CDC_RegisterInterface>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007248:	f7f9 fc6e 	bl	8000b28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800724c:	4805      	ldr	r0, [pc, #20]	; (8007264 <MX_USB_DEVICE_Init+0x54>)
 800724e:	f7fe fecc 	bl	8005fea <USBD_Start>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007258:	f7f9 fc66 	bl	8000b28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800725c:	bf00      	nop
 800725e:	bd80      	pop	{r7, pc}
 8007260:	20000130 	.word	0x20000130
 8007264:	20000578 	.word	0x20000578
 8007268:	20000018 	.word	0x20000018
 800726c:	2000011c 	.word	0x2000011c

08007270 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007274:	2200      	movs	r2, #0
 8007276:	4905      	ldr	r1, [pc, #20]	; (800728c <CDC_Init_FS+0x1c>)
 8007278:	4805      	ldr	r0, [pc, #20]	; (8007290 <CDC_Init_FS+0x20>)
 800727a:	f7fe fdce 	bl	8005e1a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800727e:	4905      	ldr	r1, [pc, #20]	; (8007294 <CDC_Init_FS+0x24>)
 8007280:	4803      	ldr	r0, [pc, #12]	; (8007290 <CDC_Init_FS+0x20>)
 8007282:	f7fe fde8 	bl	8005e56 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007286:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007288:	4618      	mov	r0, r3
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20001048 	.word	0x20001048
 8007290:	20000578 	.word	0x20000578
 8007294:	20000848 	.word	0x20000848

08007298 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800729c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800729e:	4618      	mov	r0, r3
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	6039      	str	r1, [r7, #0]
 80072b2:	71fb      	strb	r3, [r7, #7]
 80072b4:	4613      	mov	r3, r2
 80072b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80072b8:	79fb      	ldrb	r3, [r7, #7]
 80072ba:	2b23      	cmp	r3, #35	; 0x23
 80072bc:	d84a      	bhi.n	8007354 <CDC_Control_FS+0xac>
 80072be:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <CDC_Control_FS+0x1c>)
 80072c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c4:	08007355 	.word	0x08007355
 80072c8:	08007355 	.word	0x08007355
 80072cc:	08007355 	.word	0x08007355
 80072d0:	08007355 	.word	0x08007355
 80072d4:	08007355 	.word	0x08007355
 80072d8:	08007355 	.word	0x08007355
 80072dc:	08007355 	.word	0x08007355
 80072e0:	08007355 	.word	0x08007355
 80072e4:	08007355 	.word	0x08007355
 80072e8:	08007355 	.word	0x08007355
 80072ec:	08007355 	.word	0x08007355
 80072f0:	08007355 	.word	0x08007355
 80072f4:	08007355 	.word	0x08007355
 80072f8:	08007355 	.word	0x08007355
 80072fc:	08007355 	.word	0x08007355
 8007300:	08007355 	.word	0x08007355
 8007304:	08007355 	.word	0x08007355
 8007308:	08007355 	.word	0x08007355
 800730c:	08007355 	.word	0x08007355
 8007310:	08007355 	.word	0x08007355
 8007314:	08007355 	.word	0x08007355
 8007318:	08007355 	.word	0x08007355
 800731c:	08007355 	.word	0x08007355
 8007320:	08007355 	.word	0x08007355
 8007324:	08007355 	.word	0x08007355
 8007328:	08007355 	.word	0x08007355
 800732c:	08007355 	.word	0x08007355
 8007330:	08007355 	.word	0x08007355
 8007334:	08007355 	.word	0x08007355
 8007338:	08007355 	.word	0x08007355
 800733c:	08007355 	.word	0x08007355
 8007340:	08007355 	.word	0x08007355
 8007344:	08007355 	.word	0x08007355
 8007348:	08007355 	.word	0x08007355
 800734c:	08007355 	.word	0x08007355
 8007350:	08007355 	.word	0x08007355
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007354:	bf00      	nop
  }

  return (USBD_OK);
 8007356:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007358:	4618      	mov	r0, r3
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	4805      	ldr	r0, [pc, #20]	; (8007388 <CDC_Receive_FS+0x24>)
 8007372:	f7fe fd70 	bl	8005e56 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007376:	4804      	ldr	r0, [pc, #16]	; (8007388 <CDC_Receive_FS+0x24>)
 8007378:	f7fe fdb6 	bl	8005ee8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800737c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800737e:	4618      	mov	r0, r3
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000578 	.word	0x20000578

0800738c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	460b      	mov	r3, r1
 8007396:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800739c:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <CDC_Transmit_FS+0x48>)
 800739e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e00b      	b.n	80073ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80073b2:	887b      	ldrh	r3, [r7, #2]
 80073b4:	461a      	mov	r2, r3
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	4806      	ldr	r0, [pc, #24]	; (80073d4 <CDC_Transmit_FS+0x48>)
 80073ba:	f7fe fd2e 	bl	8005e1a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80073be:	4805      	ldr	r0, [pc, #20]	; (80073d4 <CDC_Transmit_FS+0x48>)
 80073c0:	f7fe fd62 	bl	8005e88 <USBD_CDC_TransmitPacket>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20000578 	.word	0x20000578

080073d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80073ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
	...

080073fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	6039      	str	r1, [r7, #0]
 8007406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2212      	movs	r2, #18
 800740c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800740e:	4b03      	ldr	r3, [pc, #12]	; (800741c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	2000014c 	.word	0x2000014c

08007420 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	6039      	str	r1, [r7, #0]
 800742a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2204      	movs	r2, #4
 8007430:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007432:	4b03      	ldr	r3, [pc, #12]	; (8007440 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	20000160 	.word	0x20000160

08007444 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d105      	bne.n	8007462 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	4907      	ldr	r1, [pc, #28]	; (8007478 <USBD_FS_ProductStrDescriptor+0x34>)
 800745a:	4808      	ldr	r0, [pc, #32]	; (800747c <USBD_FS_ProductStrDescriptor+0x38>)
 800745c:	f7ff fdf7 	bl	800704e <USBD_GetString>
 8007460:	e004      	b.n	800746c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	4904      	ldr	r1, [pc, #16]	; (8007478 <USBD_FS_ProductStrDescriptor+0x34>)
 8007466:	4805      	ldr	r0, [pc, #20]	; (800747c <USBD_FS_ProductStrDescriptor+0x38>)
 8007468:	f7ff fdf1 	bl	800704e <USBD_GetString>
  }
  return USBD_StrDesc;
 800746c:	4b02      	ldr	r3, [pc, #8]	; (8007478 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20001848 	.word	0x20001848
 800747c:	08008528 	.word	0x08008528

08007480 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	6039      	str	r1, [r7, #0]
 800748a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	4904      	ldr	r1, [pc, #16]	; (80074a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007490:	4804      	ldr	r0, [pc, #16]	; (80074a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007492:	f7ff fddc 	bl	800704e <USBD_GetString>
  return USBD_StrDesc;
 8007496:	4b02      	ldr	r3, [pc, #8]	; (80074a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20001848 	.word	0x20001848
 80074a4:	08008540 	.word	0x08008540

080074a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	6039      	str	r1, [r7, #0]
 80074b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	221a      	movs	r2, #26
 80074b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80074ba:	f000 f843 	bl	8007544 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80074be:	4b02      	ldr	r3, [pc, #8]	; (80074c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	20000164 	.word	0x20000164

080074cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	6039      	str	r1, [r7, #0]
 80074d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d105      	bne.n	80074ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	4907      	ldr	r1, [pc, #28]	; (8007500 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074e2:	4808      	ldr	r0, [pc, #32]	; (8007504 <USBD_FS_ConfigStrDescriptor+0x38>)
 80074e4:	f7ff fdb3 	bl	800704e <USBD_GetString>
 80074e8:	e004      	b.n	80074f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	4904      	ldr	r1, [pc, #16]	; (8007500 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074ee:	4805      	ldr	r0, [pc, #20]	; (8007504 <USBD_FS_ConfigStrDescriptor+0x38>)
 80074f0:	f7ff fdad 	bl	800704e <USBD_GetString>
  }
  return USBD_StrDesc;
 80074f4:	4b02      	ldr	r3, [pc, #8]	; (8007500 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20001848 	.word	0x20001848
 8007504:	08008554 	.word	0x08008554

08007508 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	6039      	str	r1, [r7, #0]
 8007512:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d105      	bne.n	8007526 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	4907      	ldr	r1, [pc, #28]	; (800753c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800751e:	4808      	ldr	r0, [pc, #32]	; (8007540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007520:	f7ff fd95 	bl	800704e <USBD_GetString>
 8007524:	e004      	b.n	8007530 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	4904      	ldr	r1, [pc, #16]	; (800753c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800752a:	4805      	ldr	r0, [pc, #20]	; (8007540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800752c:	f7ff fd8f 	bl	800704e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007530:	4b02      	ldr	r3, [pc, #8]	; (800753c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20001848 	.word	0x20001848
 8007540:	08008560 	.word	0x08008560

08007544 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800754a:	4b0f      	ldr	r3, [pc, #60]	; (8007588 <Get_SerialNum+0x44>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007550:	4b0e      	ldr	r3, [pc, #56]	; (800758c <Get_SerialNum+0x48>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007556:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <Get_SerialNum+0x4c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4413      	add	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d009      	beq.n	800757e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800756a:	2208      	movs	r2, #8
 800756c:	4909      	ldr	r1, [pc, #36]	; (8007594 <Get_SerialNum+0x50>)
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 f814 	bl	800759c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007574:	2204      	movs	r2, #4
 8007576:	4908      	ldr	r1, [pc, #32]	; (8007598 <Get_SerialNum+0x54>)
 8007578:	68b8      	ldr	r0, [r7, #8]
 800757a:	f000 f80f 	bl	800759c <IntToUnicode>
  }
}
 800757e:	bf00      	nop
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	1fff7a10 	.word	0x1fff7a10
 800758c:	1fff7a14 	.word	0x1fff7a14
 8007590:	1fff7a18 	.word	0x1fff7a18
 8007594:	20000166 	.word	0x20000166
 8007598:	20000176 	.word	0x20000176

0800759c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	4613      	mov	r3, r2
 80075a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80075ae:	2300      	movs	r3, #0
 80075b0:	75fb      	strb	r3, [r7, #23]
 80075b2:	e027      	b.n	8007604 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	0f1b      	lsrs	r3, r3, #28
 80075b8:	2b09      	cmp	r3, #9
 80075ba:	d80b      	bhi.n	80075d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	0f1b      	lsrs	r3, r3, #28
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	4619      	mov	r1, r3
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	440b      	add	r3, r1
 80075cc:	3230      	adds	r2, #48	; 0x30
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	e00a      	b.n	80075ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	0f1b      	lsrs	r3, r3, #28
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	4619      	mov	r1, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	440b      	add	r3, r1
 80075e4:	3237      	adds	r2, #55	; 0x37
 80075e6:	b2d2      	uxtb	r2, r2
 80075e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	005b      	lsls	r3, r3, #1
 80075f4:	3301      	adds	r3, #1
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	4413      	add	r3, r2
 80075fa:	2200      	movs	r2, #0
 80075fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	3301      	adds	r3, #1
 8007602:	75fb      	strb	r3, [r7, #23]
 8007604:	7dfa      	ldrb	r2, [r7, #23]
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	429a      	cmp	r2, r3
 800760a:	d3d3      	bcc.n	80075b4 <IntToUnicode+0x18>
  }
}
 800760c:	bf00      	nop
 800760e:	bf00      	nop
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
	...

0800761c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b08a      	sub	sp, #40	; 0x28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007624:	f107 0314 	add.w	r3, r7, #20
 8007628:	2200      	movs	r2, #0
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	605a      	str	r2, [r3, #4]
 800762e:	609a      	str	r2, [r3, #8]
 8007630:	60da      	str	r2, [r3, #12]
 8007632:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800763c:	d13a      	bne.n	80076b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800763e:	2300      	movs	r3, #0
 8007640:	613b      	str	r3, [r7, #16]
 8007642:	4b1e      	ldr	r3, [pc, #120]	; (80076bc <HAL_PCD_MspInit+0xa0>)
 8007644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007646:	4a1d      	ldr	r2, [pc, #116]	; (80076bc <HAL_PCD_MspInit+0xa0>)
 8007648:	f043 0301 	orr.w	r3, r3, #1
 800764c:	6313      	str	r3, [r2, #48]	; 0x30
 800764e:	4b1b      	ldr	r3, [pc, #108]	; (80076bc <HAL_PCD_MspInit+0xa0>)
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	613b      	str	r3, [r7, #16]
 8007658:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800765a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800765e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007660:	2302      	movs	r3, #2
 8007662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007664:	2300      	movs	r3, #0
 8007666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007668:	2303      	movs	r3, #3
 800766a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800766c:	230a      	movs	r3, #10
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007670:	f107 0314 	add.w	r3, r7, #20
 8007674:	4619      	mov	r1, r3
 8007676:	4812      	ldr	r0, [pc, #72]	; (80076c0 <HAL_PCD_MspInit+0xa4>)
 8007678:	f7fa f92a 	bl	80018d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800767c:	4b0f      	ldr	r3, [pc, #60]	; (80076bc <HAL_PCD_MspInit+0xa0>)
 800767e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007680:	4a0e      	ldr	r2, [pc, #56]	; (80076bc <HAL_PCD_MspInit+0xa0>)
 8007682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007686:	6353      	str	r3, [r2, #52]	; 0x34
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	4b0b      	ldr	r3, [pc, #44]	; (80076bc <HAL_PCD_MspInit+0xa0>)
 800768e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007690:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <HAL_PCD_MspInit+0xa0>)
 8007692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007696:	6453      	str	r3, [r2, #68]	; 0x44
 8007698:	4b08      	ldr	r3, [pc, #32]	; (80076bc <HAL_PCD_MspInit+0xa0>)
 800769a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076a0:	60fb      	str	r3, [r7, #12]
 80076a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80076a4:	2200      	movs	r2, #0
 80076a6:	2100      	movs	r1, #0
 80076a8:	2043      	movs	r0, #67	; 0x43
 80076aa:	f7f9 fd6a 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80076ae:	2043      	movs	r0, #67	; 0x43
 80076b0:	f7f9 fd83 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80076b4:	bf00      	nop
 80076b6:	3728      	adds	r7, #40	; 0x28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	40023800 	.word	0x40023800
 80076c0:	40020000 	.word	0x40020000

080076c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80076d8:	4619      	mov	r1, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	f7fe fcd0 	bl	8006080 <USBD_LL_SetupStage>
}
 80076e0:	bf00      	nop
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80076fa:	78fa      	ldrb	r2, [r7, #3]
 80076fc:	6879      	ldr	r1, [r7, #4]
 80076fe:	4613      	mov	r3, r2
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	1a9b      	subs	r3, r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	440b      	add	r3, r1
 8007708:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	4619      	mov	r1, r3
 8007712:	f7fe fd0a 	bl	800612a <USBD_LL_DataOutStage>
}
 8007716:	bf00      	nop
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b082      	sub	sp, #8
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007730:	78fa      	ldrb	r2, [r7, #3]
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	4613      	mov	r3, r2
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	1a9b      	subs	r3, r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	440b      	add	r3, r1
 800773e:	3348      	adds	r3, #72	; 0x48
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	78fb      	ldrb	r3, [r7, #3]
 8007744:	4619      	mov	r1, r3
 8007746:	f7fe fd53 	bl	80061f0 <USBD_LL_DataInStage>
}
 800774a:	bf00      	nop
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007760:	4618      	mov	r0, r3
 8007762:	f7fe fe67 	bl	8006434 <USBD_LL_SOF>
}
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007776:	2301      	movs	r3, #1
 8007778:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d102      	bne.n	8007788 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007782:	2300      	movs	r3, #0
 8007784:	73fb      	strb	r3, [r7, #15]
 8007786:	e008      	b.n	800779a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	2b02      	cmp	r3, #2
 800778e:	d102      	bne.n	8007796 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007790:	2301      	movs	r3, #1
 8007792:	73fb      	strb	r3, [r7, #15]
 8007794:	e001      	b.n	800779a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007796:	f7f9 f9c7 	bl	8000b28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077a0:	7bfa      	ldrb	r2, [r7, #15]
 80077a2:	4611      	mov	r1, r2
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7fe fe07 	bl	80063b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fe fdb3 	bl	800631c <USBD_LL_Reset>
}
 80077b6:	bf00      	nop
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe fe02 	bl	80063d8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6812      	ldr	r2, [r2, #0]
 80077e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077e6:	f043 0301 	orr.w	r3, r3, #1
 80077ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d005      	beq.n	8007800 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077f4:	4b04      	ldr	r3, [pc, #16]	; (8007808 <HAL_PCD_SuspendCallback+0x48>)
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	4a03      	ldr	r2, [pc, #12]	; (8007808 <HAL_PCD_SuspendCallback+0x48>)
 80077fa:	f043 0306 	orr.w	r3, r3, #6
 80077fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	e000ed00 	.word	0xe000ed00

0800780c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800781a:	4618      	mov	r0, r3
 800781c:	f7fe fdf2 	bl	8006404 <USBD_LL_Resume>
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800783a:	78fa      	ldrb	r2, [r7, #3]
 800783c:	4611      	mov	r1, r2
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe fe40 	bl	80064c4 <USBD_LL_IsoOUTIncomplete>
}
 8007844:	bf00      	nop
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800785e:	78fa      	ldrb	r2, [r7, #3]
 8007860:	4611      	mov	r1, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f7fe fe08 	bl	8006478 <USBD_LL_IsoINIncomplete>
}
 8007868:	bf00      	nop
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe fe46 	bl	8006510 <USBD_LL_DevConnected>
}
 8007884:	bf00      	nop
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fe43 	bl	8006526 <USBD_LL_DevDisconnected>
}
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d13c      	bne.n	8007932 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80078b8:	4a20      	ldr	r2, [pc, #128]	; (800793c <USBD_LL_Init+0x94>)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a1e      	ldr	r2, [pc, #120]	; (800793c <USBD_LL_Init+0x94>)
 80078c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80078c8:	4b1c      	ldr	r3, [pc, #112]	; (800793c <USBD_LL_Init+0x94>)
 80078ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80078ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80078d0:	4b1a      	ldr	r3, [pc, #104]	; (800793c <USBD_LL_Init+0x94>)
 80078d2:	2204      	movs	r2, #4
 80078d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80078d6:	4b19      	ldr	r3, [pc, #100]	; (800793c <USBD_LL_Init+0x94>)
 80078d8:	2202      	movs	r2, #2
 80078da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078dc:	4b17      	ldr	r3, [pc, #92]	; (800793c <USBD_LL_Init+0x94>)
 80078de:	2200      	movs	r2, #0
 80078e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80078e2:	4b16      	ldr	r3, [pc, #88]	; (800793c <USBD_LL_Init+0x94>)
 80078e4:	2202      	movs	r2, #2
 80078e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80078e8:	4b14      	ldr	r3, [pc, #80]	; (800793c <USBD_LL_Init+0x94>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80078ee:	4b13      	ldr	r3, [pc, #76]	; (800793c <USBD_LL_Init+0x94>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80078f4:	4b11      	ldr	r3, [pc, #68]	; (800793c <USBD_LL_Init+0x94>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80078fa:	4b10      	ldr	r3, [pc, #64]	; (800793c <USBD_LL_Init+0x94>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007900:	4b0e      	ldr	r3, [pc, #56]	; (800793c <USBD_LL_Init+0x94>)
 8007902:	2200      	movs	r2, #0
 8007904:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007906:	480d      	ldr	r0, [pc, #52]	; (800793c <USBD_LL_Init+0x94>)
 8007908:	f7fa f9b0 	bl	8001c6c <HAL_PCD_Init>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007912:	f7f9 f909 	bl	8000b28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007916:	2180      	movs	r1, #128	; 0x80
 8007918:	4808      	ldr	r0, [pc, #32]	; (800793c <USBD_LL_Init+0x94>)
 800791a:	f7fb fb0e 	bl	8002f3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800791e:	2240      	movs	r2, #64	; 0x40
 8007920:	2100      	movs	r1, #0
 8007922:	4806      	ldr	r0, [pc, #24]	; (800793c <USBD_LL_Init+0x94>)
 8007924:	f7fb fac2 	bl	8002eac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007928:	2280      	movs	r2, #128	; 0x80
 800792a:	2101      	movs	r1, #1
 800792c:	4803      	ldr	r0, [pc, #12]	; (800793c <USBD_LL_Init+0x94>)
 800792e:	f7fb fabd 	bl	8002eac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	20001a48 	.word	0x20001a48

08007940 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007956:	4618      	mov	r0, r3
 8007958:	f7fa faa5 	bl	8001ea6 <HAL_PCD_Start>
 800795c:	4603      	mov	r3, r0
 800795e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007960:	7bfb      	ldrb	r3, [r7, #15]
 8007962:	4618      	mov	r0, r3
 8007964:	f000 f942 	bl	8007bec <USBD_Get_USB_Status>
 8007968:	4603      	mov	r3, r0
 800796a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800796c:	7bbb      	ldrb	r3, [r7, #14]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	4608      	mov	r0, r1
 8007980:	4611      	mov	r1, r2
 8007982:	461a      	mov	r2, r3
 8007984:	4603      	mov	r3, r0
 8007986:	70fb      	strb	r3, [r7, #3]
 8007988:	460b      	mov	r3, r1
 800798a:	70bb      	strb	r3, [r7, #2]
 800798c:	4613      	mov	r3, r2
 800798e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800799e:	78bb      	ldrb	r3, [r7, #2]
 80079a0:	883a      	ldrh	r2, [r7, #0]
 80079a2:	78f9      	ldrb	r1, [r7, #3]
 80079a4:	f7fa fe89 	bl	80026ba <HAL_PCD_EP_Open>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 f91c 	bl	8007bec <USBD_Get_USB_Status>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	460b      	mov	r3, r1
 80079cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079dc:	78fa      	ldrb	r2, [r7, #3]
 80079de:	4611      	mov	r1, r2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fa fed2 	bl	800278a <HAL_PCD_EP_Close>
 80079e6:	4603      	mov	r3, r0
 80079e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 f8fd 	bl	8007bec <USBD_Get_USB_Status>
 80079f2:	4603      	mov	r3, r0
 80079f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a1a:	78fa      	ldrb	r2, [r7, #3]
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fa ffaa 	bl	8002978 <HAL_PCD_EP_SetStall>
 8007a24:	4603      	mov	r3, r0
 8007a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 f8de 	bl	8007bec <USBD_Get_USB_Status>
 8007a30:	4603      	mov	r3, r0
 8007a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	460b      	mov	r3, r1
 8007a48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a58:	78fa      	ldrb	r2, [r7, #3]
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fa ffef 	bl	8002a40 <HAL_PCD_EP_ClrStall>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 f8bf 	bl	8007bec <USBD_Get_USB_Status>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	da0b      	bge.n	8007ab0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a9e:	68f9      	ldr	r1, [r7, #12]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	1a9b      	subs	r3, r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	440b      	add	r3, r1
 8007aaa:	333e      	adds	r3, #62	; 0x3e
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	e00b      	b.n	8007ac8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ab6:	68f9      	ldr	r1, [r7, #12]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	1a9b      	subs	r3, r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	440b      	add	r3, r1
 8007ac2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ac6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007aee:	78fa      	ldrb	r2, [r7, #3]
 8007af0:	4611      	mov	r1, r2
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fa fdbc 	bl	8002670 <HAL_PCD_SetAddress>
 8007af8:	4603      	mov	r3, r0
 8007afa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 f874 	bl	8007bec <USBD_Get_USB_Status>
 8007b04:	4603      	mov	r3, r0
 8007b06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b086      	sub	sp, #24
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	60f8      	str	r0, [r7, #12]
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	603b      	str	r3, [r7, #0]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b30:	7af9      	ldrb	r1, [r7, #11]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	f7fa fed5 	bl	80028e4 <HAL_PCD_EP_Transmit>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 f853 	bl	8007bec <USBD_Get_USB_Status>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b4a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b086      	sub	sp, #24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	607a      	str	r2, [r7, #4]
 8007b5e:	603b      	str	r3, [r7, #0]
 8007b60:	460b      	mov	r3, r1
 8007b62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b72:	7af9      	ldrb	r1, [r7, #11]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	f7fa fe51 	bl	800281e <HAL_PCD_EP_Receive>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 f832 	bl	8007bec <USBD_Get_USB_Status>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b8c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ba8:	78fa      	ldrb	r2, [r7, #3]
 8007baa:	4611      	mov	r1, r2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fa fe81 	bl	80028b4 <HAL_PCD_EP_GetRxCount>
 8007bb2:	4603      	mov	r3, r0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007bc4:	4b03      	ldr	r3, [pc, #12]	; (8007bd4 <USBD_static_malloc+0x18>)
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	2000034c 	.word	0x2000034c

08007bd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]

}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	d817      	bhi.n	8007c30 <USBD_Get_USB_Status+0x44>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <USBD_Get_USB_Status+0x1c>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c19 	.word	0x08007c19
 8007c0c:	08007c1f 	.word	0x08007c1f
 8007c10:	08007c25 	.word	0x08007c25
 8007c14:	08007c2b 	.word	0x08007c2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c1c:	e00b      	b.n	8007c36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	73fb      	strb	r3, [r7, #15]
    break;
 8007c22:	e008      	b.n	8007c36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c24:	2301      	movs	r3, #1
 8007c26:	73fb      	strb	r3, [r7, #15]
    break;
 8007c28:	e005      	b.n	8007c36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c2e:	e002      	b.n	8007c36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c30:	2303      	movs	r3, #3
 8007c32:	73fb      	strb	r3, [r7, #15]
    break;
 8007c34:	bf00      	nop
  }
  return usb_status;
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <__errno>:
 8007c44:	4b01      	ldr	r3, [pc, #4]	; (8007c4c <__errno+0x8>)
 8007c46:	6818      	ldr	r0, [r3, #0]
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	20000180 	.word	0x20000180

08007c50 <__libc_init_array>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	4d0d      	ldr	r5, [pc, #52]	; (8007c88 <__libc_init_array+0x38>)
 8007c54:	4c0d      	ldr	r4, [pc, #52]	; (8007c8c <__libc_init_array+0x3c>)
 8007c56:	1b64      	subs	r4, r4, r5
 8007c58:	10a4      	asrs	r4, r4, #2
 8007c5a:	2600      	movs	r6, #0
 8007c5c:	42a6      	cmp	r6, r4
 8007c5e:	d109      	bne.n	8007c74 <__libc_init_array+0x24>
 8007c60:	4d0b      	ldr	r5, [pc, #44]	; (8007c90 <__libc_init_array+0x40>)
 8007c62:	4c0c      	ldr	r4, [pc, #48]	; (8007c94 <__libc_init_array+0x44>)
 8007c64:	f000 fc4e 	bl	8008504 <_init>
 8007c68:	1b64      	subs	r4, r4, r5
 8007c6a:	10a4      	asrs	r4, r4, #2
 8007c6c:	2600      	movs	r6, #0
 8007c6e:	42a6      	cmp	r6, r4
 8007c70:	d105      	bne.n	8007c7e <__libc_init_array+0x2e>
 8007c72:	bd70      	pop	{r4, r5, r6, pc}
 8007c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c78:	4798      	blx	r3
 8007c7a:	3601      	adds	r6, #1
 8007c7c:	e7ee      	b.n	8007c5c <__libc_init_array+0xc>
 8007c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c82:	4798      	blx	r3
 8007c84:	3601      	adds	r6, #1
 8007c86:	e7f2      	b.n	8007c6e <__libc_init_array+0x1e>
 8007c88:	080085c4 	.word	0x080085c4
 8007c8c:	080085c4 	.word	0x080085c4
 8007c90:	080085c4 	.word	0x080085c4
 8007c94:	080085cc 	.word	0x080085cc

08007c98 <memset>:
 8007c98:	4402      	add	r2, r0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d100      	bne.n	8007ca2 <memset+0xa>
 8007ca0:	4770      	bx	lr
 8007ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ca6:	e7f9      	b.n	8007c9c <memset+0x4>

08007ca8 <siprintf>:
 8007ca8:	b40e      	push	{r1, r2, r3}
 8007caa:	b500      	push	{lr}
 8007cac:	b09c      	sub	sp, #112	; 0x70
 8007cae:	ab1d      	add	r3, sp, #116	; 0x74
 8007cb0:	9002      	str	r0, [sp, #8]
 8007cb2:	9006      	str	r0, [sp, #24]
 8007cb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cb8:	4809      	ldr	r0, [pc, #36]	; (8007ce0 <siprintf+0x38>)
 8007cba:	9107      	str	r1, [sp, #28]
 8007cbc:	9104      	str	r1, [sp, #16]
 8007cbe:	4909      	ldr	r1, [pc, #36]	; (8007ce4 <siprintf+0x3c>)
 8007cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cc4:	9105      	str	r1, [sp, #20]
 8007cc6:	6800      	ldr	r0, [r0, #0]
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	a902      	add	r1, sp, #8
 8007ccc:	f000 f868 	bl	8007da0 <_svfiprintf_r>
 8007cd0:	9b02      	ldr	r3, [sp, #8]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	b01c      	add	sp, #112	; 0x70
 8007cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cdc:	b003      	add	sp, #12
 8007cde:	4770      	bx	lr
 8007ce0:	20000180 	.word	0x20000180
 8007ce4:	ffff0208 	.word	0xffff0208

08007ce8 <__ssputs_r>:
 8007ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cec:	688e      	ldr	r6, [r1, #8]
 8007cee:	429e      	cmp	r6, r3
 8007cf0:	4682      	mov	sl, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	4690      	mov	r8, r2
 8007cf6:	461f      	mov	r7, r3
 8007cf8:	d838      	bhi.n	8007d6c <__ssputs_r+0x84>
 8007cfa:	898a      	ldrh	r2, [r1, #12]
 8007cfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d00:	d032      	beq.n	8007d68 <__ssputs_r+0x80>
 8007d02:	6825      	ldr	r5, [r4, #0]
 8007d04:	6909      	ldr	r1, [r1, #16]
 8007d06:	eba5 0901 	sub.w	r9, r5, r1
 8007d0a:	6965      	ldr	r5, [r4, #20]
 8007d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d14:	3301      	adds	r3, #1
 8007d16:	444b      	add	r3, r9
 8007d18:	106d      	asrs	r5, r5, #1
 8007d1a:	429d      	cmp	r5, r3
 8007d1c:	bf38      	it	cc
 8007d1e:	461d      	movcc	r5, r3
 8007d20:	0553      	lsls	r3, r2, #21
 8007d22:	d531      	bpl.n	8007d88 <__ssputs_r+0xa0>
 8007d24:	4629      	mov	r1, r5
 8007d26:	f000 fb47 	bl	80083b8 <_malloc_r>
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	b950      	cbnz	r0, 8007d44 <__ssputs_r+0x5c>
 8007d2e:	230c      	movs	r3, #12
 8007d30:	f8ca 3000 	str.w	r3, [sl]
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d3a:	81a3      	strh	r3, [r4, #12]
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d44:	6921      	ldr	r1, [r4, #16]
 8007d46:	464a      	mov	r2, r9
 8007d48:	f000 fabe 	bl	80082c8 <memcpy>
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d56:	81a3      	strh	r3, [r4, #12]
 8007d58:	6126      	str	r6, [r4, #16]
 8007d5a:	6165      	str	r5, [r4, #20]
 8007d5c:	444e      	add	r6, r9
 8007d5e:	eba5 0509 	sub.w	r5, r5, r9
 8007d62:	6026      	str	r6, [r4, #0]
 8007d64:	60a5      	str	r5, [r4, #8]
 8007d66:	463e      	mov	r6, r7
 8007d68:	42be      	cmp	r6, r7
 8007d6a:	d900      	bls.n	8007d6e <__ssputs_r+0x86>
 8007d6c:	463e      	mov	r6, r7
 8007d6e:	4632      	mov	r2, r6
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	4641      	mov	r1, r8
 8007d74:	f000 fab6 	bl	80082e4 <memmove>
 8007d78:	68a3      	ldr	r3, [r4, #8]
 8007d7a:	6822      	ldr	r2, [r4, #0]
 8007d7c:	1b9b      	subs	r3, r3, r6
 8007d7e:	4432      	add	r2, r6
 8007d80:	60a3      	str	r3, [r4, #8]
 8007d82:	6022      	str	r2, [r4, #0]
 8007d84:	2000      	movs	r0, #0
 8007d86:	e7db      	b.n	8007d40 <__ssputs_r+0x58>
 8007d88:	462a      	mov	r2, r5
 8007d8a:	f000 fb6f 	bl	800846c <_realloc_r>
 8007d8e:	4606      	mov	r6, r0
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d1e1      	bne.n	8007d58 <__ssputs_r+0x70>
 8007d94:	6921      	ldr	r1, [r4, #16]
 8007d96:	4650      	mov	r0, sl
 8007d98:	f000 fabe 	bl	8008318 <_free_r>
 8007d9c:	e7c7      	b.n	8007d2e <__ssputs_r+0x46>
	...

08007da0 <_svfiprintf_r>:
 8007da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da4:	4698      	mov	r8, r3
 8007da6:	898b      	ldrh	r3, [r1, #12]
 8007da8:	061b      	lsls	r3, r3, #24
 8007daa:	b09d      	sub	sp, #116	; 0x74
 8007dac:	4607      	mov	r7, r0
 8007dae:	460d      	mov	r5, r1
 8007db0:	4614      	mov	r4, r2
 8007db2:	d50e      	bpl.n	8007dd2 <_svfiprintf_r+0x32>
 8007db4:	690b      	ldr	r3, [r1, #16]
 8007db6:	b963      	cbnz	r3, 8007dd2 <_svfiprintf_r+0x32>
 8007db8:	2140      	movs	r1, #64	; 0x40
 8007dba:	f000 fafd 	bl	80083b8 <_malloc_r>
 8007dbe:	6028      	str	r0, [r5, #0]
 8007dc0:	6128      	str	r0, [r5, #16]
 8007dc2:	b920      	cbnz	r0, 8007dce <_svfiprintf_r+0x2e>
 8007dc4:	230c      	movs	r3, #12
 8007dc6:	603b      	str	r3, [r7, #0]
 8007dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dcc:	e0d1      	b.n	8007f72 <_svfiprintf_r+0x1d2>
 8007dce:	2340      	movs	r3, #64	; 0x40
 8007dd0:	616b      	str	r3, [r5, #20]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd6:	2320      	movs	r3, #32
 8007dd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ddc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007de0:	2330      	movs	r3, #48	; 0x30
 8007de2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f8c <_svfiprintf_r+0x1ec>
 8007de6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dea:	f04f 0901 	mov.w	r9, #1
 8007dee:	4623      	mov	r3, r4
 8007df0:	469a      	mov	sl, r3
 8007df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007df6:	b10a      	cbz	r2, 8007dfc <_svfiprintf_r+0x5c>
 8007df8:	2a25      	cmp	r2, #37	; 0x25
 8007dfa:	d1f9      	bne.n	8007df0 <_svfiprintf_r+0x50>
 8007dfc:	ebba 0b04 	subs.w	fp, sl, r4
 8007e00:	d00b      	beq.n	8007e1a <_svfiprintf_r+0x7a>
 8007e02:	465b      	mov	r3, fp
 8007e04:	4622      	mov	r2, r4
 8007e06:	4629      	mov	r1, r5
 8007e08:	4638      	mov	r0, r7
 8007e0a:	f7ff ff6d 	bl	8007ce8 <__ssputs_r>
 8007e0e:	3001      	adds	r0, #1
 8007e10:	f000 80aa 	beq.w	8007f68 <_svfiprintf_r+0x1c8>
 8007e14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e16:	445a      	add	r2, fp
 8007e18:	9209      	str	r2, [sp, #36]	; 0x24
 8007e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 80a2 	beq.w	8007f68 <_svfiprintf_r+0x1c8>
 8007e24:	2300      	movs	r3, #0
 8007e26:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e2e:	f10a 0a01 	add.w	sl, sl, #1
 8007e32:	9304      	str	r3, [sp, #16]
 8007e34:	9307      	str	r3, [sp, #28]
 8007e36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e3a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e3c:	4654      	mov	r4, sl
 8007e3e:	2205      	movs	r2, #5
 8007e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e44:	4851      	ldr	r0, [pc, #324]	; (8007f8c <_svfiprintf_r+0x1ec>)
 8007e46:	f7f8 f9cb 	bl	80001e0 <memchr>
 8007e4a:	9a04      	ldr	r2, [sp, #16]
 8007e4c:	b9d8      	cbnz	r0, 8007e86 <_svfiprintf_r+0xe6>
 8007e4e:	06d0      	lsls	r0, r2, #27
 8007e50:	bf44      	itt	mi
 8007e52:	2320      	movmi	r3, #32
 8007e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e58:	0711      	lsls	r1, r2, #28
 8007e5a:	bf44      	itt	mi
 8007e5c:	232b      	movmi	r3, #43	; 0x2b
 8007e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e62:	f89a 3000 	ldrb.w	r3, [sl]
 8007e66:	2b2a      	cmp	r3, #42	; 0x2a
 8007e68:	d015      	beq.n	8007e96 <_svfiprintf_r+0xf6>
 8007e6a:	9a07      	ldr	r2, [sp, #28]
 8007e6c:	4654      	mov	r4, sl
 8007e6e:	2000      	movs	r0, #0
 8007e70:	f04f 0c0a 	mov.w	ip, #10
 8007e74:	4621      	mov	r1, r4
 8007e76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e7a:	3b30      	subs	r3, #48	; 0x30
 8007e7c:	2b09      	cmp	r3, #9
 8007e7e:	d94e      	bls.n	8007f1e <_svfiprintf_r+0x17e>
 8007e80:	b1b0      	cbz	r0, 8007eb0 <_svfiprintf_r+0x110>
 8007e82:	9207      	str	r2, [sp, #28]
 8007e84:	e014      	b.n	8007eb0 <_svfiprintf_r+0x110>
 8007e86:	eba0 0308 	sub.w	r3, r0, r8
 8007e8a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	9304      	str	r3, [sp, #16]
 8007e92:	46a2      	mov	sl, r4
 8007e94:	e7d2      	b.n	8007e3c <_svfiprintf_r+0x9c>
 8007e96:	9b03      	ldr	r3, [sp, #12]
 8007e98:	1d19      	adds	r1, r3, #4
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	9103      	str	r1, [sp, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	bfbb      	ittet	lt
 8007ea2:	425b      	neglt	r3, r3
 8007ea4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ea8:	9307      	strge	r3, [sp, #28]
 8007eaa:	9307      	strlt	r3, [sp, #28]
 8007eac:	bfb8      	it	lt
 8007eae:	9204      	strlt	r2, [sp, #16]
 8007eb0:	7823      	ldrb	r3, [r4, #0]
 8007eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8007eb4:	d10c      	bne.n	8007ed0 <_svfiprintf_r+0x130>
 8007eb6:	7863      	ldrb	r3, [r4, #1]
 8007eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eba:	d135      	bne.n	8007f28 <_svfiprintf_r+0x188>
 8007ebc:	9b03      	ldr	r3, [sp, #12]
 8007ebe:	1d1a      	adds	r2, r3, #4
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	9203      	str	r2, [sp, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	bfb8      	it	lt
 8007ec8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ecc:	3402      	adds	r4, #2
 8007ece:	9305      	str	r3, [sp, #20]
 8007ed0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f9c <_svfiprintf_r+0x1fc>
 8007ed4:	7821      	ldrb	r1, [r4, #0]
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	4650      	mov	r0, sl
 8007eda:	f7f8 f981 	bl	80001e0 <memchr>
 8007ede:	b140      	cbz	r0, 8007ef2 <_svfiprintf_r+0x152>
 8007ee0:	2340      	movs	r3, #64	; 0x40
 8007ee2:	eba0 000a 	sub.w	r0, r0, sl
 8007ee6:	fa03 f000 	lsl.w	r0, r3, r0
 8007eea:	9b04      	ldr	r3, [sp, #16]
 8007eec:	4303      	orrs	r3, r0
 8007eee:	3401      	adds	r4, #1
 8007ef0:	9304      	str	r3, [sp, #16]
 8007ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef6:	4826      	ldr	r0, [pc, #152]	; (8007f90 <_svfiprintf_r+0x1f0>)
 8007ef8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007efc:	2206      	movs	r2, #6
 8007efe:	f7f8 f96f 	bl	80001e0 <memchr>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d038      	beq.n	8007f78 <_svfiprintf_r+0x1d8>
 8007f06:	4b23      	ldr	r3, [pc, #140]	; (8007f94 <_svfiprintf_r+0x1f4>)
 8007f08:	bb1b      	cbnz	r3, 8007f52 <_svfiprintf_r+0x1b2>
 8007f0a:	9b03      	ldr	r3, [sp, #12]
 8007f0c:	3307      	adds	r3, #7
 8007f0e:	f023 0307 	bic.w	r3, r3, #7
 8007f12:	3308      	adds	r3, #8
 8007f14:	9303      	str	r3, [sp, #12]
 8007f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f18:	4433      	add	r3, r6
 8007f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f1c:	e767      	b.n	8007dee <_svfiprintf_r+0x4e>
 8007f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f22:	460c      	mov	r4, r1
 8007f24:	2001      	movs	r0, #1
 8007f26:	e7a5      	b.n	8007e74 <_svfiprintf_r+0xd4>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	3401      	adds	r4, #1
 8007f2c:	9305      	str	r3, [sp, #20]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	f04f 0c0a 	mov.w	ip, #10
 8007f34:	4620      	mov	r0, r4
 8007f36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f3a:	3a30      	subs	r2, #48	; 0x30
 8007f3c:	2a09      	cmp	r2, #9
 8007f3e:	d903      	bls.n	8007f48 <_svfiprintf_r+0x1a8>
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0c5      	beq.n	8007ed0 <_svfiprintf_r+0x130>
 8007f44:	9105      	str	r1, [sp, #20]
 8007f46:	e7c3      	b.n	8007ed0 <_svfiprintf_r+0x130>
 8007f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e7f0      	b.n	8007f34 <_svfiprintf_r+0x194>
 8007f52:	ab03      	add	r3, sp, #12
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	462a      	mov	r2, r5
 8007f58:	4b0f      	ldr	r3, [pc, #60]	; (8007f98 <_svfiprintf_r+0x1f8>)
 8007f5a:	a904      	add	r1, sp, #16
 8007f5c:	4638      	mov	r0, r7
 8007f5e:	f3af 8000 	nop.w
 8007f62:	1c42      	adds	r2, r0, #1
 8007f64:	4606      	mov	r6, r0
 8007f66:	d1d6      	bne.n	8007f16 <_svfiprintf_r+0x176>
 8007f68:	89ab      	ldrh	r3, [r5, #12]
 8007f6a:	065b      	lsls	r3, r3, #25
 8007f6c:	f53f af2c 	bmi.w	8007dc8 <_svfiprintf_r+0x28>
 8007f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f72:	b01d      	add	sp, #116	; 0x74
 8007f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f78:	ab03      	add	r3, sp, #12
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	462a      	mov	r2, r5
 8007f7e:	4b06      	ldr	r3, [pc, #24]	; (8007f98 <_svfiprintf_r+0x1f8>)
 8007f80:	a904      	add	r1, sp, #16
 8007f82:	4638      	mov	r0, r7
 8007f84:	f000 f87a 	bl	800807c <_printf_i>
 8007f88:	e7eb      	b.n	8007f62 <_svfiprintf_r+0x1c2>
 8007f8a:	bf00      	nop
 8007f8c:	08008588 	.word	0x08008588
 8007f90:	08008592 	.word	0x08008592
 8007f94:	00000000 	.word	0x00000000
 8007f98:	08007ce9 	.word	0x08007ce9
 8007f9c:	0800858e 	.word	0x0800858e

08007fa0 <_printf_common>:
 8007fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa4:	4616      	mov	r6, r2
 8007fa6:	4699      	mov	r9, r3
 8007fa8:	688a      	ldr	r2, [r1, #8]
 8007faa:	690b      	ldr	r3, [r1, #16]
 8007fac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	bfb8      	it	lt
 8007fb4:	4613      	movlt	r3, r2
 8007fb6:	6033      	str	r3, [r6, #0]
 8007fb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fbc:	4607      	mov	r7, r0
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	b10a      	cbz	r2, 8007fc6 <_printf_common+0x26>
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	6033      	str	r3, [r6, #0]
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	0699      	lsls	r1, r3, #26
 8007fca:	bf42      	ittt	mi
 8007fcc:	6833      	ldrmi	r3, [r6, #0]
 8007fce:	3302      	addmi	r3, #2
 8007fd0:	6033      	strmi	r3, [r6, #0]
 8007fd2:	6825      	ldr	r5, [r4, #0]
 8007fd4:	f015 0506 	ands.w	r5, r5, #6
 8007fd8:	d106      	bne.n	8007fe8 <_printf_common+0x48>
 8007fda:	f104 0a19 	add.w	sl, r4, #25
 8007fde:	68e3      	ldr	r3, [r4, #12]
 8007fe0:	6832      	ldr	r2, [r6, #0]
 8007fe2:	1a9b      	subs	r3, r3, r2
 8007fe4:	42ab      	cmp	r3, r5
 8007fe6:	dc26      	bgt.n	8008036 <_printf_common+0x96>
 8007fe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fec:	1e13      	subs	r3, r2, #0
 8007fee:	6822      	ldr	r2, [r4, #0]
 8007ff0:	bf18      	it	ne
 8007ff2:	2301      	movne	r3, #1
 8007ff4:	0692      	lsls	r2, r2, #26
 8007ff6:	d42b      	bmi.n	8008050 <_printf_common+0xb0>
 8007ff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	4638      	mov	r0, r7
 8008000:	47c0      	blx	r8
 8008002:	3001      	adds	r0, #1
 8008004:	d01e      	beq.n	8008044 <_printf_common+0xa4>
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	68e5      	ldr	r5, [r4, #12]
 800800a:	6832      	ldr	r2, [r6, #0]
 800800c:	f003 0306 	and.w	r3, r3, #6
 8008010:	2b04      	cmp	r3, #4
 8008012:	bf08      	it	eq
 8008014:	1aad      	subeq	r5, r5, r2
 8008016:	68a3      	ldr	r3, [r4, #8]
 8008018:	6922      	ldr	r2, [r4, #16]
 800801a:	bf0c      	ite	eq
 800801c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008020:	2500      	movne	r5, #0
 8008022:	4293      	cmp	r3, r2
 8008024:	bfc4      	itt	gt
 8008026:	1a9b      	subgt	r3, r3, r2
 8008028:	18ed      	addgt	r5, r5, r3
 800802a:	2600      	movs	r6, #0
 800802c:	341a      	adds	r4, #26
 800802e:	42b5      	cmp	r5, r6
 8008030:	d11a      	bne.n	8008068 <_printf_common+0xc8>
 8008032:	2000      	movs	r0, #0
 8008034:	e008      	b.n	8008048 <_printf_common+0xa8>
 8008036:	2301      	movs	r3, #1
 8008038:	4652      	mov	r2, sl
 800803a:	4649      	mov	r1, r9
 800803c:	4638      	mov	r0, r7
 800803e:	47c0      	blx	r8
 8008040:	3001      	adds	r0, #1
 8008042:	d103      	bne.n	800804c <_printf_common+0xac>
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804c:	3501      	adds	r5, #1
 800804e:	e7c6      	b.n	8007fde <_printf_common+0x3e>
 8008050:	18e1      	adds	r1, r4, r3
 8008052:	1c5a      	adds	r2, r3, #1
 8008054:	2030      	movs	r0, #48	; 0x30
 8008056:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800805a:	4422      	add	r2, r4
 800805c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008060:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008064:	3302      	adds	r3, #2
 8008066:	e7c7      	b.n	8007ff8 <_printf_common+0x58>
 8008068:	2301      	movs	r3, #1
 800806a:	4622      	mov	r2, r4
 800806c:	4649      	mov	r1, r9
 800806e:	4638      	mov	r0, r7
 8008070:	47c0      	blx	r8
 8008072:	3001      	adds	r0, #1
 8008074:	d0e6      	beq.n	8008044 <_printf_common+0xa4>
 8008076:	3601      	adds	r6, #1
 8008078:	e7d9      	b.n	800802e <_printf_common+0x8e>
	...

0800807c <_printf_i>:
 800807c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008080:	460c      	mov	r4, r1
 8008082:	4691      	mov	r9, r2
 8008084:	7e27      	ldrb	r7, [r4, #24]
 8008086:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008088:	2f78      	cmp	r7, #120	; 0x78
 800808a:	4680      	mov	r8, r0
 800808c:	469a      	mov	sl, r3
 800808e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008092:	d807      	bhi.n	80080a4 <_printf_i+0x28>
 8008094:	2f62      	cmp	r7, #98	; 0x62
 8008096:	d80a      	bhi.n	80080ae <_printf_i+0x32>
 8008098:	2f00      	cmp	r7, #0
 800809a:	f000 80d8 	beq.w	800824e <_printf_i+0x1d2>
 800809e:	2f58      	cmp	r7, #88	; 0x58
 80080a0:	f000 80a3 	beq.w	80081ea <_printf_i+0x16e>
 80080a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80080a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080ac:	e03a      	b.n	8008124 <_printf_i+0xa8>
 80080ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080b2:	2b15      	cmp	r3, #21
 80080b4:	d8f6      	bhi.n	80080a4 <_printf_i+0x28>
 80080b6:	a001      	add	r0, pc, #4	; (adr r0, 80080bc <_printf_i+0x40>)
 80080b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80080bc:	08008115 	.word	0x08008115
 80080c0:	08008129 	.word	0x08008129
 80080c4:	080080a5 	.word	0x080080a5
 80080c8:	080080a5 	.word	0x080080a5
 80080cc:	080080a5 	.word	0x080080a5
 80080d0:	080080a5 	.word	0x080080a5
 80080d4:	08008129 	.word	0x08008129
 80080d8:	080080a5 	.word	0x080080a5
 80080dc:	080080a5 	.word	0x080080a5
 80080e0:	080080a5 	.word	0x080080a5
 80080e4:	080080a5 	.word	0x080080a5
 80080e8:	08008235 	.word	0x08008235
 80080ec:	08008159 	.word	0x08008159
 80080f0:	08008217 	.word	0x08008217
 80080f4:	080080a5 	.word	0x080080a5
 80080f8:	080080a5 	.word	0x080080a5
 80080fc:	08008257 	.word	0x08008257
 8008100:	080080a5 	.word	0x080080a5
 8008104:	08008159 	.word	0x08008159
 8008108:	080080a5 	.word	0x080080a5
 800810c:	080080a5 	.word	0x080080a5
 8008110:	0800821f 	.word	0x0800821f
 8008114:	680b      	ldr	r3, [r1, #0]
 8008116:	1d1a      	adds	r2, r3, #4
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	600a      	str	r2, [r1, #0]
 800811c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008124:	2301      	movs	r3, #1
 8008126:	e0a3      	b.n	8008270 <_printf_i+0x1f4>
 8008128:	6825      	ldr	r5, [r4, #0]
 800812a:	6808      	ldr	r0, [r1, #0]
 800812c:	062e      	lsls	r6, r5, #24
 800812e:	f100 0304 	add.w	r3, r0, #4
 8008132:	d50a      	bpl.n	800814a <_printf_i+0xce>
 8008134:	6805      	ldr	r5, [r0, #0]
 8008136:	600b      	str	r3, [r1, #0]
 8008138:	2d00      	cmp	r5, #0
 800813a:	da03      	bge.n	8008144 <_printf_i+0xc8>
 800813c:	232d      	movs	r3, #45	; 0x2d
 800813e:	426d      	negs	r5, r5
 8008140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008144:	485e      	ldr	r0, [pc, #376]	; (80082c0 <_printf_i+0x244>)
 8008146:	230a      	movs	r3, #10
 8008148:	e019      	b.n	800817e <_printf_i+0x102>
 800814a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800814e:	6805      	ldr	r5, [r0, #0]
 8008150:	600b      	str	r3, [r1, #0]
 8008152:	bf18      	it	ne
 8008154:	b22d      	sxthne	r5, r5
 8008156:	e7ef      	b.n	8008138 <_printf_i+0xbc>
 8008158:	680b      	ldr	r3, [r1, #0]
 800815a:	6825      	ldr	r5, [r4, #0]
 800815c:	1d18      	adds	r0, r3, #4
 800815e:	6008      	str	r0, [r1, #0]
 8008160:	0628      	lsls	r0, r5, #24
 8008162:	d501      	bpl.n	8008168 <_printf_i+0xec>
 8008164:	681d      	ldr	r5, [r3, #0]
 8008166:	e002      	b.n	800816e <_printf_i+0xf2>
 8008168:	0669      	lsls	r1, r5, #25
 800816a:	d5fb      	bpl.n	8008164 <_printf_i+0xe8>
 800816c:	881d      	ldrh	r5, [r3, #0]
 800816e:	4854      	ldr	r0, [pc, #336]	; (80082c0 <_printf_i+0x244>)
 8008170:	2f6f      	cmp	r7, #111	; 0x6f
 8008172:	bf0c      	ite	eq
 8008174:	2308      	moveq	r3, #8
 8008176:	230a      	movne	r3, #10
 8008178:	2100      	movs	r1, #0
 800817a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800817e:	6866      	ldr	r6, [r4, #4]
 8008180:	60a6      	str	r6, [r4, #8]
 8008182:	2e00      	cmp	r6, #0
 8008184:	bfa2      	ittt	ge
 8008186:	6821      	ldrge	r1, [r4, #0]
 8008188:	f021 0104 	bicge.w	r1, r1, #4
 800818c:	6021      	strge	r1, [r4, #0]
 800818e:	b90d      	cbnz	r5, 8008194 <_printf_i+0x118>
 8008190:	2e00      	cmp	r6, #0
 8008192:	d04d      	beq.n	8008230 <_printf_i+0x1b4>
 8008194:	4616      	mov	r6, r2
 8008196:	fbb5 f1f3 	udiv	r1, r5, r3
 800819a:	fb03 5711 	mls	r7, r3, r1, r5
 800819e:	5dc7      	ldrb	r7, [r0, r7]
 80081a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081a4:	462f      	mov	r7, r5
 80081a6:	42bb      	cmp	r3, r7
 80081a8:	460d      	mov	r5, r1
 80081aa:	d9f4      	bls.n	8008196 <_printf_i+0x11a>
 80081ac:	2b08      	cmp	r3, #8
 80081ae:	d10b      	bne.n	80081c8 <_printf_i+0x14c>
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	07df      	lsls	r7, r3, #31
 80081b4:	d508      	bpl.n	80081c8 <_printf_i+0x14c>
 80081b6:	6923      	ldr	r3, [r4, #16]
 80081b8:	6861      	ldr	r1, [r4, #4]
 80081ba:	4299      	cmp	r1, r3
 80081bc:	bfde      	ittt	le
 80081be:	2330      	movle	r3, #48	; 0x30
 80081c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081c8:	1b92      	subs	r2, r2, r6
 80081ca:	6122      	str	r2, [r4, #16]
 80081cc:	f8cd a000 	str.w	sl, [sp]
 80081d0:	464b      	mov	r3, r9
 80081d2:	aa03      	add	r2, sp, #12
 80081d4:	4621      	mov	r1, r4
 80081d6:	4640      	mov	r0, r8
 80081d8:	f7ff fee2 	bl	8007fa0 <_printf_common>
 80081dc:	3001      	adds	r0, #1
 80081de:	d14c      	bne.n	800827a <_printf_i+0x1fe>
 80081e0:	f04f 30ff 	mov.w	r0, #4294967295
 80081e4:	b004      	add	sp, #16
 80081e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ea:	4835      	ldr	r0, [pc, #212]	; (80082c0 <_printf_i+0x244>)
 80081ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081f0:	6823      	ldr	r3, [r4, #0]
 80081f2:	680e      	ldr	r6, [r1, #0]
 80081f4:	061f      	lsls	r7, r3, #24
 80081f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80081fa:	600e      	str	r6, [r1, #0]
 80081fc:	d514      	bpl.n	8008228 <_printf_i+0x1ac>
 80081fe:	07d9      	lsls	r1, r3, #31
 8008200:	bf44      	itt	mi
 8008202:	f043 0320 	orrmi.w	r3, r3, #32
 8008206:	6023      	strmi	r3, [r4, #0]
 8008208:	b91d      	cbnz	r5, 8008212 <_printf_i+0x196>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	f023 0320 	bic.w	r3, r3, #32
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	2310      	movs	r3, #16
 8008214:	e7b0      	b.n	8008178 <_printf_i+0xfc>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	f043 0320 	orr.w	r3, r3, #32
 800821c:	6023      	str	r3, [r4, #0]
 800821e:	2378      	movs	r3, #120	; 0x78
 8008220:	4828      	ldr	r0, [pc, #160]	; (80082c4 <_printf_i+0x248>)
 8008222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008226:	e7e3      	b.n	80081f0 <_printf_i+0x174>
 8008228:	065e      	lsls	r6, r3, #25
 800822a:	bf48      	it	mi
 800822c:	b2ad      	uxthmi	r5, r5
 800822e:	e7e6      	b.n	80081fe <_printf_i+0x182>
 8008230:	4616      	mov	r6, r2
 8008232:	e7bb      	b.n	80081ac <_printf_i+0x130>
 8008234:	680b      	ldr	r3, [r1, #0]
 8008236:	6826      	ldr	r6, [r4, #0]
 8008238:	6960      	ldr	r0, [r4, #20]
 800823a:	1d1d      	adds	r5, r3, #4
 800823c:	600d      	str	r5, [r1, #0]
 800823e:	0635      	lsls	r5, r6, #24
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	d501      	bpl.n	8008248 <_printf_i+0x1cc>
 8008244:	6018      	str	r0, [r3, #0]
 8008246:	e002      	b.n	800824e <_printf_i+0x1d2>
 8008248:	0671      	lsls	r1, r6, #25
 800824a:	d5fb      	bpl.n	8008244 <_printf_i+0x1c8>
 800824c:	8018      	strh	r0, [r3, #0]
 800824e:	2300      	movs	r3, #0
 8008250:	6123      	str	r3, [r4, #16]
 8008252:	4616      	mov	r6, r2
 8008254:	e7ba      	b.n	80081cc <_printf_i+0x150>
 8008256:	680b      	ldr	r3, [r1, #0]
 8008258:	1d1a      	adds	r2, r3, #4
 800825a:	600a      	str	r2, [r1, #0]
 800825c:	681e      	ldr	r6, [r3, #0]
 800825e:	6862      	ldr	r2, [r4, #4]
 8008260:	2100      	movs	r1, #0
 8008262:	4630      	mov	r0, r6
 8008264:	f7f7 ffbc 	bl	80001e0 <memchr>
 8008268:	b108      	cbz	r0, 800826e <_printf_i+0x1f2>
 800826a:	1b80      	subs	r0, r0, r6
 800826c:	6060      	str	r0, [r4, #4]
 800826e:	6863      	ldr	r3, [r4, #4]
 8008270:	6123      	str	r3, [r4, #16]
 8008272:	2300      	movs	r3, #0
 8008274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008278:	e7a8      	b.n	80081cc <_printf_i+0x150>
 800827a:	6923      	ldr	r3, [r4, #16]
 800827c:	4632      	mov	r2, r6
 800827e:	4649      	mov	r1, r9
 8008280:	4640      	mov	r0, r8
 8008282:	47d0      	blx	sl
 8008284:	3001      	adds	r0, #1
 8008286:	d0ab      	beq.n	80081e0 <_printf_i+0x164>
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	079b      	lsls	r3, r3, #30
 800828c:	d413      	bmi.n	80082b6 <_printf_i+0x23a>
 800828e:	68e0      	ldr	r0, [r4, #12]
 8008290:	9b03      	ldr	r3, [sp, #12]
 8008292:	4298      	cmp	r0, r3
 8008294:	bfb8      	it	lt
 8008296:	4618      	movlt	r0, r3
 8008298:	e7a4      	b.n	80081e4 <_printf_i+0x168>
 800829a:	2301      	movs	r3, #1
 800829c:	4632      	mov	r2, r6
 800829e:	4649      	mov	r1, r9
 80082a0:	4640      	mov	r0, r8
 80082a2:	47d0      	blx	sl
 80082a4:	3001      	adds	r0, #1
 80082a6:	d09b      	beq.n	80081e0 <_printf_i+0x164>
 80082a8:	3501      	adds	r5, #1
 80082aa:	68e3      	ldr	r3, [r4, #12]
 80082ac:	9903      	ldr	r1, [sp, #12]
 80082ae:	1a5b      	subs	r3, r3, r1
 80082b0:	42ab      	cmp	r3, r5
 80082b2:	dcf2      	bgt.n	800829a <_printf_i+0x21e>
 80082b4:	e7eb      	b.n	800828e <_printf_i+0x212>
 80082b6:	2500      	movs	r5, #0
 80082b8:	f104 0619 	add.w	r6, r4, #25
 80082bc:	e7f5      	b.n	80082aa <_printf_i+0x22e>
 80082be:	bf00      	nop
 80082c0:	08008599 	.word	0x08008599
 80082c4:	080085aa 	.word	0x080085aa

080082c8 <memcpy>:
 80082c8:	440a      	add	r2, r1
 80082ca:	4291      	cmp	r1, r2
 80082cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80082d0:	d100      	bne.n	80082d4 <memcpy+0xc>
 80082d2:	4770      	bx	lr
 80082d4:	b510      	push	{r4, lr}
 80082d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082de:	4291      	cmp	r1, r2
 80082e0:	d1f9      	bne.n	80082d6 <memcpy+0xe>
 80082e2:	bd10      	pop	{r4, pc}

080082e4 <memmove>:
 80082e4:	4288      	cmp	r0, r1
 80082e6:	b510      	push	{r4, lr}
 80082e8:	eb01 0402 	add.w	r4, r1, r2
 80082ec:	d902      	bls.n	80082f4 <memmove+0x10>
 80082ee:	4284      	cmp	r4, r0
 80082f0:	4623      	mov	r3, r4
 80082f2:	d807      	bhi.n	8008304 <memmove+0x20>
 80082f4:	1e43      	subs	r3, r0, #1
 80082f6:	42a1      	cmp	r1, r4
 80082f8:	d008      	beq.n	800830c <memmove+0x28>
 80082fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008302:	e7f8      	b.n	80082f6 <memmove+0x12>
 8008304:	4402      	add	r2, r0
 8008306:	4601      	mov	r1, r0
 8008308:	428a      	cmp	r2, r1
 800830a:	d100      	bne.n	800830e <memmove+0x2a>
 800830c:	bd10      	pop	{r4, pc}
 800830e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008316:	e7f7      	b.n	8008308 <memmove+0x24>

08008318 <_free_r>:
 8008318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800831a:	2900      	cmp	r1, #0
 800831c:	d048      	beq.n	80083b0 <_free_r+0x98>
 800831e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008322:	9001      	str	r0, [sp, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f1a1 0404 	sub.w	r4, r1, #4
 800832a:	bfb8      	it	lt
 800832c:	18e4      	addlt	r4, r4, r3
 800832e:	f000 f8d3 	bl	80084d8 <__malloc_lock>
 8008332:	4a20      	ldr	r2, [pc, #128]	; (80083b4 <_free_r+0x9c>)
 8008334:	9801      	ldr	r0, [sp, #4]
 8008336:	6813      	ldr	r3, [r2, #0]
 8008338:	4615      	mov	r5, r2
 800833a:	b933      	cbnz	r3, 800834a <_free_r+0x32>
 800833c:	6063      	str	r3, [r4, #4]
 800833e:	6014      	str	r4, [r2, #0]
 8008340:	b003      	add	sp, #12
 8008342:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008346:	f000 b8cd 	b.w	80084e4 <__malloc_unlock>
 800834a:	42a3      	cmp	r3, r4
 800834c:	d90b      	bls.n	8008366 <_free_r+0x4e>
 800834e:	6821      	ldr	r1, [r4, #0]
 8008350:	1862      	adds	r2, r4, r1
 8008352:	4293      	cmp	r3, r2
 8008354:	bf04      	itt	eq
 8008356:	681a      	ldreq	r2, [r3, #0]
 8008358:	685b      	ldreq	r3, [r3, #4]
 800835a:	6063      	str	r3, [r4, #4]
 800835c:	bf04      	itt	eq
 800835e:	1852      	addeq	r2, r2, r1
 8008360:	6022      	streq	r2, [r4, #0]
 8008362:	602c      	str	r4, [r5, #0]
 8008364:	e7ec      	b.n	8008340 <_free_r+0x28>
 8008366:	461a      	mov	r2, r3
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	b10b      	cbz	r3, 8008370 <_free_r+0x58>
 800836c:	42a3      	cmp	r3, r4
 800836e:	d9fa      	bls.n	8008366 <_free_r+0x4e>
 8008370:	6811      	ldr	r1, [r2, #0]
 8008372:	1855      	adds	r5, r2, r1
 8008374:	42a5      	cmp	r5, r4
 8008376:	d10b      	bne.n	8008390 <_free_r+0x78>
 8008378:	6824      	ldr	r4, [r4, #0]
 800837a:	4421      	add	r1, r4
 800837c:	1854      	adds	r4, r2, r1
 800837e:	42a3      	cmp	r3, r4
 8008380:	6011      	str	r1, [r2, #0]
 8008382:	d1dd      	bne.n	8008340 <_free_r+0x28>
 8008384:	681c      	ldr	r4, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	6053      	str	r3, [r2, #4]
 800838a:	4421      	add	r1, r4
 800838c:	6011      	str	r1, [r2, #0]
 800838e:	e7d7      	b.n	8008340 <_free_r+0x28>
 8008390:	d902      	bls.n	8008398 <_free_r+0x80>
 8008392:	230c      	movs	r3, #12
 8008394:	6003      	str	r3, [r0, #0]
 8008396:	e7d3      	b.n	8008340 <_free_r+0x28>
 8008398:	6825      	ldr	r5, [r4, #0]
 800839a:	1961      	adds	r1, r4, r5
 800839c:	428b      	cmp	r3, r1
 800839e:	bf04      	itt	eq
 80083a0:	6819      	ldreq	r1, [r3, #0]
 80083a2:	685b      	ldreq	r3, [r3, #4]
 80083a4:	6063      	str	r3, [r4, #4]
 80083a6:	bf04      	itt	eq
 80083a8:	1949      	addeq	r1, r1, r5
 80083aa:	6021      	streq	r1, [r4, #0]
 80083ac:	6054      	str	r4, [r2, #4]
 80083ae:	e7c7      	b.n	8008340 <_free_r+0x28>
 80083b0:	b003      	add	sp, #12
 80083b2:	bd30      	pop	{r4, r5, pc}
 80083b4:	2000056c 	.word	0x2000056c

080083b8 <_malloc_r>:
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ba:	1ccd      	adds	r5, r1, #3
 80083bc:	f025 0503 	bic.w	r5, r5, #3
 80083c0:	3508      	adds	r5, #8
 80083c2:	2d0c      	cmp	r5, #12
 80083c4:	bf38      	it	cc
 80083c6:	250c      	movcc	r5, #12
 80083c8:	2d00      	cmp	r5, #0
 80083ca:	4606      	mov	r6, r0
 80083cc:	db01      	blt.n	80083d2 <_malloc_r+0x1a>
 80083ce:	42a9      	cmp	r1, r5
 80083d0:	d903      	bls.n	80083da <_malloc_r+0x22>
 80083d2:	230c      	movs	r3, #12
 80083d4:	6033      	str	r3, [r6, #0]
 80083d6:	2000      	movs	r0, #0
 80083d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083da:	f000 f87d 	bl	80084d8 <__malloc_lock>
 80083de:	4921      	ldr	r1, [pc, #132]	; (8008464 <_malloc_r+0xac>)
 80083e0:	680a      	ldr	r2, [r1, #0]
 80083e2:	4614      	mov	r4, r2
 80083e4:	b99c      	cbnz	r4, 800840e <_malloc_r+0x56>
 80083e6:	4f20      	ldr	r7, [pc, #128]	; (8008468 <_malloc_r+0xb0>)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	b923      	cbnz	r3, 80083f6 <_malloc_r+0x3e>
 80083ec:	4621      	mov	r1, r4
 80083ee:	4630      	mov	r0, r6
 80083f0:	f000 f862 	bl	80084b8 <_sbrk_r>
 80083f4:	6038      	str	r0, [r7, #0]
 80083f6:	4629      	mov	r1, r5
 80083f8:	4630      	mov	r0, r6
 80083fa:	f000 f85d 	bl	80084b8 <_sbrk_r>
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	d123      	bne.n	800844a <_malloc_r+0x92>
 8008402:	230c      	movs	r3, #12
 8008404:	6033      	str	r3, [r6, #0]
 8008406:	4630      	mov	r0, r6
 8008408:	f000 f86c 	bl	80084e4 <__malloc_unlock>
 800840c:	e7e3      	b.n	80083d6 <_malloc_r+0x1e>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	1b5b      	subs	r3, r3, r5
 8008412:	d417      	bmi.n	8008444 <_malloc_r+0x8c>
 8008414:	2b0b      	cmp	r3, #11
 8008416:	d903      	bls.n	8008420 <_malloc_r+0x68>
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	441c      	add	r4, r3
 800841c:	6025      	str	r5, [r4, #0]
 800841e:	e004      	b.n	800842a <_malloc_r+0x72>
 8008420:	6863      	ldr	r3, [r4, #4]
 8008422:	42a2      	cmp	r2, r4
 8008424:	bf0c      	ite	eq
 8008426:	600b      	streq	r3, [r1, #0]
 8008428:	6053      	strne	r3, [r2, #4]
 800842a:	4630      	mov	r0, r6
 800842c:	f000 f85a 	bl	80084e4 <__malloc_unlock>
 8008430:	f104 000b 	add.w	r0, r4, #11
 8008434:	1d23      	adds	r3, r4, #4
 8008436:	f020 0007 	bic.w	r0, r0, #7
 800843a:	1ac2      	subs	r2, r0, r3
 800843c:	d0cc      	beq.n	80083d8 <_malloc_r+0x20>
 800843e:	1a1b      	subs	r3, r3, r0
 8008440:	50a3      	str	r3, [r4, r2]
 8008442:	e7c9      	b.n	80083d8 <_malloc_r+0x20>
 8008444:	4622      	mov	r2, r4
 8008446:	6864      	ldr	r4, [r4, #4]
 8008448:	e7cc      	b.n	80083e4 <_malloc_r+0x2c>
 800844a:	1cc4      	adds	r4, r0, #3
 800844c:	f024 0403 	bic.w	r4, r4, #3
 8008450:	42a0      	cmp	r0, r4
 8008452:	d0e3      	beq.n	800841c <_malloc_r+0x64>
 8008454:	1a21      	subs	r1, r4, r0
 8008456:	4630      	mov	r0, r6
 8008458:	f000 f82e 	bl	80084b8 <_sbrk_r>
 800845c:	3001      	adds	r0, #1
 800845e:	d1dd      	bne.n	800841c <_malloc_r+0x64>
 8008460:	e7cf      	b.n	8008402 <_malloc_r+0x4a>
 8008462:	bf00      	nop
 8008464:	2000056c 	.word	0x2000056c
 8008468:	20000570 	.word	0x20000570

0800846c <_realloc_r>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	4607      	mov	r7, r0
 8008470:	4614      	mov	r4, r2
 8008472:	460e      	mov	r6, r1
 8008474:	b921      	cbnz	r1, 8008480 <_realloc_r+0x14>
 8008476:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800847a:	4611      	mov	r1, r2
 800847c:	f7ff bf9c 	b.w	80083b8 <_malloc_r>
 8008480:	b922      	cbnz	r2, 800848c <_realloc_r+0x20>
 8008482:	f7ff ff49 	bl	8008318 <_free_r>
 8008486:	4625      	mov	r5, r4
 8008488:	4628      	mov	r0, r5
 800848a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800848c:	f000 f830 	bl	80084f0 <_malloc_usable_size_r>
 8008490:	42a0      	cmp	r0, r4
 8008492:	d20f      	bcs.n	80084b4 <_realloc_r+0x48>
 8008494:	4621      	mov	r1, r4
 8008496:	4638      	mov	r0, r7
 8008498:	f7ff ff8e 	bl	80083b8 <_malloc_r>
 800849c:	4605      	mov	r5, r0
 800849e:	2800      	cmp	r0, #0
 80084a0:	d0f2      	beq.n	8008488 <_realloc_r+0x1c>
 80084a2:	4631      	mov	r1, r6
 80084a4:	4622      	mov	r2, r4
 80084a6:	f7ff ff0f 	bl	80082c8 <memcpy>
 80084aa:	4631      	mov	r1, r6
 80084ac:	4638      	mov	r0, r7
 80084ae:	f7ff ff33 	bl	8008318 <_free_r>
 80084b2:	e7e9      	b.n	8008488 <_realloc_r+0x1c>
 80084b4:	4635      	mov	r5, r6
 80084b6:	e7e7      	b.n	8008488 <_realloc_r+0x1c>

080084b8 <_sbrk_r>:
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	4d06      	ldr	r5, [pc, #24]	; (80084d4 <_sbrk_r+0x1c>)
 80084bc:	2300      	movs	r3, #0
 80084be:	4604      	mov	r4, r0
 80084c0:	4608      	mov	r0, r1
 80084c2:	602b      	str	r3, [r5, #0]
 80084c4:	f7f8 fc7a 	bl	8000dbc <_sbrk>
 80084c8:	1c43      	adds	r3, r0, #1
 80084ca:	d102      	bne.n	80084d2 <_sbrk_r+0x1a>
 80084cc:	682b      	ldr	r3, [r5, #0]
 80084ce:	b103      	cbz	r3, 80084d2 <_sbrk_r+0x1a>
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	bd38      	pop	{r3, r4, r5, pc}
 80084d4:	20001e50 	.word	0x20001e50

080084d8 <__malloc_lock>:
 80084d8:	4801      	ldr	r0, [pc, #4]	; (80084e0 <__malloc_lock+0x8>)
 80084da:	f000 b811 	b.w	8008500 <__retarget_lock_acquire_recursive>
 80084de:	bf00      	nop
 80084e0:	20001e58 	.word	0x20001e58

080084e4 <__malloc_unlock>:
 80084e4:	4801      	ldr	r0, [pc, #4]	; (80084ec <__malloc_unlock+0x8>)
 80084e6:	f000 b80c 	b.w	8008502 <__retarget_lock_release_recursive>
 80084ea:	bf00      	nop
 80084ec:	20001e58 	.word	0x20001e58

080084f0 <_malloc_usable_size_r>:
 80084f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f4:	1f18      	subs	r0, r3, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bfbc      	itt	lt
 80084fa:	580b      	ldrlt	r3, [r1, r0]
 80084fc:	18c0      	addlt	r0, r0, r3
 80084fe:	4770      	bx	lr

08008500 <__retarget_lock_acquire_recursive>:
 8008500:	4770      	bx	lr

08008502 <__retarget_lock_release_recursive>:
 8008502:	4770      	bx	lr

08008504 <_init>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	bf00      	nop
 8008508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850a:	bc08      	pop	{r3}
 800850c:	469e      	mov	lr, r3
 800850e:	4770      	bx	lr

08008510 <_fini>:
 8008510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008512:	bf00      	nop
 8008514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008516:	bc08      	pop	{r3}
 8008518:	469e      	mov	lr, r3
 800851a:	4770      	bx	lr
