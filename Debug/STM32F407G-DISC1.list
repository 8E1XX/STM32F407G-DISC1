
STM32F407G-DISC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007898  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007a28  08007a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac0  08007ac0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ac8  08007ac8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007acc  08007acc  00017acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00001b90  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d74  20001d74  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016cc7  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003593  00000000  00000000  00036edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  0003a470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  0003b1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e4b  00000000  00000000  0003bdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000115f9  00000000  00000000  00061c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8508  00000000  00000000  000731fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013b704  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003934  00000000  00000000  0013b758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a10 	.word	0x08007a10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08007a10 	.word	0x08007a10

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <_ZN7LIS3DSH4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
 */

#include "LIS3DSH.h"

void LIS3DSH::init(SPI_HandleTypeDef *spiHandler,
				   GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	807b      	strh	r3, [r7, #2]

	spiHandle = spiHandler;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	615a      	str	r2, [r3, #20]
	csAccPinBank = csPinBank;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	619a      	str	r2, [r3, #24]
	csAccPin = csPin;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	887a      	ldrh	r2, [r7, #2]
 8000596:	839a      	strh	r2, [r3, #28]
	x = 0;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f04f 0200 	mov.w	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
	y = 0;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f04f 0200 	mov.w	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
	z = 0;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f04f 0200 	mov.w	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(csAccPinBank, csAccPin, GPIO_PIN_SET);
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	6998      	ldr	r0, [r3, #24]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	8b9b      	ldrh	r3, [r3, #28]
 80005b8:	2201      	movs	r2, #1
 80005ba:	4619      	mov	r1, r3
 80005bc:	f000 fe8a 	bl	80012d4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f000 fbb5 	bl	8000d30 <HAL_Delay>

	LIS3DSH::writeToAddressPol(CTRL_REG4, 0b01101111); // ODR3 ODR2 ODR1 ODR0 BDU Zen Yen Xen
 80005c6:	226f      	movs	r2, #111	; 0x6f
 80005c8:	2120      	movs	r1, #32
 80005ca:	68f8      	ldr	r0, [r7, #12]
 80005cc:	f000 f80e 	bl	80005ec <_ZN7LIS3DSH17writeToAddressPolEhh>
	LIS3DSH::writeToAddressPol(CTRL_REG3, 0b11101000); // DR_EN IEA IEL INT2_EN INT1_EN VFILT - STRT
 80005d0:	22e8      	movs	r2, #232	; 0xe8
 80005d2:	2123      	movs	r1, #35	; 0x23
 80005d4:	68f8      	ldr	r0, [r7, #12]
 80005d6:	f000 f809 	bl	80005ec <_ZN7LIS3DSH17writeToAddressPolEhh>
  //accelWriteToAddressPol(CTRL_REG5, 0b00000000); // BW2 BW1 FSCALE2 FSCALE1 FSCALE0 ST2 ST1 SIM
	LIS3DSH::writeToAddressPol(CTRL_REG6, 0b10010000); // BOOT FIFO_EN WTM_EN ADD_INC P1_EMPTY P1_WTM P1_OVERRUN P2_BOOT
 80005da:	2290      	movs	r2, #144	; 0x90
 80005dc:	2125      	movs	r1, #37	; 0x25
 80005de:	68f8      	ldr	r0, [r7, #12]
 80005e0:	f000 f804 	bl	80005ec <_ZN7LIS3DSH17writeToAddressPolEhh>

}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <_ZN7LIS3DSH17writeToAddressPolEhh>:

void LIS3DSH::writeToAddressPol(uint8_t address, uint8_t data) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]
 80005f8:	4613      	mov	r3, r2
 80005fa:	70bb      	strb	r3, [r7, #2]
  	uint8_t SPIDataTx [2] = {address, data};
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	733b      	strb	r3, [r7, #12]
 8000600:	78bb      	ldrb	r3, [r7, #2]
 8000602:	737b      	strb	r3, [r7, #13]
  	HAL_GPIO_WritePin(csAccPinBank, csAccPin, GPIO_PIN_RESET);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6998      	ldr	r0, [r3, #24]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	8b9b      	ldrh	r3, [r3, #28]
 800060c:	2200      	movs	r2, #0
 800060e:	4619      	mov	r1, r3
 8000610:	f000 fe60 	bl	80012d4 <HAL_GPIO_WritePin>
  	HAL_SPI_Transmit(spiHandle, SPIDataTx, 2, HAL_MAX_DELAY);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6958      	ldr	r0, [r3, #20]
 8000618:	f107 010c 	add.w	r1, r7, #12
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	2202      	movs	r2, #2
 8000622:	f002 fcc8 	bl	8002fb6 <HAL_SPI_Transmit>
  	HAL_GPIO_WritePin(csAccPinBank, csAccPin, GPIO_PIN_SET);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6998      	ldr	r0, [r3, #24]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	8b9b      	ldrh	r3, [r3, #28]
 800062e:	2201      	movs	r2, #1
 8000630:	4619      	mov	r1, r3
 8000632:	f000 fe4f 	bl	80012d4 <HAL_GPIO_WritePin>
}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_ZN7LIS3DSH14readDataRawPolEv>:
	HAL_SPI_TransmitReceive(spiHandle, SPIDataTx, SPIDataRx, 2, 5000);
	HAL_GPIO_WritePin(csAccPinBank, csAccPin, GPIO_PIN_SET);
	return SPIDataRx [1];
}

void LIS3DSH::readDataRawPol() {
 800063e:	b580      	push	{r7, lr}
 8000640:	b088      	sub	sp, #32
 8000642:	af02      	add	r7, sp, #8
 8000644:	6078      	str	r0, [r7, #4]
	uint8_t SPIDataTx [7] = {OUT_X_L | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000646:	23a8      	movs	r3, #168	; 0xa8
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2100      	movs	r1, #0
 8000650:	460a      	mov	r2, r1
 8000652:	801a      	strh	r2, [r3, #0]
 8000654:	460a      	mov	r2, r1
 8000656:	709a      	strb	r2, [r3, #2]
	uint8_t SPIDataRx [7];
	HAL_GPIO_WritePin(csAccPinBank, csAccPin, GPIO_PIN_RESET);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6998      	ldr	r0, [r3, #24]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	8b9b      	ldrh	r3, [r3, #28]
 8000660:	2200      	movs	r2, #0
 8000662:	4619      	mov	r1, r3
 8000664:	f000 fe36 	bl	80012d4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spiHandle, SPIDataTx, SPIDataRx, 7, 5000);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6958      	ldr	r0, [r3, #20]
 800066c:	f107 0208 	add.w	r2, r7, #8
 8000670:	f107 0110 	add.w	r1, r7, #16
 8000674:	f241 3388 	movw	r3, #5000	; 0x1388
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2307      	movs	r3, #7
 800067c:	f002 fdd7 	bl	800322e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(csAccPinBank, csAccPin, GPIO_PIN_SET);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6998      	ldr	r0, [r3, #24]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	8b9b      	ldrh	r3, [r3, #28]
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	f000 fe22 	bl	80012d4 <HAL_GPIO_WritePin>

	xRaw = SPIDataRx [1] | (SPIDataRx [2] << 8);
 8000690:	7a7b      	ldrb	r3, [r7, #9]
 8000692:	b21a      	sxth	r2, r3
 8000694:	7abb      	ldrb	r3, [r7, #10]
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	b21b      	sxth	r3, r3
 800069a:	4313      	orrs	r3, r2
 800069c:	b21a      	sxth	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	801a      	strh	r2, [r3, #0]
	yRaw = SPIDataRx [3] | (SPIDataRx [4] << 8);
 80006a2:	7afb      	ldrb	r3, [r7, #11]
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	7b3b      	ldrb	r3, [r7, #12]
 80006a8:	021b      	lsls	r3, r3, #8
 80006aa:	b21b      	sxth	r3, r3
 80006ac:	4313      	orrs	r3, r2
 80006ae:	b21a      	sxth	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	805a      	strh	r2, [r3, #2]
	zRaw = SPIDataRx [5] | (SPIDataRx [6] << 8);
 80006b4:	7b7b      	ldrb	r3, [r7, #13]
 80006b6:	b21a      	sxth	r2, r3
 80006b8:	7bbb      	ldrb	r3, [r7, #14]
 80006ba:	021b      	lsls	r3, r3, #8
 80006bc:	b21b      	sxth	r3, r3
 80006be:	4313      	orrs	r3, r2
 80006c0:	b21a      	sxth	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	809a      	strh	r2, [r3, #4]
}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <_ZN7LIS3DSH7getXRawEv>:

int16_t LIS3DSH::getXRaw() {
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
	return xRaw;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <_ZN7LIS3DSH7getYRawEv>:

int16_t LIS3DSH::getYRaw() {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	return yRaw;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <_ZN7LIS3DSH7getZRawEv>:

int16_t LIS3DSH::getZRaw() {
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
	return zRaw;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8000710:	4618      	mov	r0, r3
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b5b0      	push	{r4, r5, r7, lr}
 800071e:	b0aa      	sub	sp, #168	; 0xa8
 8000720:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fa93 	bl	8000c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f841 	bl	80007ac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072a:	f000 f8ef 	bl	800090c <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 800072e:	f000 f8b1 	bl	8000894 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000732:	f005 fff3 	bl	800671c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  char dataBuf [128];
  LIS3DSH accel;
  accel.init(&hspi1, GPIOE, GPIO_PIN_3);
 8000736:	4638      	mov	r0, r7
 8000738:	2308      	movs	r3, #8
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <main+0x84>)
 800073c:	4919      	ldr	r1, [pc, #100]	; (80007a4 <main+0x88>)
 800073e:	f7ff ff1b 	bl	8000578 <_ZN7LIS3DSH4initEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  accel.readDataRawPol();
 8000742:	463b      	mov	r3, r7
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff7a 	bl	800063e <_ZN7LIS3DSH14readDataRawPolEv>
	  sprintf(dataBuf, "%d %d %d\n", accel.getXRaw(),accel.getYRaw(),accel.getZRaw());
 800074a:	463b      	mov	r3, r7
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ffbe 	bl	80006ce <_ZN7LIS3DSH7getXRawEv>
 8000752:	4603      	mov	r3, r0
 8000754:	461c      	mov	r4, r3
 8000756:	463b      	mov	r3, r7
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ffc5 	bl	80006e8 <_ZN7LIS3DSH7getYRawEv>
 800075e:	4603      	mov	r3, r0
 8000760:	461d      	mov	r5, r3
 8000762:	463b      	mov	r3, r7
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ffcc 	bl	8000702 <_ZN7LIS3DSH7getZRawEv>
 800076a:	4603      	mov	r3, r0
 800076c:	f107 0020 	add.w	r0, r7, #32
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	462b      	mov	r3, r5
 8000774:	4622      	mov	r2, r4
 8000776:	490c      	ldr	r1, [pc, #48]	; (80007a8 <main+0x8c>)
 8000778:	f006 fd1c 	bl	80071b4 <siprintf>
	  CDC_Transmit_FS((uint8_t *) dataBuf, strlen(dataBuf));
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fd25 	bl	80001d0 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	b29a      	uxth	r2, r3
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f006 f881 	bl	8006898 <CDC_Transmit_FS>
	  HAL_Delay(100);
 8000796:	2064      	movs	r0, #100	; 0x64
 8000798:	f000 faca 	bl	8000d30 <HAL_Delay>
	  accel.readDataRawPol();
 800079c:	e7d1      	b.n	8000742 <main+0x26>
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000
 80007a4:	20000200 	.word	0x20000200
 80007a8:	08007a28 	.word	0x08007a28

080007ac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	; 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2230      	movs	r2, #48	; 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f006 fcf2 	bl	80071a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	4b2d      	ldr	r3, [pc, #180]	; (800088c <_Z18SystemClock_Configv+0xe0>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a2c      	ldr	r2, [pc, #176]	; (800088c <_Z18SystemClock_Configv+0xe0>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	; 0x40
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <_Z18SystemClock_Configv+0xe0>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <_Z18SystemClock_Configv+0xe4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a26      	ldr	r2, [pc, #152]	; (8000890 <_Z18SystemClock_Configv+0xe4>)
 80007f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <_Z18SystemClock_Configv+0xe4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000808:	2301      	movs	r3, #1
 800080a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800081c:	2304      	movs	r3, #4
 800081e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000820:	23a8      	movs	r3, #168	; 0xa8
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000824:	2302      	movs	r3, #2
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000828:	2307      	movs	r3, #7
 800082a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	4618      	mov	r0, r3
 8000832:	f001 feeb 	bl	800260c <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	bf14      	ite	ne
 800083c:	2301      	movne	r3, #1
 800083e:	2300      	moveq	r3, #0
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000846:	f000 f8e5 	bl	8000a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2302      	movs	r3, #2
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000856:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800085a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2105      	movs	r1, #5
 8000868:	4618      	mov	r0, r3
 800086a:	f002 f947 	bl	8002afc <HAL_RCC_ClockConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	bf14      	ite	ne
 8000874:	2301      	movne	r3, #1
 8000876:	2300      	moveq	r3, #0
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800087e:	f000 f8c9 	bl	8000a14 <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3750      	adds	r7, #80	; 0x50
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <_ZL12MX_SPI1_Initv+0x70>)
 800089a:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <_ZL12MX_SPI1_Initv+0x74>)
 800089c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <_ZL12MX_SPI1_Initv+0x70>)
 80008a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <_ZL12MX_SPI1_Initv+0x70>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <_ZL12MX_SPI1_Initv+0x70>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <_ZL12MX_SPI1_Initv+0x70>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <_ZL12MX_SPI1_Initv+0x70>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <_ZL12MX_SPI1_Initv+0x70>)
 80008c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <_ZL12MX_SPI1_Initv+0x70>)
 80008c8:	2228      	movs	r2, #40	; 0x28
 80008ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <_ZL12MX_SPI1_Initv+0x70>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <_ZL12MX_SPI1_Initv+0x70>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <_ZL12MX_SPI1_Initv+0x70>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <_ZL12MX_SPI1_Initv+0x70>)
 80008e0:	220a      	movs	r2, #10
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e4:	4807      	ldr	r0, [pc, #28]	; (8000904 <_ZL12MX_SPI1_Initv+0x70>)
 80008e6:	f002 fadd 	bl	8002ea4 <HAL_SPI_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	bf14      	ite	ne
 80008f0:	2301      	movne	r3, #1
 80008f2:	2300      	moveq	r3, #0
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80008fa:	f000 f88b 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000200 	.word	0x20000200
 8000908:	40013000 	.word	0x40013000

0800090c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a37      	ldr	r2, [pc, #220]	; (8000a08 <_ZL12MX_GPIO_Initv+0xfc>)
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b35      	ldr	r3, [pc, #212]	; (8000a08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0310 	and.w	r3, r3, #16
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a30      	ldr	r2, [pc, #192]	; (8000a08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a29      	ldr	r2, [pc, #164]	; (8000a08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <_ZL12MX_GPIO_Initv+0xfc>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <_ZL12MX_GPIO_Initv+0xfc>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a22      	ldr	r2, [pc, #136]	; (8000a08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <_ZL12MX_GPIO_Initv+0xfc>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <_ZL12MX_GPIO_Initv+0xfc>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <_ZL12MX_GPIO_Initv+0xfc>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2108      	movs	r1, #8
 80009b2:	4816      	ldr	r0, [pc, #88]	; (8000a0c <_ZL12MX_GPIO_Initv+0x100>)
 80009b4:	f000 fc8e 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009be:	4814      	ldr	r0, [pc, #80]	; (8000a10 <_ZL12MX_GPIO_Initv+0x104>)
 80009c0:	f000 fc88 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009c4:	2308      	movs	r3, #8
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <_ZL12MX_GPIO_Initv+0x100>)
 80009dc:	f000 fade 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <_ZL12MX_GPIO_Initv+0x104>)
 80009fa:	f000 facf 	bl	8000f9c <HAL_GPIO_Init>

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40020c00 	.word	0x40020c00

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <Error_Handler+0x8>
	...

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <HAL_SPI_MspInit+0x84>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d12b      	bne.n	8000aea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_SPI_MspInit+0x88>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <HAL_SPI_MspInit+0x88>)
 8000a9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_SPI_MspInit+0x88>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_SPI_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <HAL_SPI_MspInit+0x88>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_SPI_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000aca:	23e0      	movs	r3, #224	; 0xe0
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ada:	2305      	movs	r3, #5
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <HAL_SPI_MspInit+0x8c>)
 8000ae6:	f000 fa59 	bl	8000f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40013000 	.word	0x40013000
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 f8d0 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <OTG_FS_IRQHandler+0x10>)
 8000b5a:	f000 fd24 	bl	80015a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000195c 	.word	0x2000195c

08000b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <_sbrk+0x5c>)
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <_sbrk+0x60>)
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <_sbrk+0x64>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <_sbrk+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d207      	bcs.n	8000ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b98:	f006 fada 	bl	8007150 <__errno>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	e009      	b.n	8000bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <_sbrk+0x64>)
 8000bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bba:	68fb      	ldr	r3, [r7, #12]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20020000 	.word	0x20020000
 8000bc8:	00000400 	.word	0x00000400
 8000bcc:	20000258 	.word	0x20000258
 8000bd0:	20001d78 	.word	0x20001d78

08000bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfe:	490e      	ldr	r1, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c14:	4c0b      	ldr	r4, [pc, #44]	; (8000c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c22:	f7ff ffd7 	bl	8000bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f006 fa99 	bl	800715c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fd77 	bl	800071c <main>
  bx  lr    
 8000c2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000c3c:	08007ad0 	.word	0x08007ad0
  ldr r2, =_sbss
 8000c40:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000c44:	20001d74 	.word	0x20001d74

08000c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <HAL_Init+0x40>)
 8000c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_Init+0x40>)
 8000c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_Init+0x40>)
 8000c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f94f 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7a:	200f      	movs	r0, #15
 8000c7c:	f000 f808 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c80:	f7ff fece 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023c00 	.word	0x40023c00

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x54>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_InitTick+0x58>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f967 	bl	8000f82 <HAL_SYSTICK_Config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00e      	b.n	8000cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d80a      	bhi.n	8000cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f000 f92f 	bl	8000f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_InitTick+0x5c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000004 	.word	0x20000004

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000488 	.word	0x20000488

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000488 	.word	0x20000488

08000d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff ffee 	bl	8000d18 <HAL_GetTick>
 8000d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d48:	d005      	beq.n	8000d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_Delay+0x44>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d56:	bf00      	nop
 8000d58:	f7ff ffde 	bl	8000d18 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d8f7      	bhi.n	8000d58 <HAL_Delay+0x28>
  {
  }
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db0b      	blt.n	8000e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 021f 	and.w	r2, r3, #31
 8000df4:	4907      	ldr	r1, [pc, #28]	; (8000e14 <__NVIC_EnableIRQ+0x38>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	095b      	lsrs	r3, r3, #5
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee4:	d301      	bcc.n	8000eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00f      	b.n	8000f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <SysTick_Config+0x40>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f7ff ff8e 	bl	8000e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SysTick_Config+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <SysTick_Config+0x40>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff29 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff3e 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff8e 	bl	8000e6c <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5d 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff31 	bl	8000ddc <__NVIC_EnableIRQ>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffa2 	bl	8000ed4 <SysTick_Config>
 8000f90:	4603      	mov	r3, r0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	e16b      	b.n	8001290 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	f040 815a 	bne.w	800128a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d005      	beq.n	8000fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d130      	bne.n	8001050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	091b      	lsrs	r3, r3, #4
 800103a:	f003 0201 	and.w	r2, r3, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b03      	cmp	r3, #3
 800105a:	d017      	beq.n	800108c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d123      	bne.n	80010e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	08da      	lsrs	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3208      	adds	r2, #8
 80010a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	69b9      	ldr	r1, [r7, #24]
 80010dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0203 	and.w	r2, r3, #3
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80b4 	beq.w	800128a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b60      	ldr	r3, [pc, #384]	; (80012a8 <HAL_GPIO_Init+0x30c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a5f      	ldr	r2, [pc, #380]	; (80012a8 <HAL_GPIO_Init+0x30c>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b5d      	ldr	r3, [pc, #372]	; (80012a8 <HAL_GPIO_Init+0x30c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113e:	4a5b      	ldr	r2, [pc, #364]	; (80012ac <HAL_GPIO_Init+0x310>)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a52      	ldr	r2, [pc, #328]	; (80012b0 <HAL_GPIO_Init+0x314>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d02b      	beq.n	80011c2 <HAL_GPIO_Init+0x226>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a51      	ldr	r2, [pc, #324]	; (80012b4 <HAL_GPIO_Init+0x318>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d025      	beq.n	80011be <HAL_GPIO_Init+0x222>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a50      	ldr	r2, [pc, #320]	; (80012b8 <HAL_GPIO_Init+0x31c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d01f      	beq.n	80011ba <HAL_GPIO_Init+0x21e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4f      	ldr	r2, [pc, #316]	; (80012bc <HAL_GPIO_Init+0x320>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d019      	beq.n	80011b6 <HAL_GPIO_Init+0x21a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4e      	ldr	r2, [pc, #312]	; (80012c0 <HAL_GPIO_Init+0x324>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x216>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4d      	ldr	r2, [pc, #308]	; (80012c4 <HAL_GPIO_Init+0x328>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x212>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4c      	ldr	r2, [pc, #304]	; (80012c8 <HAL_GPIO_Init+0x32c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x20e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4b      	ldr	r2, [pc, #300]	; (80012cc <HAL_GPIO_Init+0x330>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x20a>
 80011a2:	2307      	movs	r3, #7
 80011a4:	e00e      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011a6:	2308      	movs	r3, #8
 80011a8:	e00c      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011aa:	2306      	movs	r3, #6
 80011ac:	e00a      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011ae:	2305      	movs	r3, #5
 80011b0:	e008      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011b2:	2304      	movs	r3, #4
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011b6:	2303      	movs	r3, #3
 80011b8:	e004      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x228>
 80011c2:	2300      	movs	r3, #0
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	f002 0203 	and.w	r2, r2, #3
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4093      	lsls	r3, r2
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d4:	4935      	ldr	r1, [pc, #212]	; (80012ac <HAL_GPIO_Init+0x310>)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_GPIO_Init+0x334>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001206:	4a32      	ldr	r2, [pc, #200]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800120c:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <HAL_GPIO_Init+0x334>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001230:	4a27      	ldr	r2, [pc, #156]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800125a:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <HAL_GPIO_Init+0x334>)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001284:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <HAL_GPIO_Init+0x334>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3301      	adds	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	2b0f      	cmp	r3, #15
 8001294:	f67f ae90 	bls.w	8000fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40021400 	.word	0x40021400
 80012c8:	40021800 	.word	0x40021800
 80012cc:	40021c00 	.word	0x40021c00
 80012d0:	40013c00 	.word	0x40013c00

080012d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
 80012e0:	4613      	mov	r3, r2
 80012e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e4:	787b      	ldrb	r3, [r7, #1]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f0:	e003      	b.n	80012fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	041a      	lsls	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	619a      	str	r2, [r3, #24]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001308:	b08f      	sub	sp, #60	; 0x3c
 800130a:	af0a      	add	r7, sp, #40	; 0x28
 800130c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e10f      	b.n	8001538 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d106      	bne.n	8001338 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f005 fbf8 	bl	8006b28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2203      	movs	r2, #3
 800133c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f002 faeb 	bl	8003932 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	687e      	ldr	r6, [r7, #4]
 8001364:	466d      	mov	r5, sp
 8001366:	f106 0410 	add.w	r4, r6, #16
 800136a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800136e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001372:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001376:	e885 0003 	stmia.w	r5, {r0, r1}
 800137a:	1d33      	adds	r3, r6, #4
 800137c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800137e:	6838      	ldr	r0, [r7, #0]
 8001380:	f002 f9c2 	bl	8003708 <USB_CoreInit>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2202      	movs	r2, #2
 800138e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e0d0      	b.n	8001538 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f002 fad9 	bl	8003954 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	e04a      	b.n	800143e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	333d      	adds	r3, #61	; 0x3d
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	1a9b      	subs	r3, r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	333c      	adds	r3, #60	; 0x3c
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013d0:	7bfa      	ldrb	r2, [r7, #15]
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	b298      	uxth	r0, r3
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	3342      	adds	r3, #66	; 0x42
 80013e4:	4602      	mov	r2, r0
 80013e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	1a9b      	subs	r3, r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	333f      	adds	r3, #63	; 0x3f
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	1a9b      	subs	r3, r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	3344      	adds	r3, #68	; 0x44
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	1a9b      	subs	r3, r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	3348      	adds	r3, #72	; 0x48
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	3350      	adds	r3, #80	; 0x50
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3301      	adds	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	d3af      	bcc.n	80013a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e044      	b.n	80014d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	1a9b      	subs	r3, r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	1a9b      	subs	r3, r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	1a9b      	subs	r3, r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	440b      	add	r3, r1
 8001488:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	1a9b      	subs	r3, r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	3301      	adds	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d3b5      	bcc.n	800144e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	687e      	ldr	r6, [r7, #4]
 80014ea:	466d      	mov	r5, sp
 80014ec:	f106 0410 	add.w	r4, r6, #16
 80014f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001500:	1d33      	adds	r3, r6, #4
 8001502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f002 fa71 	bl	80039ec <USB_DevInit>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2202      	movs	r2, #2
 8001514:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e00d      	b.n	8001538 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f003 faed 	bl	8004b10 <USB_DevDisconnect>

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001540 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_PCD_Start+0x1c>
 8001558:	2302      	movs	r3, #2
 800155a:	e020      	b.n	800159e <HAL_PCD_Start+0x5e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	2b01      	cmp	r3, #1
 800156a:	d109      	bne.n	8001580 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001570:	2b01      	cmp	r3, #1
 8001572:	d005      	beq.n	8001580 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001578:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f002 f9c3 	bl	8003910 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f003 fa9d 	bl	8004ace <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015a6:	b590      	push	{r4, r7, lr}
 80015a8:	b08d      	sub	sp, #52	; 0x34
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f003 fb5b 	bl	8004c78 <USB_GetMode>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f040 839d 	bne.w	8001d04 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fabf 	bl	8004b52 <USB_ReadInterrupts>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 8393 	beq.w	8001d02 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 fab6 	bl	8004b52 <USB_ReadInterrupts>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d107      	bne.n	8001600 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f002 0202 	and.w	r2, r2, #2
 80015fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f003 faa4 	bl	8004b52 <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2b10      	cmp	r3, #16
 8001612:	d161      	bne.n	80016d8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699a      	ldr	r2, [r3, #24]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0210 	bic.w	r2, r2, #16
 8001622:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	f003 020f 	and.w	r2, r3, #15
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	3304      	adds	r3, #4
 8001642:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	0c5b      	lsrs	r3, r3, #17
 8001648:	f003 030f 	and.w	r3, r3, #15
 800164c:	2b02      	cmp	r3, #2
 800164e:	d124      	bne.n	800169a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d035      	beq.n	80016c8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001666:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800166a:	b29b      	uxth	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	6a38      	ldr	r0, [r7, #32]
 8001670:	f003 f8db 	bl	800482a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001680:	441a      	add	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	699a      	ldr	r2, [r3, #24]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001692:	441a      	add	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	619a      	str	r2, [r3, #24]
 8001698:	e016      	b.n	80016c8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	0c5b      	lsrs	r3, r3, #17
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d110      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016ac:	2208      	movs	r2, #8
 80016ae:	4619      	mov	r1, r3
 80016b0:	6a38      	ldr	r0, [r7, #32]
 80016b2:	f003 f8ba 	bl	800482a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	699a      	ldr	r2, [r3, #24]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016c2:	441a      	add	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699a      	ldr	r2, [r3, #24]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0210 	orr.w	r2, r2, #16
 80016d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f003 fa38 	bl	8004b52 <USB_ReadInterrupts>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016ec:	d16e      	bne.n	80017cc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 fa3e 	bl	8004b78 <USB_ReadDevAllOutEpInterrupt>
 80016fc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80016fe:	e062      	b.n	80017c6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d057      	beq.n	80017ba <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f003 fa63 	bl	8004be0 <USB_ReadDevOutEPInterrupt>
 800171a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00c      	beq.n	8001740 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	015a      	lsls	r2, r3, #5
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	4413      	add	r3, r2
 800172e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001732:	461a      	mov	r2, r3
 8001734:	2301      	movs	r3, #1
 8001736:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 fdb0 	bl	80022a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00c      	beq.n	8001764 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	015a      	lsls	r2, r3, #5
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	4413      	add	r3, r2
 8001752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001756:	461a      	mov	r2, r3
 8001758:	2308      	movs	r3, #8
 800175a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800175c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 feaa 	bl	80024b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	d008      	beq.n	8001780 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	015a      	lsls	r2, r3, #5
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	4413      	add	r3, r2
 8001776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800177a:	461a      	mov	r2, r3
 800177c:	2310      	movs	r3, #16
 800177e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	f003 0320 	and.w	r3, r3, #32
 8001786:	2b00      	cmp	r3, #0
 8001788:	d008      	beq.n	800179c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	015a      	lsls	r2, r3, #5
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	4413      	add	r3, r2
 8001792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001796:	461a      	mov	r2, r3
 8001798:	2320      	movs	r3, #32
 800179a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b2:	461a      	mov	r2, r3
 80017b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	3301      	adds	r3, #1
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c2:	085b      	lsrs	r3, r3, #1
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d199      	bne.n	8001700 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 f9be 	bl	8004b52 <USB_ReadInterrupts>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017e0:	f040 80c0 	bne.w	8001964 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 f9df 	bl	8004bac <USB_ReadDevAllInEpInterrupt>
 80017ee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80017f4:	e0b2      	b.n	800195c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80017f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80a7 	beq.w	8001950 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f003 fa05 	bl	8004c1c <USB_ReadDevInEPInterrupt>
 8001812:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d057      	beq.n	80018ce <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	2201      	movs	r2, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	43db      	mvns	r3, r3
 8001838:	69f9      	ldr	r1, [r7, #28]
 800183a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800183e:	4013      	ands	r3, r2
 8001840:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	015a      	lsls	r2, r3, #5
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	4413      	add	r3, r2
 800184a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800184e:	461a      	mov	r2, r3
 8001850:	2301      	movs	r3, #1
 8001852:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d132      	bne.n	80018c2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	4613      	mov	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	3348      	adds	r3, #72	; 0x48
 800186c:	6819      	ldr	r1, [r3, #0]
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001872:	4613      	mov	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4403      	add	r3, r0
 800187c:	3344      	adds	r3, #68	; 0x44
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4419      	add	r1, r3
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4403      	add	r3, r0
 8001890:	3348      	adds	r3, #72	; 0x48
 8001892:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	2b00      	cmp	r3, #0
 8001898:	d113      	bne.n	80018c2 <HAL_PCD_IRQHandler+0x31c>
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189e:	4613      	mov	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	3350      	adds	r3, #80	; 0x50
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d108      	bne.n	80018c2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80018ba:	461a      	mov	r2, r3
 80018bc:	2101      	movs	r1, #1
 80018be:	f003 fa0d 	bl	8004cdc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f005 f9ae 	bl	8006c2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	015a      	lsls	r2, r3, #5
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	4413      	add	r3, r2
 80018e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018e4:	461a      	mov	r2, r3
 80018e6:	2308      	movs	r3, #8
 80018e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d008      	beq.n	8001906 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	015a      	lsls	r2, r3, #5
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	4413      	add	r3, r2
 80018fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001900:	461a      	mov	r2, r3
 8001902:	2310      	movs	r3, #16
 8001904:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	015a      	lsls	r2, r3, #5
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	4413      	add	r3, r2
 8001918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800191c:	461a      	mov	r2, r3
 800191e:	2340      	movs	r3, #64	; 0x40
 8001920:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	015a      	lsls	r2, r3, #5
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	4413      	add	r3, r2
 8001934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001938:	461a      	mov	r2, r3
 800193a:	2302      	movs	r3, #2
 800193c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001948:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fc1b 	bl	8002186 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	3301      	adds	r3, #1
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195e:	2b00      	cmp	r3, #0
 8001960:	f47f af49 	bne.w	80017f6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f003 f8f2 	bl	8004b52 <USB_ReadInterrupts>
 800196e:	4603      	mov	r3, r0
 8001970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001978:	d122      	bne.n	80019c0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001994:	2b01      	cmp	r3, #1
 8001996:	d108      	bne.n	80019aa <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019a0:	2100      	movs	r1, #0
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fe26 	bl	80025f4 <HAL_PCDEx_LPM_Callback>
 80019a8:	e002      	b.n	80019b0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f005 f9b4 	bl	8006d18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 f8c4 	bl	8004b52 <USB_ReadInterrupts>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019d4:	d112      	bne.n	80019fc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d102      	bne.n	80019ec <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f005 f970 	bl	8006ccc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80019fa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f003 f8a6 	bl	8004b52 <USB_ReadInterrupts>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a10:	f040 80c7 	bne.w	8001ba2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2110      	movs	r1, #16
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 f940 	bl	8003cb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a38:	e056      	b.n	8001ae8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3c:	015a      	lsls	r2, r3, #5
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	4413      	add	r3, r2
 8001a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a46:	461a      	mov	r2, r3
 8001a48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a4c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a5e:	0151      	lsls	r1, r2, #5
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	440a      	add	r2, r1
 8001a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a6c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a70:	015a      	lsls	r2, r3, #5
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a7e:	0151      	lsls	r1, r2, #5
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	440a      	add	r2, r1
 8001a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a8c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a90:	015a      	lsls	r2, r3, #5
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001aa0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa4:	015a      	lsls	r2, r3, #5
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab2:	0151      	lsls	r1, r2, #5
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	440a      	add	r2, r1
 8001ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001abc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ac0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	015a      	lsls	r2, r3, #5
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	4413      	add	r3, r2
 8001aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ad2:	0151      	lsls	r1, r2, #5
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	440a      	add	r2, r1
 8001ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001adc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ae0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d3a3      	bcc.n	8001a3a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b00:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b04:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d016      	beq.n	8001b3c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b1e:	f043 030b 	orr.w	r3, r3, #11
 8001b22:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b34:	f043 030b 	orr.w	r3, r3, #11
 8001b38:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3a:	e015      	b.n	8001b68 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b4e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b52:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b62:	f043 030b 	orr.w	r3, r3, #11
 8001b66:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b76:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b7a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f003 f8a5 	bl	8004cdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 ffd3 	bl	8004b52 <USB_ReadInterrupts>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bb6:	d124      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 f869 	bl	8004c94 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f002 f8d1 	bl	8003d6e <USB_GetDevSpeed>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681c      	ldr	r4, [r3, #0]
 8001bd8:	f001 f958 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8001bdc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	4620      	mov	r0, r4
 8001be8:	f001 fdf0 	bl	80037cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f005 f844 	bl	8006c7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c00:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 ffa3 	bl	8004b52 <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d10a      	bne.n	8001c2c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f005 f821 	bl	8006c5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f002 0208 	and.w	r2, r2, #8
 8001c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 ff8e 	bl	8004b52 <USB_ReadInterrupts>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c40:	d10f      	bne.n	8001c62 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f005 f883 	bl	8006d58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695a      	ldr	r2, [r3, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f002 ff73 	bl	8004b52 <USB_ReadInterrupts>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c76:	d10f      	bne.n	8001c98 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4619      	mov	r1, r3
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f005 f856 	bl	8006d34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 ff58 	bl	8004b52 <USB_ReadInterrupts>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cac:	d10a      	bne.n	8001cc4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f005 f864 	bl	8006d7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001cc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f002 ff42 	bl	8004b52 <USB_ReadInterrupts>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d115      	bne.n	8001d04 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f005 f854 	bl	8006d98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6859      	ldr	r1, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	e000      	b.n	8001d04 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001d02:	bf00      	nop
    }
  }
}
 8001d04:	3734      	adds	r7, #52	; 0x34
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}

08001d0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	460b      	mov	r3, r1
 8001d14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_PCD_SetAddress+0x1a>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e013      	b.n	8001d4c <HAL_PCD_SetAddress+0x42>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f002 fea0 	bl	8004a82 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	4608      	mov	r0, r1
 8001d5e:	4611      	mov	r1, r2
 8001d60:	461a      	mov	r2, r3
 8001d62:	4603      	mov	r3, r0
 8001d64:	70fb      	strb	r3, [r7, #3]
 8001d66:	460b      	mov	r3, r1
 8001d68:	803b      	strh	r3, [r7, #0]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	da0f      	bge.n	8001d9a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 020f 	and.w	r2, r3, #15
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	3338      	adds	r3, #56	; 0x38
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3304      	adds	r3, #4
 8001d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	705a      	strb	r2, [r3, #1]
 8001d98:	e00f      	b.n	8001dba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	f003 020f 	and.w	r2, r3, #15
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	3304      	adds	r3, #4
 8001db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dc6:	883a      	ldrh	r2, [r7, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	78ba      	ldrb	r2, [r7, #2]
 8001dd0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	785b      	ldrb	r3, [r3, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001de4:	78bb      	ldrb	r3, [r7, #2]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d102      	bne.n	8001df0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_PCD_EP_Open+0xaa>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e00e      	b.n	8001e1c <HAL_PCD_EP_Open+0xc8>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68f9      	ldr	r1, [r7, #12]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f001 ffd3 	bl	8003db8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001e1a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	da0f      	bge.n	8001e58 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	f003 020f 	and.w	r2, r3, #15
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	1a9b      	subs	r3, r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	3338      	adds	r3, #56	; 0x38
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2201      	movs	r2, #1
 8001e54:	705a      	strb	r2, [r3, #1]
 8001e56:	e00f      	b.n	8001e78 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	f003 020f 	and.w	r2, r3, #15
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3304      	adds	r3, #4
 8001e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_PCD_EP_Close+0x6e>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e00e      	b.n	8001eb0 <HAL_PCD_EP_Close+0x8c>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68f9      	ldr	r1, [r7, #12]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f002 f811 	bl	8003ec8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ec8:	7afb      	ldrb	r3, [r7, #11]
 8001eca:	f003 020f 	and.w	r2, r3, #15
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4413      	add	r3, r2
 8001ede:	3304      	adds	r3, #4
 8001ee0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001efa:	7afb      	ldrb	r3, [r7, #11]
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d102      	bne.n	8001f14 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d109      	bne.n	8001f32 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	6979      	ldr	r1, [r7, #20]
 8001f2c:	f002 faec 	bl	8004508 <USB_EP0StartXfer>
 8001f30:	e008      	b.n	8001f44 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	6979      	ldr	r1, [r7, #20]
 8001f40:	f002 f89e 	bl	8004080 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	f003 020f 	and.w	r2, r3, #15
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f70:	681b      	ldr	r3, [r3, #0]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	f003 020f 	and.w	r2, r3, #15
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	3338      	adds	r3, #56	; 0x38
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fbe:	7afb      	ldrb	r3, [r7, #11]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d102      	bne.n	8001fd8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fd8:	7afb      	ldrb	r3, [r7, #11]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	6979      	ldr	r1, [r7, #20]
 8001ff0:	f002 fa8a 	bl	8004508 <USB_EP0StartXfer>
 8001ff4:	e008      	b.n	8002008 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	6979      	ldr	r1, [r7, #20]
 8002004:	f002 f83c 	bl	8004080 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f003 020f 	and.w	r2, r3, #15
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	d901      	bls.n	8002030 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e050      	b.n	80020d2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da0f      	bge.n	8002058 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 020f 	and.w	r2, r3, #15
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	3338      	adds	r3, #56	; 0x38
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	705a      	strb	r2, [r3, #1]
 8002056:	e00d      	b.n	8002074 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	3304      	adds	r3, #4
 800206c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	b2da      	uxtb	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_PCD_EP_SetStall+0x82>
 8002090:	2302      	movs	r3, #2
 8002092:	e01e      	b.n	80020d2 <HAL_PCD_EP_SetStall+0xc0>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68f9      	ldr	r1, [r7, #12]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f002 fc19 	bl	80048da <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10a      	bne.n	80020c8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	b2d9      	uxtb	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020c2:	461a      	mov	r2, r3
 80020c4:	f002 fe0a 	bl	8004cdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020e6:	78fb      	ldrb	r3, [r7, #3]
 80020e8:	f003 020f 	and.w	r2, r3, #15
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d901      	bls.n	80020f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e042      	b.n	800217e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da0f      	bge.n	8002120 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	f003 020f 	and.w	r2, r3, #15
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	3338      	adds	r3, #56	; 0x38
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	3304      	adds	r3, #4
 8002116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	705a      	strb	r2, [r3, #1]
 800211e:	e00f      	b.n	8002140 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 020f 	and.w	r2, r3, #15
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	3304      	adds	r3, #4
 8002138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	b2da      	uxtb	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_PCD_EP_ClrStall+0x86>
 800215c:	2302      	movs	r3, #2
 800215e:	e00e      	b.n	800217e <HAL_PCD_EP_ClrStall+0xa4>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68f9      	ldr	r1, [r7, #12]
 800216e:	4618      	mov	r0, r3
 8002170:	f002 fc21 	bl	80049b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b08a      	sub	sp, #40	; 0x28
 800218a:	af02      	add	r7, sp, #8
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	3338      	adds	r3, #56	; 0x38
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	3304      	adds	r3, #4
 80021ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d901      	bls.n	80021be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e06c      	b.n	8002298 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d902      	bls.n	80021da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3303      	adds	r3, #3
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021e2:	e02b      	b.n	800223c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d902      	bls.n	8002200 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	3303      	adds	r3, #3
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	68d9      	ldr	r1, [r3, #12]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002218:	b2db      	uxtb	r3, r3
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	4603      	mov	r3, r0
 800221e:	6978      	ldr	r0, [r7, #20]
 8002220:	f002 fac5 	bl	80047ae <USB_WritePacket>

    ep->xfer_buff  += len;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	441a      	add	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	699a      	ldr	r2, [r3, #24]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	441a      	add	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4413      	add	r3, r2
 8002244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	b29b      	uxth	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	429a      	cmp	r2, r3
 8002250:	d809      	bhi.n	8002266 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800225a:	429a      	cmp	r2, r3
 800225c:	d203      	bcs.n	8002266 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1be      	bne.n	80021e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	429a      	cmp	r2, r3
 8002270:	d811      	bhi.n	8002296 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	2201      	movs	r2, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	43db      	mvns	r3, r3
 800228c:	6939      	ldr	r1, [r7, #16]
 800228e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002292:	4013      	ands	r3, r2
 8002294:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3720      	adds	r7, #32
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	333c      	adds	r3, #60	; 0x3c
 80022b8:	3304      	adds	r3, #4
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	f040 80a0 	bne.w	8002418 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d015      	beq.n	800230e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4a72      	ldr	r2, [pc, #456]	; (80024b0 <PCD_EP_OutXfrComplete_int+0x210>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	f240 80dd 	bls.w	80024a6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80d7 	beq.w	80024a6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002304:	461a      	mov	r2, r3
 8002306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800230a:	6093      	str	r3, [r2, #8]
 800230c:	e0cb      	b.n	80024a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002324:	461a      	mov	r2, r3
 8002326:	2320      	movs	r3, #32
 8002328:	6093      	str	r3, [r2, #8]
 800232a:	e0bc      	b.n	80024a6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 80b7 	bne.w	80024a6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a5d      	ldr	r2, [pc, #372]	; (80024b0 <PCD_EP_OutXfrComplete_int+0x210>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d90f      	bls.n	8002360 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002356:	461a      	mov	r2, r3
 8002358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800235c:	6093      	str	r3, [r2, #8]
 800235e:	e0a2      	b.n	80024a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002372:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	0159      	lsls	r1, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	440b      	add	r3, r1
 800237c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002386:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4403      	add	r3, r0
 8002396:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800239a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023ae:	6819      	ldr	r1, [r3, #0]
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4403      	add	r3, r0
 80023be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4419      	add	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4403      	add	r3, r0
 80023d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023d8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d114      	bne.n	800240a <PCD_EP_OutXfrComplete_int+0x16a>
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d108      	bne.n	800240a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002402:	461a      	mov	r2, r3
 8002404:	2101      	movs	r1, #1
 8002406:	f002 fc69 	bl	8004cdc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	4619      	mov	r1, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f004 fbef 	bl	8006bf4 <HAL_PCD_DataOutStageCallback>
 8002416:	e046      	b.n	80024a6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4a26      	ldr	r2, [pc, #152]	; (80024b4 <PCD_EP_OutXfrComplete_int+0x214>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d124      	bne.n	800246a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002436:	461a      	mov	r2, r3
 8002438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800243c:	6093      	str	r3, [r2, #8]
 800243e:	e032      	b.n	80024a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4413      	add	r3, r2
 8002452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002456:	461a      	mov	r2, r3
 8002458:	2320      	movs	r3, #32
 800245a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f004 fbc6 	bl	8006bf4 <HAL_PCD_DataOutStageCallback>
 8002468:	e01d      	b.n	80024a6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d114      	bne.n	800249a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d108      	bne.n	800249a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002492:	461a      	mov	r2, r3
 8002494:	2100      	movs	r1, #0
 8002496:	f002 fc21 	bl	8004cdc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	4619      	mov	r1, r3
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f004 fba7 	bl	8006bf4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	4f54300a 	.word	0x4f54300a
 80024b4:	4f54310a 	.word	0x4f54310a

080024b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	333c      	adds	r3, #60	; 0x3c
 80024d0:	3304      	adds	r3, #4
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a15      	ldr	r2, [pc, #84]	; (8002540 <PCD_EP_OutSetupPacket_int+0x88>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d90e      	bls.n	800250c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002504:	461a      	mov	r2, r3
 8002506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800250a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f004 fb5f 	bl	8006bd0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <PCD_EP_OutSetupPacket_int+0x88>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d90c      	bls.n	8002534 <PCD_EP_OutSetupPacket_int+0x7c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d108      	bne.n	8002534 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800252c:	461a      	mov	r2, r3
 800252e:	2101      	movs	r1, #1
 8002530:	f002 fbd4 	bl	8004cdc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	4f54300a 	.word	0x4f54300a

08002544 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	70fb      	strb	r3, [r7, #3]
 8002550:	4613      	mov	r3, r2
 8002552:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d107      	bne.n	8002572 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002562:	883b      	ldrh	r3, [r7, #0]
 8002564:	0419      	lsls	r1, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	430a      	orrs	r2, r1
 800256e:	629a      	str	r2, [r3, #40]	; 0x28
 8002570:	e028      	b.n	80025c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	4413      	add	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]
 8002584:	e00d      	b.n	80025a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	3340      	adds	r3, #64	; 0x40
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	4413      	add	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	3301      	adds	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d3ec      	bcc.n	8002586 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025ac:	883b      	ldrh	r3, [r7, #0]
 80025ae:	0418      	lsls	r0, r3, #16
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6819      	ldr	r1, [r3, #0]
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	4302      	orrs	r2, r0
 80025bc:	3340      	adds	r3, #64	; 0x40
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e264      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d075      	beq.n	8002716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262a:	4ba3      	ldr	r3, [pc, #652]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b04      	cmp	r3, #4
 8002634:	d00c      	beq.n	8002650 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002636:	4ba0      	ldr	r3, [pc, #640]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263e:	2b08      	cmp	r3, #8
 8002640:	d112      	bne.n	8002668 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002642:	4b9d      	ldr	r3, [pc, #628]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800264e:	d10b      	bne.n	8002668 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002650:	4b99      	ldr	r3, [pc, #612]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d05b      	beq.n	8002714 <HAL_RCC_OscConfig+0x108>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d157      	bne.n	8002714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e23f      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002670:	d106      	bne.n	8002680 <HAL_RCC_OscConfig+0x74>
 8002672:	4b91      	ldr	r3, [pc, #580]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a90      	ldr	r2, [pc, #576]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e01d      	b.n	80026bc <HAL_RCC_OscConfig+0xb0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x98>
 800268a:	4b8b      	ldr	r3, [pc, #556]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a8a      	ldr	r2, [pc, #552]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b88      	ldr	r3, [pc, #544]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a87      	ldr	r2, [pc, #540]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0xb0>
 80026a4:	4b84      	ldr	r3, [pc, #528]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a83      	ldr	r2, [pc, #524]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b81      	ldr	r3, [pc, #516]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a80      	ldr	r2, [pc, #512]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 80026b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe fb28 	bl	8000d18 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026cc:	f7fe fb24 	bl	8000d18 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e204      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b76      	ldr	r3, [pc, #472]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0xc0>
 80026ea:	e014      	b.n	8002716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fb14 	bl	8000d18 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f4:	f7fe fb10 	bl	8000d18 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	; 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e1f0      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	4b6c      	ldr	r3, [pc, #432]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0xe8>
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d063      	beq.n	80027ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002722:	4b65      	ldr	r3, [pc, #404]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272e:	4b62      	ldr	r3, [pc, #392]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002736:	2b08      	cmp	r3, #8
 8002738:	d11c      	bne.n	8002774 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b5f      	ldr	r3, [pc, #380]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d116      	bne.n	8002774 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	4b5c      	ldr	r3, [pc, #368]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_RCC_OscConfig+0x152>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e1c4      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	4b56      	ldr	r3, [pc, #344]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4952      	ldr	r1, [pc, #328]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002772:	e03a      	b.n	80027ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277c:	4b4f      	ldr	r3, [pc, #316]	; (80028bc <HAL_RCC_OscConfig+0x2b0>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7fe fac9 	bl	8000d18 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278a:	f7fe fac5 	bl	8000d18 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e1a5      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	4b46      	ldr	r3, [pc, #280]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b43      	ldr	r3, [pc, #268]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4940      	ldr	r1, [pc, #256]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
 80027bc:	e015      	b.n	80027ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027be:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <HAL_RCC_OscConfig+0x2b0>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe faa8 	bl	8000d18 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027cc:	f7fe faa4 	bl	8000d18 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e184      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d030      	beq.n	8002858 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fe:	4b30      	ldr	r3, [pc, #192]	; (80028c0 <HAL_RCC_OscConfig+0x2b4>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe fa88 	bl	8000d18 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280c:	f7fe fa84 	bl	8000d18 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e164      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x200>
 800282a:	e015      	b.n	8002858 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282c:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCC_OscConfig+0x2b4>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7fe fa71 	bl	8000d18 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283a:	f7fe fa6d 	bl	8000d18 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e14d      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 800284e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f0      	bne.n	800283a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80a0 	beq.w	80029a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002892:	2301      	movs	r3, #1
 8002894:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_OscConfig+0x2b8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d121      	bne.n	80028e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <HAL_RCC_OscConfig+0x2b8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a07      	ldr	r2, [pc, #28]	; (80028c4 <HAL_RCC_OscConfig+0x2b8>)
 80028a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ae:	f7fe fa33 	bl	8000d18 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	e011      	b.n	80028da <HAL_RCC_OscConfig+0x2ce>
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800
 80028bc:	42470000 	.word	0x42470000
 80028c0:	42470e80 	.word	0x42470e80
 80028c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c8:	f7fe fa26 	bl	8000d18 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e106      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028da:	4b85      	ldr	r3, [pc, #532]	; (8002af0 <HAL_RCC_OscConfig+0x4e4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d106      	bne.n	80028fc <HAL_RCC_OscConfig+0x2f0>
 80028ee:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f2:	4a80      	ldr	r2, [pc, #512]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6713      	str	r3, [r2, #112]	; 0x70
 80028fa:	e01c      	b.n	8002936 <HAL_RCC_OscConfig+0x32a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b05      	cmp	r3, #5
 8002902:	d10c      	bne.n	800291e <HAL_RCC_OscConfig+0x312>
 8002904:	4b7b      	ldr	r3, [pc, #492]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002908:	4a7a      	ldr	r2, [pc, #488]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 800290a:	f043 0304 	orr.w	r3, r3, #4
 800290e:	6713      	str	r3, [r2, #112]	; 0x70
 8002910:	4b78      	ldr	r3, [pc, #480]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	4a77      	ldr	r2, [pc, #476]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6713      	str	r3, [r2, #112]	; 0x70
 800291c:	e00b      	b.n	8002936 <HAL_RCC_OscConfig+0x32a>
 800291e:	4b75      	ldr	r3, [pc, #468]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	4a74      	ldr	r2, [pc, #464]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6713      	str	r3, [r2, #112]	; 0x70
 800292a:	4b72      	ldr	r3, [pc, #456]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	4a71      	ldr	r2, [pc, #452]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 8002930:	f023 0304 	bic.w	r3, r3, #4
 8002934:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d015      	beq.n	800296a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293e:	f7fe f9eb 	bl	8000d18 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002944:	e00a      	b.n	800295c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fe f9e7 	bl	8000d18 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f241 3288 	movw	r2, #5000	; 0x1388
 8002954:	4293      	cmp	r3, r2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e0c5      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295c:	4b65      	ldr	r3, [pc, #404]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0ee      	beq.n	8002946 <HAL_RCC_OscConfig+0x33a>
 8002968:	e014      	b.n	8002994 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296a:	f7fe f9d5 	bl	8000d18 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fe f9d1 	bl	8000d18 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e0af      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002988:	4b5a      	ldr	r3, [pc, #360]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1ee      	bne.n	8002972 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d105      	bne.n	80029a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299a:	4b56      	ldr	r3, [pc, #344]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	4a55      	ldr	r2, [pc, #340]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 80029a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 809b 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029b0:	4b50      	ldr	r3, [pc, #320]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d05c      	beq.n	8002a76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d141      	bne.n	8002a48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c4:	4b4c      	ldr	r3, [pc, #304]	; (8002af8 <HAL_RCC_OscConfig+0x4ec>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7fe f9a5 	bl	8000d18 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d2:	f7fe f9a1 	bl	8000d18 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e081      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e4:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f0      	bne.n	80029d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	019b      	lsls	r3, r3, #6
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	085b      	lsrs	r3, r3, #1
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	041b      	lsls	r3, r3, #16
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	061b      	lsls	r3, r3, #24
 8002a14:	4937      	ldr	r1, [pc, #220]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a1a:	4b37      	ldr	r3, [pc, #220]	; (8002af8 <HAL_RCC_OscConfig+0x4ec>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe f97a 	bl	8000d18 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fe f976 	bl	8000d18 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e056      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3a:	4b2e      	ldr	r3, [pc, #184]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x41c>
 8002a46:	e04e      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_RCC_OscConfig+0x4ec>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7fe f963 	bl	8000d18 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a56:	f7fe f95f 	bl	8000d18 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e03f      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a68:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x44a>
 8002a74:	e037      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e032      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a82:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <HAL_RCC_OscConfig+0x4e8>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d028      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d121      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d11a      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ab8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d111      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	3b01      	subs	r3, #1
 8002acc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40007000 	.word	0x40007000
 8002af4:	40023800 	.word	0x40023800
 8002af8:	42470060 	.word	0x42470060

08002afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0cc      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b10:	4b68      	ldr	r3, [pc, #416]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d90c      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b65      	ldr	r3, [pc, #404]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b63      	ldr	r3, [pc, #396]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0b8      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b50:	4b59      	ldr	r3, [pc, #356]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4a58      	ldr	r2, [pc, #352]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b68:	4b53      	ldr	r3, [pc, #332]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	494d      	ldr	r1, [pc, #308]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d044      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d119      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e07f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d003      	beq.n	8002bba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bba:	4b3f      	ldr	r3, [pc, #252]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bca:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e067      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f023 0203 	bic.w	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4934      	ldr	r1, [pc, #208]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bec:	f7fe f894 	bl	8000d18 <HAL_GetTick>
 8002bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf4:	f7fe f890 	bl	8000d18 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e04f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 020c 	and.w	r2, r3, #12
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d1eb      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d20c      	bcs.n	8002c44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e032      	b.n	8002caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4916      	ldr	r1, [pc, #88]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	490e      	ldr	r1, [pc, #56]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c82:	f000 f821 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002c86:	4602      	mov	r2, r0
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	490a      	ldr	r1, [pc, #40]	; (8002cbc <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	5ccb      	ldrb	r3, [r1, r3]
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fff4 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023c00 	.word	0x40023c00
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	08007a7c 	.word	0x08007a7c
 8002cc0:	20000000 	.word	0x20000000
 8002cc4:	20000004 	.word	0x20000004

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	607b      	str	r3, [r7, #4]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce0:	4b67      	ldr	r3, [pc, #412]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d00d      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x40>
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	f200 80bd 	bhi.w	8002e6c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x34>
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cfa:	e0b7      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b61      	ldr	r3, [pc, #388]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cfe:	60bb      	str	r3, [r7, #8]
       break;
 8002d00:	e0b7      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d02:	4b61      	ldr	r3, [pc, #388]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d04:	60bb      	str	r3, [r7, #8]
      break;
 8002d06:	e0b4      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d08:	4b5d      	ldr	r3, [pc, #372]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d12:	4b5b      	ldr	r3, [pc, #364]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d04d      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1e:	4b58      	ldr	r3, [pc, #352]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	461a      	mov	r2, r3
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	ea02 0800 	and.w	r8, r2, r0
 8002d36:	ea03 0901 	and.w	r9, r3, r1
 8002d3a:	4640      	mov	r0, r8
 8002d3c:	4649      	mov	r1, r9
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	014b      	lsls	r3, r1, #5
 8002d48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d4c:	0142      	lsls	r2, r0, #5
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	ebb0 0008 	subs.w	r0, r0, r8
 8002d56:	eb61 0109 	sbc.w	r1, r1, r9
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	018b      	lsls	r3, r1, #6
 8002d64:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d68:	0182      	lsls	r2, r0, #6
 8002d6a:	1a12      	subs	r2, r2, r0
 8002d6c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d70:	f04f 0000 	mov.w	r0, #0
 8002d74:	f04f 0100 	mov.w	r1, #0
 8002d78:	00d9      	lsls	r1, r3, #3
 8002d7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d7e:	00d0      	lsls	r0, r2, #3
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	eb12 0208 	adds.w	r2, r2, r8
 8002d88:	eb43 0309 	adc.w	r3, r3, r9
 8002d8c:	f04f 0000 	mov.w	r0, #0
 8002d90:	f04f 0100 	mov.w	r1, #0
 8002d94:	0259      	lsls	r1, r3, #9
 8002d96:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d9a:	0250      	lsls	r0, r2, #9
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	461a      	mov	r2, r3
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	f7fd fa68 	bl	8000280 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e04a      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dba:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	099b      	lsrs	r3, r3, #6
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dca:	f04f 0100 	mov.w	r1, #0
 8002dce:	ea02 0400 	and.w	r4, r2, r0
 8002dd2:	ea03 0501 	and.w	r5, r3, r1
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	4629      	mov	r1, r5
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	014b      	lsls	r3, r1, #5
 8002de4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002de8:	0142      	lsls	r2, r0, #5
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	1b00      	subs	r0, r0, r4
 8002df0:	eb61 0105 	sbc.w	r1, r1, r5
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	018b      	lsls	r3, r1, #6
 8002dfe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e02:	0182      	lsls	r2, r0, #6
 8002e04:	1a12      	subs	r2, r2, r0
 8002e06:	eb63 0301 	sbc.w	r3, r3, r1
 8002e0a:	f04f 0000 	mov.w	r0, #0
 8002e0e:	f04f 0100 	mov.w	r1, #0
 8002e12:	00d9      	lsls	r1, r3, #3
 8002e14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e18:	00d0      	lsls	r0, r2, #3
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	1912      	adds	r2, r2, r4
 8002e20:	eb45 0303 	adc.w	r3, r5, r3
 8002e24:	f04f 0000 	mov.w	r0, #0
 8002e28:	f04f 0100 	mov.w	r1, #0
 8002e2c:	0299      	lsls	r1, r3, #10
 8002e2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e32:	0290      	lsls	r0, r2, #10
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	f7fd fa1c 	bl	8000280 <__aeabi_uldivmod>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	60bb      	str	r3, [r7, #8]
      break;
 8002e6a:	e002      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e6e:	60bb      	str	r3, [r7, #8]
      break;
 8002e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e72:	68bb      	ldr	r3, [r7, #8]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	007a1200 	.word	0x007a1200

08002e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000000 	.word	0x20000000

08002ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e07b      	b.n	8002fae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d108      	bne.n	8002ed0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ec6:	d009      	beq.n	8002edc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	61da      	str	r2, [r3, #28]
 8002ece:	e005      	b.n	8002edc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd fdba 	bl	8000a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	ea42 0103 	orr.w	r1, r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	f003 0104 	and.w	r1, r3, #4
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	f003 0210 	and.w	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b088      	sub	sp, #32
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_SPI_Transmit+0x22>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e126      	b.n	8003226 <HAL_SPI_Transmit+0x270>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fe0:	f7fd fe9a 	bl	8000d18 <HAL_GetTick>
 8002fe4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fe6:	88fb      	ldrh	r3, [r7, #6]
 8002fe8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d002      	beq.n	8002ffc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ffa:	e10b      	b.n	8003214 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_SPI_Transmit+0x52>
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800300c:	e102      	b.n	8003214 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2203      	movs	r2, #3
 8003012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	88fa      	ldrh	r2, [r7, #6]
 800302c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003054:	d10f      	bne.n	8003076 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003064:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003074:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d007      	beq.n	8003094 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003092:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800309c:	d14b      	bne.n	8003136 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_SPI_Transmit+0xf6>
 80030a6:	8afb      	ldrh	r3, [r7, #22]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d13e      	bne.n	800312a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	881a      	ldrh	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	1c9a      	adds	r2, r3, #2
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030d0:	e02b      	b.n	800312a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d112      	bne.n	8003106 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	1c9a      	adds	r2, r3, #2
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	86da      	strh	r2, [r3, #54]	; 0x36
 8003104:	e011      	b.n	800312a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003106:	f7fd fe07 	bl	8000d18 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d803      	bhi.n	800311e <HAL_SPI_Transmit+0x168>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d102      	bne.n	8003124 <HAL_SPI_Transmit+0x16e>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003128:	e074      	b.n	8003214 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1ce      	bne.n	80030d2 <HAL_SPI_Transmit+0x11c>
 8003134:	e04c      	b.n	80031d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_SPI_Transmit+0x18e>
 800313e:	8afb      	ldrh	r3, [r7, #22]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d140      	bne.n	80031c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	330c      	adds	r3, #12
 800314e:	7812      	ldrb	r2, [r2, #0]
 8003150:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800316a:	e02c      	b.n	80031c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b02      	cmp	r3, #2
 8003178:	d113      	bne.n	80031a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	330c      	adds	r3, #12
 8003184:	7812      	ldrb	r2, [r2, #0]
 8003186:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	86da      	strh	r2, [r3, #54]	; 0x36
 80031a0:	e011      	b.n	80031c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031a2:	f7fd fdb9 	bl	8000d18 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d803      	bhi.n	80031ba <HAL_SPI_Transmit+0x204>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d102      	bne.n	80031c0 <HAL_SPI_Transmit+0x20a>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031c4:	e026      	b.n	8003214 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1cd      	bne.n	800316c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	6839      	ldr	r1, [r7, #0]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 fa55 	bl	8003684 <SPI_EndRxTxTransaction>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10a      	bne.n	8003204 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e000      	b.n	8003214 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003212:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003224:	7ffb      	ldrb	r3, [r7, #31]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b08c      	sub	sp, #48	; 0x30
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800323c:	2301      	movs	r3, #1
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_SPI_TransmitReceive+0x26>
 8003250:	2302      	movs	r3, #2
 8003252:	e18a      	b.n	800356a <HAL_SPI_TransmitReceive+0x33c>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800325c:	f7fd fd5c 	bl	8000d18 <HAL_GetTick>
 8003260:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003276:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800327a:	2b01      	cmp	r3, #1
 800327c:	d00f      	beq.n	800329e <HAL_SPI_TransmitReceive+0x70>
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003284:	d107      	bne.n	8003296 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d103      	bne.n	8003296 <HAL_SPI_TransmitReceive+0x68>
 800328e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003292:	2b04      	cmp	r3, #4
 8003294:	d003      	beq.n	800329e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003296:	2302      	movs	r3, #2
 8003298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800329c:	e15b      	b.n	8003556 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_SPI_TransmitReceive+0x82>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_SPI_TransmitReceive+0x82>
 80032aa:	887b      	ldrh	r3, [r7, #2]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d103      	bne.n	80032b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032b6:	e14e      	b.n	8003556 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d003      	beq.n	80032cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2205      	movs	r2, #5
 80032c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	887a      	ldrh	r2, [r7, #2]
 80032dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	887a      	ldrh	r2, [r7, #2]
 80032e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	887a      	ldrh	r2, [r7, #2]
 80032ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	887a      	ldrh	r2, [r7, #2]
 80032f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d007      	beq.n	8003320 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800331e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003328:	d178      	bne.n	800341c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_SPI_TransmitReceive+0x10a>
 8003332:	8b7b      	ldrh	r3, [r7, #26]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d166      	bne.n	8003406 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	881a      	ldrh	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	1c9a      	adds	r2, r3, #2
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800335c:	e053      	b.n	8003406 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b02      	cmp	r3, #2
 800336a:	d11b      	bne.n	80033a4 <HAL_SPI_TransmitReceive+0x176>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d016      	beq.n	80033a4 <HAL_SPI_TransmitReceive+0x176>
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d113      	bne.n	80033a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	881a      	ldrh	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	1c9a      	adds	r2, r3, #2
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d119      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x1b8>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d014      	beq.n	80033e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	b292      	uxth	r2, r2
 80033c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	1c9a      	adds	r2, r3, #2
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033e2:	2301      	movs	r3, #1
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033e6:	f7fd fc97 	bl	8000d18 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d807      	bhi.n	8003406 <HAL_SPI_TransmitReceive+0x1d8>
 80033f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d003      	beq.n	8003406 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003404:	e0a7      	b.n	8003556 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1a6      	bne.n	800335e <HAL_SPI_TransmitReceive+0x130>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1a1      	bne.n	800335e <HAL_SPI_TransmitReceive+0x130>
 800341a:	e07c      	b.n	8003516 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_SPI_TransmitReceive+0x1fc>
 8003424:	8b7b      	ldrh	r3, [r7, #26]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d16b      	bne.n	8003502 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	330c      	adds	r3, #12
 8003434:	7812      	ldrb	r2, [r2, #0]
 8003436:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003450:	e057      	b.n	8003502 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b02      	cmp	r3, #2
 800345e:	d11c      	bne.n	800349a <HAL_SPI_TransmitReceive+0x26c>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d017      	beq.n	800349a <HAL_SPI_TransmitReceive+0x26c>
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	2b01      	cmp	r3, #1
 800346e:	d114      	bne.n	800349a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	7812      	ldrb	r2, [r2, #0]
 800347c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d119      	bne.n	80034dc <HAL_SPI_TransmitReceive+0x2ae>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d014      	beq.n	80034dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034d8:	2301      	movs	r3, #1
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034dc:	f7fd fc1c 	bl	8000d18 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d803      	bhi.n	80034f4 <HAL_SPI_TransmitReceive+0x2c6>
 80034ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f2:	d102      	bne.n	80034fa <HAL_SPI_TransmitReceive+0x2cc>
 80034f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003500:	e029      	b.n	8003556 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1a2      	bne.n	8003452 <HAL_SPI_TransmitReceive+0x224>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d19d      	bne.n	8003452 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003518:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f8b2 	bl	8003684 <SPI_EndRxTxTransaction>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003532:	e010      	b.n	8003556 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	e000      	b.n	8003556 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003554:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003566:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800356a:	4618      	mov	r0, r3
 800356c:	3730      	adds	r7, #48	; 0x30
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003584:	f7fd fbc8 	bl	8000d18 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	4413      	add	r3, r2
 8003592:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003594:	f7fd fbc0 	bl	8000d18 <HAL_GetTick>
 8003598:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800359a:	4b39      	ldr	r3, [pc, #228]	; (8003680 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	015b      	lsls	r3, r3, #5
 80035a0:	0d1b      	lsrs	r3, r3, #20
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	fb02 f303 	mul.w	r3, r2, r3
 80035a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035aa:	e054      	b.n	8003656 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	d050      	beq.n	8003656 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035b4:	f7fd fbb0 	bl	8000d18 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d902      	bls.n	80035ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d13d      	bne.n	8003646 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035e2:	d111      	bne.n	8003608 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ec:	d004      	beq.n	80035f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f6:	d107      	bne.n	8003608 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003606:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003610:	d10f      	bne.n	8003632 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003630:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e017      	b.n	8003676 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	3b01      	subs	r3, #1
 8003654:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4013      	ands	r3, r2
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	429a      	cmp	r2, r3
 8003664:	bf0c      	ite	eq
 8003666:	2301      	moveq	r3, #1
 8003668:	2300      	movne	r3, #0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	429a      	cmp	r2, r3
 8003672:	d19b      	bne.n	80035ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3720      	adds	r7, #32
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000000 	.word	0x20000000

08003684 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <SPI_EndRxTxTransaction+0x7c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <SPI_EndRxTxTransaction+0x80>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	0d5b      	lsrs	r3, r3, #21
 800369c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036a0:	fb02 f303 	mul.w	r3, r2, r3
 80036a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ae:	d112      	bne.n	80036d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2180      	movs	r1, #128	; 0x80
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7ff ff5a 	bl	8003574 <SPI_WaitFlagStateUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	f043 0220 	orr.w	r2, r3, #32
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e00f      	b.n	80036f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	3b01      	subs	r3, #1
 80036e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ec:	2b80      	cmp	r3, #128	; 0x80
 80036ee:	d0f2      	beq.n	80036d6 <SPI_EndRxTxTransaction+0x52>
 80036f0:	e000      	b.n	80036f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80036f2:	bf00      	nop
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000000 	.word	0x20000000
 8003704:	165e9f81 	.word	0x165e9f81

08003708 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003708:	b084      	sub	sp, #16
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	f107 001c 	add.w	r0, r7, #28
 8003716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	2b01      	cmp	r3, #1
 800371e:	d122      	bne.n	8003766 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800374a:	2b01      	cmp	r3, #1
 800374c:	d105      	bne.n	800375a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f001 fb1c 	bl	8004d98 <USB_CoreReset>
 8003760:	4603      	mov	r3, r0
 8003762:	73fb      	strb	r3, [r7, #15]
 8003764:	e01a      	b.n	800379c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f001 fb10 	bl	8004d98 <USB_CoreReset>
 8003778:	4603      	mov	r3, r0
 800377a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800377c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
 800378e:	e005      	b.n	800379c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d10b      	bne.n	80037ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f043 0206 	orr.w	r2, r3, #6
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f043 0220 	orr.w	r2, r3, #32
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037c6:	b004      	add	sp, #16
 80037c8:	4770      	bx	lr
	...

080037cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	4613      	mov	r3, r2
 80037d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d165      	bne.n	80038ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4a41      	ldr	r2, [pc, #260]	; (80038e8 <USB_SetTurnaroundTime+0x11c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d906      	bls.n	80037f6 <USB_SetTurnaroundTime+0x2a>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4a40      	ldr	r2, [pc, #256]	; (80038ec <USB_SetTurnaroundTime+0x120>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d202      	bcs.n	80037f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80037f0:	230f      	movs	r3, #15
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	e062      	b.n	80038bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4a3c      	ldr	r2, [pc, #240]	; (80038ec <USB_SetTurnaroundTime+0x120>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d306      	bcc.n	800380c <USB_SetTurnaroundTime+0x40>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4a3b      	ldr	r2, [pc, #236]	; (80038f0 <USB_SetTurnaroundTime+0x124>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d202      	bcs.n	800380c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003806:	230e      	movs	r3, #14
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	e057      	b.n	80038bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4a38      	ldr	r2, [pc, #224]	; (80038f0 <USB_SetTurnaroundTime+0x124>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d306      	bcc.n	8003822 <USB_SetTurnaroundTime+0x56>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4a37      	ldr	r2, [pc, #220]	; (80038f4 <USB_SetTurnaroundTime+0x128>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d202      	bcs.n	8003822 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800381c:	230d      	movs	r3, #13
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e04c      	b.n	80038bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	4a33      	ldr	r2, [pc, #204]	; (80038f4 <USB_SetTurnaroundTime+0x128>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d306      	bcc.n	8003838 <USB_SetTurnaroundTime+0x6c>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4a32      	ldr	r2, [pc, #200]	; (80038f8 <USB_SetTurnaroundTime+0x12c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d802      	bhi.n	8003838 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003832:	230c      	movs	r3, #12
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	e041      	b.n	80038bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4a2f      	ldr	r2, [pc, #188]	; (80038f8 <USB_SetTurnaroundTime+0x12c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d906      	bls.n	800384e <USB_SetTurnaroundTime+0x82>
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4a2e      	ldr	r2, [pc, #184]	; (80038fc <USB_SetTurnaroundTime+0x130>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d802      	bhi.n	800384e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003848:	230b      	movs	r3, #11
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	e036      	b.n	80038bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <USB_SetTurnaroundTime+0x130>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d906      	bls.n	8003864 <USB_SetTurnaroundTime+0x98>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4a29      	ldr	r2, [pc, #164]	; (8003900 <USB_SetTurnaroundTime+0x134>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d802      	bhi.n	8003864 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800385e:	230a      	movs	r3, #10
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	e02b      	b.n	80038bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4a26      	ldr	r2, [pc, #152]	; (8003900 <USB_SetTurnaroundTime+0x134>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d906      	bls.n	800387a <USB_SetTurnaroundTime+0xae>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4a25      	ldr	r2, [pc, #148]	; (8003904 <USB_SetTurnaroundTime+0x138>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d202      	bcs.n	800387a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003874:	2309      	movs	r3, #9
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	e020      	b.n	80038bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4a21      	ldr	r2, [pc, #132]	; (8003904 <USB_SetTurnaroundTime+0x138>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d306      	bcc.n	8003890 <USB_SetTurnaroundTime+0xc4>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	4a20      	ldr	r2, [pc, #128]	; (8003908 <USB_SetTurnaroundTime+0x13c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d802      	bhi.n	8003890 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800388a:	2308      	movs	r3, #8
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	e015      	b.n	80038bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <USB_SetTurnaroundTime+0x13c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d906      	bls.n	80038a6 <USB_SetTurnaroundTime+0xda>
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	4a1c      	ldr	r2, [pc, #112]	; (800390c <USB_SetTurnaroundTime+0x140>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d202      	bcs.n	80038a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80038a0:	2307      	movs	r3, #7
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	e00a      	b.n	80038bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80038a6:	2306      	movs	r3, #6
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	e007      	b.n	80038bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d102      	bne.n	80038b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80038b2:	2309      	movs	r3, #9
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e001      	b.n	80038bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80038b8:	2309      	movs	r3, #9
 80038ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	029b      	lsls	r3, r3, #10
 80038d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80038d4:	431a      	orrs	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	00d8acbf 	.word	0x00d8acbf
 80038ec:	00e4e1c0 	.word	0x00e4e1c0
 80038f0:	00f42400 	.word	0x00f42400
 80038f4:	01067380 	.word	0x01067380
 80038f8:	011a499f 	.word	0x011a499f
 80038fc:	01312cff 	.word	0x01312cff
 8003900:	014ca43f 	.word	0x014ca43f
 8003904:	016e3600 	.word	0x016e3600
 8003908:	01a6ab1f 	.word	0x01a6ab1f
 800390c:	01e84800 	.word	0x01e84800

08003910 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f043 0201 	orr.w	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f023 0201 	bic.w	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d115      	bne.n	80039a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003982:	2001      	movs	r0, #1
 8003984:	f7fd f9d4 	bl	8000d30 <HAL_Delay>
      ms++;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3301      	adds	r3, #1
 800398c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f001 f972 	bl	8004c78 <USB_GetMode>
 8003994:	4603      	mov	r3, r0
 8003996:	2b01      	cmp	r3, #1
 8003998:	d01e      	beq.n	80039d8 <USB_SetCurrentMode+0x84>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b31      	cmp	r3, #49	; 0x31
 800399e:	d9f0      	bls.n	8003982 <USB_SetCurrentMode+0x2e>
 80039a0:	e01a      	b.n	80039d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d115      	bne.n	80039d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039b4:	2001      	movs	r0, #1
 80039b6:	f7fd f9bb 	bl	8000d30 <HAL_Delay>
      ms++;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3301      	adds	r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f001 f959 	bl	8004c78 <USB_GetMode>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <USB_SetCurrentMode+0x84>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b31      	cmp	r3, #49	; 0x31
 80039d0:	d9f0      	bls.n	80039b4 <USB_SetCurrentMode+0x60>
 80039d2:	e001      	b.n	80039d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e005      	b.n	80039e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b32      	cmp	r3, #50	; 0x32
 80039dc:	d101      	bne.n	80039e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039ec:	b084      	sub	sp, #16
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	e009      	b.n	8003a20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	3340      	adds	r3, #64	; 0x40
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	2200      	movs	r2, #0
 8003a18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b0e      	cmp	r3, #14
 8003a24:	d9f2      	bls.n	8003a0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d11c      	bne.n	8003a66 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a3a:	f043 0302 	orr.w	r3, r3, #2
 8003a3e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38
 8003a64:	e00b      	b.n	8003a7e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a84:	461a      	mov	r2, r3
 8003a86:	2300      	movs	r3, #0
 8003a88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a90:	4619      	mov	r1, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a98:	461a      	mov	r2, r3
 8003a9a:	680b      	ldr	r3, [r1, #0]
 8003a9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d10c      	bne.n	8003abe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003aaa:	2100      	movs	r1, #0
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f945 	bl	8003d3c <USB_SetDevSpeed>
 8003ab2:	e008      	b.n	8003ac6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f940 	bl	8003d3c <USB_SetDevSpeed>
 8003abc:	e003      	b.n	8003ac6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003abe:	2103      	movs	r1, #3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f93b 	bl	8003d3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ac6:	2110      	movs	r1, #16
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f8f3 	bl	8003cb4 <USB_FlushTxFifo>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f90f 	bl	8003cfc <USB_FlushRxFifo>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aee:	461a      	mov	r2, r3
 8003af0:	2300      	movs	r3, #0
 8003af2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afa:	461a      	mov	r2, r3
 8003afc:	2300      	movs	r3, #0
 8003afe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b06:	461a      	mov	r2, r3
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	e043      	b.n	8003b9a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b28:	d118      	bne.n	8003b5c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e013      	b.n	8003b6e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b52:	461a      	mov	r2, r3
 8003b54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e008      	b.n	8003b6e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	3301      	adds	r3, #1
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d3b7      	bcc.n	8003b12 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	e043      	b.n	8003c30 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bbe:	d118      	bne.n	8003bf2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10a      	bne.n	8003bdc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	e013      	b.n	8003c04 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be8:	461a      	mov	r2, r3
 8003bea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	e008      	b.n	8003c04 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfe:	461a      	mov	r2, r3
 8003c00:	2300      	movs	r3, #0
 8003c02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c10:	461a      	mov	r2, r3
 8003c12:	2300      	movs	r3, #0
 8003c14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c22:	461a      	mov	r2, r3
 8003c24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d3b7      	bcc.n	8003ba8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d105      	bne.n	8003c6c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f043 0210 	orr.w	r2, r3, #16
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699a      	ldr	r2, [r3, #24]
 8003c70:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <USB_DevInit+0x2c4>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f043 0208 	orr.w	r2, r3, #8
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d107      	bne.n	8003ca0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c98:	f043 0304 	orr.w	r3, r3, #4
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cac:	b004      	add	sp, #16
 8003cae:	4770      	bx	lr
 8003cb0:	803c3800 	.word	0x803c3800

08003cb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	019b      	lsls	r3, r3, #6
 8003cc6:	f043 0220 	orr.w	r2, r3, #32
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	4a08      	ldr	r2, [pc, #32]	; (8003cf8 <USB_FlushTxFifo+0x44>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e006      	b.n	8003cec <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d0f1      	beq.n	8003cce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	00030d40 	.word	0x00030d40

08003cfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2210      	movs	r2, #16
 8003d0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3301      	adds	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	4a08      	ldr	r2, [pc, #32]	; (8003d38 <USB_FlushRxFifo+0x3c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e006      	b.n	8003d2c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	d0f1      	beq.n	8003d0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	00030d40 	.word	0x00030d40

08003d3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	68f9      	ldr	r1, [r7, #12]
 8003d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b087      	sub	sp, #28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 0306 	and.w	r3, r3, #6
 8003d86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	75fb      	strb	r3, [r7, #23]
 8003d92:	e00a      	b.n	8003daa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d002      	beq.n	8003da0 <USB_GetDevSpeed+0x32>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b06      	cmp	r3, #6
 8003d9e:	d102      	bne.n	8003da6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003da0:	2302      	movs	r3, #2
 8003da2:	75fb      	strb	r3, [r7, #23]
 8003da4:	e001      	b.n	8003daa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003da6:	230f      	movs	r3, #15
 8003da8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	785b      	ldrb	r3, [r3, #1]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d13a      	bne.n	8003e4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	2101      	movs	r1, #1
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	68f9      	ldr	r1, [r7, #12]
 8003dee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d155      	bne.n	8003eb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	78db      	ldrb	r3, [r3, #3]
 8003e26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	059b      	lsls	r3, r3, #22
 8003e2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e30:	4313      	orrs	r3, r2
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	0151      	lsls	r1, r2, #5
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	440a      	add	r2, r1
 8003e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	e036      	b.n	8003eb8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	68f9      	ldr	r1, [r7, #12]
 8003e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d11a      	bne.n	8003eb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	78db      	ldrb	r3, [r3, #3]
 8003e9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	0151      	lsls	r1, r2, #5
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	440a      	add	r2, r1
 8003eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	785b      	ldrb	r3, [r3, #1]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d161      	bne.n	8003fa8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003efa:	d11f      	bne.n	8003f3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	68f9      	ldr	r1, [r7, #12]
 8003f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	2101      	movs	r1, #1
 8003f72:	fa01 f303 	lsl.w	r3, r1, r3
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f80:	4013      	ands	r3, r2
 8003f82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	0159      	lsls	r1, r3, #5
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	440b      	add	r3, r1
 8003f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4b35      	ldr	r3, [pc, #212]	; (8004078 <USB_DeactivateEndpoint+0x1b0>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]
 8003fa6:	e060      	b.n	800406a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fbe:	d11f      	bne.n	8004000 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	0151      	lsls	r1, r2, #5
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	440a      	add	r2, r1
 8003fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fde:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	0151      	lsls	r1, r2, #5
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	440a      	add	r2, r1
 8003ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ffa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ffe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	2101      	movs	r1, #1
 8004012:	fa01 f303 	lsl.w	r3, r1, r3
 8004016:	041b      	lsls	r3, r3, #16
 8004018:	43db      	mvns	r3, r3
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004020:	4013      	ands	r3, r2
 8004022:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	2101      	movs	r1, #1
 8004036:	fa01 f303 	lsl.w	r3, r1, r3
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	43db      	mvns	r3, r3
 800403e:	68f9      	ldr	r1, [r7, #12]
 8004040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004044:	4013      	ands	r3, r2
 8004046:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	0159      	lsls	r1, r3, #5
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	440b      	add	r3, r1
 800405e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004062:	4619      	mov	r1, r3
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <USB_DeactivateEndpoint+0x1b4>)
 8004066:	4013      	ands	r3, r2
 8004068:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	ec337800 	.word	0xec337800
 800407c:	eff37800 	.word	0xeff37800

08004080 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08a      	sub	sp, #40	; 0x28
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	4613      	mov	r3, r2
 800408c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	785b      	ldrb	r3, [r3, #1]
 800409c:	2b01      	cmp	r3, #1
 800409e:	f040 815c 	bne.w	800435a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d132      	bne.n	8004110 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	0151      	lsls	r1, r2, #5
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	440a      	add	r2, r1
 80040c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	0151      	lsls	r1, r2, #5
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	440a      	add	r2, r1
 80040e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	0151      	lsls	r1, r2, #5
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	440a      	add	r2, r1
 8004104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004108:	0cdb      	lsrs	r3, r3, #19
 800410a:	04db      	lsls	r3, r3, #19
 800410c:	6113      	str	r3, [r2, #16]
 800410e:	e074      	b.n	80041fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	0151      	lsls	r1, r2, #5
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	440a      	add	r2, r1
 8004126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412a:	0cdb      	lsrs	r3, r3, #19
 800412c:	04db      	lsls	r3, r3, #19
 800412e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	0151      	lsls	r1, r2, #5
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	440a      	add	r2, r1
 8004146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800414e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004152:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004160:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	6959      	ldr	r1, [r3, #20]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	440b      	add	r3, r1
 800416c:	1e59      	subs	r1, r3, #1
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	fbb1 f3f3 	udiv	r3, r1, r3
 8004176:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004178:	4b9d      	ldr	r3, [pc, #628]	; (80043f0 <USB_EPStartXfer+0x370>)
 800417a:	400b      	ands	r3, r1
 800417c:	69b9      	ldr	r1, [r7, #24]
 800417e:	0148      	lsls	r0, r1, #5
 8004180:	69f9      	ldr	r1, [r7, #28]
 8004182:	4401      	add	r1, r0
 8004184:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004188:	4313      	orrs	r3, r2
 800418a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a2:	69b9      	ldr	r1, [r7, #24]
 80041a4:	0148      	lsls	r0, r1, #5
 80041a6:	69f9      	ldr	r1, [r7, #28]
 80041a8:	4401      	add	r1, r0
 80041aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041ae:	4313      	orrs	r3, r2
 80041b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	78db      	ldrb	r3, [r3, #3]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d11f      	bne.n	80041fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80041d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	0151      	lsls	r1, r2, #5
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	440a      	add	r2, r1
 80041f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d14b      	bne.n	8004298 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d009      	beq.n	800421c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004214:	461a      	mov	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	78db      	ldrb	r3, [r3, #3]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d128      	bne.n	8004276 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d110      	bne.n	8004256 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	0151      	lsls	r1, r2, #5
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	440a      	add	r2, r1
 800424a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800424e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	e00f      	b.n	8004276 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	440a      	add	r2, r1
 800426c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004274:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	440a      	add	r2, r1
 800428c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004290:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	e12f      	b.n	80044f8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	78db      	ldrb	r3, [r3, #3]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d015      	beq.n	80042ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 8117 	beq.w	80044f8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	2101      	movs	r1, #1
 80042dc:	fa01 f303 	lsl.w	r3, r1, r3
 80042e0:	69f9      	ldr	r1, [r7, #28]
 80042e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042e6:	4313      	orrs	r3, r2
 80042e8:	634b      	str	r3, [r1, #52]	; 0x34
 80042ea:	e105      	b.n	80044f8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d110      	bne.n	800431e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	0151      	lsls	r1, r2, #5
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	440a      	add	r2, r1
 8004312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004316:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	e00f      	b.n	800433e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	0151      	lsls	r1, r2, #5
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	440a      	add	r2, r1
 8004334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	68d9      	ldr	r1, [r3, #12]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	781a      	ldrb	r2, [r3, #0]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	b298      	uxth	r0, r3
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	4603      	mov	r3, r0
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 fa2b 	bl	80047ae <USB_WritePacket>
 8004358:	e0ce      	b.n	80044f8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	0151      	lsls	r1, r2, #5
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	440a      	add	r2, r1
 8004370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004374:	0cdb      	lsrs	r3, r3, #19
 8004376:	04db      	lsls	r3, r3, #19
 8004378:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	0151      	lsls	r1, r2, #5
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	440a      	add	r2, r1
 8004390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004394:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004398:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800439c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d126      	bne.n	80043f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043bc:	69b9      	ldr	r1, [r7, #24]
 80043be:	0148      	lsls	r0, r1, #5
 80043c0:	69f9      	ldr	r1, [r7, #28]
 80043c2:	4401      	add	r1, r0
 80043c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043c8:	4313      	orrs	r3, r2
 80043ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ea:	6113      	str	r3, [r2, #16]
 80043ec:	e036      	b.n	800445c <USB_EPStartXfer+0x3dc>
 80043ee:	bf00      	nop
 80043f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	4413      	add	r3, r2
 80043fe:	1e5a      	subs	r2, r3, #1
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	8afb      	ldrh	r3, [r7, #22]
 800441a:	04d9      	lsls	r1, r3, #19
 800441c:	4b39      	ldr	r3, [pc, #228]	; (8004504 <USB_EPStartXfer+0x484>)
 800441e:	400b      	ands	r3, r1
 8004420:	69b9      	ldr	r1, [r7, #24]
 8004422:	0148      	lsls	r0, r1, #5
 8004424:	69f9      	ldr	r1, [r7, #28]
 8004426:	4401      	add	r1, r0
 8004428:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800442c:	4313      	orrs	r3, r2
 800442e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	8af9      	ldrh	r1, [r7, #22]
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800444c:	69b9      	ldr	r1, [r7, #24]
 800444e:	0148      	lsls	r0, r1, #5
 8004450:	69f9      	ldr	r1, [r7, #28]
 8004452:	4401      	add	r1, r0
 8004454:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004458:	4313      	orrs	r3, r2
 800445a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d10d      	bne.n	800447e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	68d9      	ldr	r1, [r3, #12]
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447a:	460a      	mov	r2, r1
 800447c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	78db      	ldrb	r3, [r3, #3]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d128      	bne.n	80044d8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004492:	2b00      	cmp	r3, #0
 8004494:	d110      	bne.n	80044b8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	0151      	lsls	r1, r2, #5
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	440a      	add	r2, r1
 80044ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e00f      	b.n	80044d8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	0151      	lsls	r1, r2, #5
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	440a      	add	r2, r1
 80044ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	0151      	lsls	r1, r2, #5
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	440a      	add	r2, r1
 80044ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	1ff80000 	.word	0x1ff80000

08004508 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	4613      	mov	r3, r2
 8004514:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	2b01      	cmp	r3, #1
 8004526:	f040 80cd 	bne.w	80046c4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d132      	bne.n	8004598 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	0151      	lsls	r1, r2, #5
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	440a      	add	r2, r1
 8004548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800454c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004550:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004554:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	0151      	lsls	r1, r2, #5
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	440a      	add	r2, r1
 800456c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004574:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	0151      	lsls	r1, r2, #5
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	440a      	add	r2, r1
 800458c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004590:	0cdb      	lsrs	r3, r3, #19
 8004592:	04db      	lsls	r3, r3, #19
 8004594:	6113      	str	r3, [r2, #16]
 8004596:	e04e      	b.n	8004636 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	0151      	lsls	r1, r2, #5
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	440a      	add	r2, r1
 80045ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b2:	0cdb      	lsrs	r3, r3, #19
 80045b4:	04db      	lsls	r3, r3, #19
 80045b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	0151      	lsls	r1, r2, #5
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	440a      	add	r2, r1
 80045ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	695a      	ldr	r2, [r3, #20]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d903      	bls.n	80045f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	0151      	lsls	r1, r2, #5
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	440a      	add	r2, r1
 8004606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800460a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800460e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461c:	691a      	ldr	r2, [r3, #16]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004626:	6939      	ldr	r1, [r7, #16]
 8004628:	0148      	lsls	r0, r1, #5
 800462a:	6979      	ldr	r1, [r7, #20]
 800462c:	4401      	add	r1, r0
 800462e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004632:	4313      	orrs	r3, r2
 8004634:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d11e      	bne.n	800467a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d009      	beq.n	8004658 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004650:	461a      	mov	r2, r3
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	0151      	lsls	r1, r2, #5
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	440a      	add	r2, r1
 800466e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004672:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	e092      	b.n	80047a0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	440a      	add	r2, r1
 8004690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004694:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004698:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d07e      	beq.n	80047a0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	2101      	movs	r1, #1
 80046b4:	fa01 f303 	lsl.w	r3, r1, r3
 80046b8:	6979      	ldr	r1, [r7, #20]
 80046ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046be:	4313      	orrs	r3, r2
 80046c0:	634b      	str	r3, [r1, #52]	; 0x34
 80046c2:	e06d      	b.n	80047a0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	0151      	lsls	r1, r2, #5
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	440a      	add	r2, r1
 80046da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046de:	0cdb      	lsrs	r3, r3, #19
 80046e0:	04db      	lsls	r3, r3, #19
 80046e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	0151      	lsls	r1, r2, #5
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	440a      	add	r2, r1
 80046fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004702:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004706:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	0151      	lsls	r1, r2, #5
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	440a      	add	r2, r1
 800472e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004732:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004736:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474e:	6939      	ldr	r1, [r7, #16]
 8004750:	0148      	lsls	r0, r1, #5
 8004752:	6979      	ldr	r1, [r7, #20]
 8004754:	4401      	add	r1, r0
 8004756:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800475a:	4313      	orrs	r3, r2
 800475c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d10d      	bne.n	8004780 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d009      	beq.n	8004780 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	68d9      	ldr	r1, [r3, #12]
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477c:	460a      	mov	r2, r1
 800477e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	0151      	lsls	r1, r2, #5
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	440a      	add	r2, r1
 8004796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800479a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800479e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b089      	sub	sp, #36	; 0x24
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	4611      	mov	r1, r2
 80047ba:	461a      	mov	r2, r3
 80047bc:	460b      	mov	r3, r1
 80047be:	71fb      	strb	r3, [r7, #7]
 80047c0:	4613      	mov	r3, r2
 80047c2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d123      	bne.n	800481c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047d4:	88bb      	ldrh	r3, [r7, #4]
 80047d6:	3303      	adds	r3, #3
 80047d8:	089b      	lsrs	r3, r3, #2
 80047da:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047dc:	2300      	movs	r3, #0
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	e018      	b.n	8004814 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	031a      	lsls	r2, r3, #12
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ee:	461a      	mov	r2, r3
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	3301      	adds	r3, #1
 80047fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	3301      	adds	r3, #1
 8004800:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3301      	adds	r3, #1
 8004806:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	3301      	adds	r3, #1
 800480c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	3301      	adds	r3, #1
 8004812:	61bb      	str	r3, [r7, #24]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	429a      	cmp	r2, r3
 800481a:	d3e2      	bcc.n	80047e2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3724      	adds	r7, #36	; 0x24
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800482a:	b480      	push	{r7}
 800482c:	b08b      	sub	sp, #44	; 0x2c
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	4613      	mov	r3, r2
 8004836:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	089b      	lsrs	r3, r3, #2
 8004844:	b29b      	uxth	r3, r3
 8004846:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004850:	2300      	movs	r3, #0
 8004852:	623b      	str	r3, [r7, #32]
 8004854:	e014      	b.n	8004880 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	601a      	str	r2, [r3, #0]
    pDest++;
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	3301      	adds	r3, #1
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	3301      	adds	r3, #1
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	3301      	adds	r3, #1
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	3301      	adds	r3, #1
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	3301      	adds	r3, #1
 800487e:	623b      	str	r3, [r7, #32]
 8004880:	6a3a      	ldr	r2, [r7, #32]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	429a      	cmp	r2, r3
 8004886:	d3e6      	bcc.n	8004856 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004888:	8bfb      	ldrh	r3, [r7, #30]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d01e      	beq.n	80048cc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004898:	461a      	mov	r2, r3
 800489a:	f107 0310 	add.w	r3, r7, #16
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	fa22 f303 	lsr.w	r3, r2, r3
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	701a      	strb	r2, [r3, #0]
      i++;
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	3301      	adds	r3, #1
 80048b8:	623b      	str	r3, [r7, #32]
      pDest++;
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	3301      	adds	r3, #1
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048c0:	8bfb      	ldrh	r3, [r7, #30]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048c6:	8bfb      	ldrh	r3, [r7, #30]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1ea      	bne.n	80048a2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	372c      	adds	r7, #44	; 0x2c
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048da:	b480      	push	{r7}
 80048dc:	b085      	sub	sp, #20
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	785b      	ldrb	r3, [r3, #1]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d12c      	bne.n	8004950 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	db12      	blt.n	800492e <USB_EPSetStall+0x54>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00f      	beq.n	800492e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	0151      	lsls	r1, r2, #5
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	440a      	add	r2, r1
 8004924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004928:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800492c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	0151      	lsls	r1, r2, #5
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	440a      	add	r2, r1
 8004944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	e02b      	b.n	80049a8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	db12      	blt.n	8004988 <USB_EPSetStall+0xae>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00f      	beq.n	8004988 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	0151      	lsls	r1, r2, #5
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	440a      	add	r2, r1
 800497e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004982:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004986:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	785b      	ldrb	r3, [r3, #1]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d128      	bne.n	8004a24 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	0151      	lsls	r1, r2, #5
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	440a      	add	r2, r1
 80049e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	78db      	ldrb	r3, [r3, #3]
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d003      	beq.n	8004a02 <USB_EPClearStall+0x4c>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	78db      	ldrb	r3, [r3, #3]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d138      	bne.n	8004a74 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	0151      	lsls	r1, r2, #5
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	440a      	add	r2, r1
 8004a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	e027      	b.n	8004a74 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	0151      	lsls	r1, r2, #5
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	440a      	add	r2, r1
 8004a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	78db      	ldrb	r3, [r3, #3]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d003      	beq.n	8004a54 <USB_EPClearStall+0x9e>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	78db      	ldrb	r3, [r3, #3]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d10f      	bne.n	8004a74 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a72:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b085      	sub	sp, #20
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aa0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004aa4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004ab6:	68f9      	ldr	r1, [r7, #12]
 8004ab8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004abc:	4313      	orrs	r3, r2
 8004abe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ae8:	f023 0303 	bic.w	r3, r3, #3
 8004aec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004afc:	f023 0302 	bic.w	r3, r3, #2
 8004b00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b3e:	f043 0302 	orr.w	r3, r3, #2
 8004b42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4013      	ands	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	0c1b      	lsrs	r3, r3, #16
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	b29b      	uxth	r3, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4c:	01db      	lsls	r3, r3, #7
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c56:	78fb      	ldrb	r3, [r7, #3]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4013      	ands	r3, r2
 8004c68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	371c      	adds	r7, #28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	f003 0301 	and.w	r3, r3, #1
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004cb2:	f023 0307 	bic.w	r3, r3, #7
 8004cb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	333c      	adds	r3, #60	; 0x3c
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4a26      	ldr	r2, [pc, #152]	; (8004d94 <USB_EP0_OutStart+0xb8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d90a      	bls.n	8004d16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d10:	d101      	bne.n	8004d16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	e037      	b.n	8004d86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d44:	f043 0318 	orr.w	r3, r3, #24
 8004d48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004d5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d5e:	7afb      	ldrb	r3, [r7, #11]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d10f      	bne.n	8004d84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	4f54300a 	.word	0x4f54300a

08004d98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3301      	adds	r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	4a13      	ldr	r2, [pc, #76]	; (8004df8 <USB_CoreReset+0x60>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d901      	bls.n	8004db4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e01a      	b.n	8004dea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	daf3      	bge.n	8004da4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f043 0201 	orr.w	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <USB_CoreReset+0x60>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d901      	bls.n	8004ddc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e006      	b.n	8004dea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d0f1      	beq.n	8004dcc <USB_CoreReset+0x34>

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	00030d40 	.word	0x00030d40

08004dfc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e0c:	f002 f95c 	bl	80070c8 <USBD_static_malloc>
 8004e10:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d105      	bne.n	8004e24 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004e20:	2302      	movs	r3, #2
 8004e22:	e066      	b.n	8004ef2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	7c1b      	ldrb	r3, [r3, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d119      	bne.n	8004e68 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e38:	2202      	movs	r2, #2
 8004e3a:	2181      	movs	r1, #129	; 0x81
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f002 f820 	bl	8006e82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	2101      	movs	r1, #1
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f002 f816 	bl	8006e82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2210      	movs	r2, #16
 8004e62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004e66:	e016      	b.n	8004e96 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e68:	2340      	movs	r3, #64	; 0x40
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	2181      	movs	r1, #129	; 0x81
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f002 f807 	bl	8006e82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e7a:	2340      	movs	r3, #64	; 0x40
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	2101      	movs	r1, #1
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f001 fffe 	bl	8006e82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2210      	movs	r2, #16
 8004e92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e96:	2308      	movs	r3, #8
 8004e98:	2203      	movs	r2, #3
 8004e9a:	2182      	movs	r1, #130	; 0x82
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f001 fff0 	bl	8006e82 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	7c1b      	ldrb	r3, [r3, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d109      	bne.n	8004ee0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f002 f8c1 	bl	8007060 <USBD_LL_PrepareReceive>
 8004ede:	e007      	b.n	8004ef0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ee6:	2340      	movs	r3, #64	; 0x40
 8004ee8:	2101      	movs	r1, #1
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f002 f8b8 	bl	8007060 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004f06:	2181      	movs	r1, #129	; 0x81
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f001 ffe0 	bl	8006ece <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004f14:	2101      	movs	r1, #1
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f001 ffd9 	bl	8006ece <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004f24:	2182      	movs	r1, #130	; 0x82
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f001 ffd1 	bl	8006ece <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00e      	beq.n	8004f64 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f56:	4618      	mov	r0, r3
 8004f58:	f002 f8c4 	bl	80070e4 <USBD_static_free>
    pdev->pClassData = NULL;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e0af      	b.n	80050f8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d03f      	beq.n	8005024 <USBD_CDC_Setup+0xb4>
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	f040 809f 	bne.w	80050e8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	88db      	ldrh	r3, [r3, #6]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d02e      	beq.n	8005010 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	b25b      	sxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	da16      	bge.n	8004fea <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004fc8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	88d2      	ldrh	r2, [r2, #6]
 8004fce:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	88db      	ldrh	r3, [r3, #6]
 8004fd4:	2b07      	cmp	r3, #7
 8004fd6:	bf28      	it	cs
 8004fd8:	2307      	movcs	r3, #7
 8004fda:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	89fa      	ldrh	r2, [r7, #14]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f001 fb19 	bl	800661a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004fe8:	e085      	b.n	80050f6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	785a      	ldrb	r2, [r3, #1]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	88db      	ldrh	r3, [r3, #6]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005000:	6939      	ldr	r1, [r7, #16]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	88db      	ldrh	r3, [r3, #6]
 8005006:	461a      	mov	r2, r3
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f001 fb32 	bl	8006672 <USBD_CtlPrepareRx>
      break;
 800500e:	e072      	b.n	80050f6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	7850      	ldrb	r0, [r2, #1]
 800501c:	2200      	movs	r2, #0
 800501e:	6839      	ldr	r1, [r7, #0]
 8005020:	4798      	blx	r3
      break;
 8005022:	e068      	b.n	80050f6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	785b      	ldrb	r3, [r3, #1]
 8005028:	2b0b      	cmp	r3, #11
 800502a:	d852      	bhi.n	80050d2 <USBD_CDC_Setup+0x162>
 800502c:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <USBD_CDC_Setup+0xc4>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005065 	.word	0x08005065
 8005038:	080050e1 	.word	0x080050e1
 800503c:	080050d3 	.word	0x080050d3
 8005040:	080050d3 	.word	0x080050d3
 8005044:	080050d3 	.word	0x080050d3
 8005048:	080050d3 	.word	0x080050d3
 800504c:	080050d3 	.word	0x080050d3
 8005050:	080050d3 	.word	0x080050d3
 8005054:	080050d3 	.word	0x080050d3
 8005058:	080050d3 	.word	0x080050d3
 800505c:	0800508f 	.word	0x0800508f
 8005060:	080050b9 	.word	0x080050b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b03      	cmp	r3, #3
 800506e:	d107      	bne.n	8005080 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005070:	f107 030a 	add.w	r3, r7, #10
 8005074:	2202      	movs	r2, #2
 8005076:	4619      	mov	r1, r3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f001 face 	bl	800661a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800507e:	e032      	b.n	80050e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005080:	6839      	ldr	r1, [r7, #0]
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f001 fa58 	bl	8006538 <USBD_CtlError>
            ret = USBD_FAIL;
 8005088:	2303      	movs	r3, #3
 800508a:	75fb      	strb	r3, [r7, #23]
          break;
 800508c:	e02b      	b.n	80050e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b03      	cmp	r3, #3
 8005098:	d107      	bne.n	80050aa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800509a:	f107 030d 	add.w	r3, r7, #13
 800509e:	2201      	movs	r2, #1
 80050a0:	4619      	mov	r1, r3
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f001 fab9 	bl	800661a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050a8:	e01d      	b.n	80050e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80050aa:	6839      	ldr	r1, [r7, #0]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f001 fa43 	bl	8006538 <USBD_CtlError>
            ret = USBD_FAIL;
 80050b2:	2303      	movs	r3, #3
 80050b4:	75fb      	strb	r3, [r7, #23]
          break;
 80050b6:	e016      	b.n	80050e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d00f      	beq.n	80050e4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80050c4:	6839      	ldr	r1, [r7, #0]
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f001 fa36 	bl	8006538 <USBD_CtlError>
            ret = USBD_FAIL;
 80050cc:	2303      	movs	r3, #3
 80050ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80050d0:	e008      	b.n	80050e4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80050d2:	6839      	ldr	r1, [r7, #0]
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f001 fa2f 	bl	8006538 <USBD_CtlError>
          ret = USBD_FAIL;
 80050da:	2303      	movs	r3, #3
 80050dc:	75fb      	strb	r3, [r7, #23]
          break;
 80050de:	e002      	b.n	80050e6 <USBD_CDC_Setup+0x176>
          break;
 80050e0:	bf00      	nop
 80050e2:	e008      	b.n	80050f6 <USBD_CDC_Setup+0x186>
          break;
 80050e4:	bf00      	nop
      }
      break;
 80050e6:	e006      	b.n	80050f6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f001 fa24 	bl	8006538 <USBD_CtlError>
      ret = USBD_FAIL;
 80050f0:	2303      	movs	r3, #3
 80050f2:	75fb      	strb	r3, [r7, #23]
      break;
 80050f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005112:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800511e:	2303      	movs	r3, #3
 8005120:	e04f      	b.n	80051c2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005128:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800512a:	78fa      	ldrb	r2, [r7, #3]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	3318      	adds	r3, #24
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d029      	beq.n	8005194 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005140:	78fa      	ldrb	r2, [r7, #3]
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	3318      	adds	r3, #24
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	78f9      	ldrb	r1, [r7, #3]
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	460b      	mov	r3, r1
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	1a5b      	subs	r3, r3, r1
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4403      	add	r3, r0
 8005160:	3344      	adds	r3, #68	; 0x44
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	fbb2 f1f3 	udiv	r1, r2, r3
 8005168:	fb03 f301 	mul.w	r3, r3, r1
 800516c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800516e:	2b00      	cmp	r3, #0
 8005170:	d110      	bne.n	8005194 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005172:	78fa      	ldrb	r2, [r7, #3]
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	3318      	adds	r3, #24
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005186:	78f9      	ldrb	r1, [r7, #3]
 8005188:	2300      	movs	r3, #0
 800518a:	2200      	movs	r2, #0
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f001 ff46 	bl	800701e <USBD_LL_Transmit>
 8005192:	e015      	b.n	80051c0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2200      	movs	r2, #0
 8005198:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00b      	beq.n	80051c0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80051bc:	78fa      	ldrb	r2, [r7, #3]
 80051be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e015      	b.n	8005218 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	4619      	mov	r1, r3
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f001 ff56 	bl	80070a2 <USBD_LL_GetRxDataSize>
 80051f6:	4602      	mov	r2, r0
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005212:	4611      	mov	r1, r2
 8005214:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800522e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005236:	2303      	movs	r3, #3
 8005238:	e01b      	b.n	8005272 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d015      	beq.n	8005270 <USBD_CDC_EP0_RxReady+0x50>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800524a:	2bff      	cmp	r3, #255	; 0xff
 800524c:	d010      	beq.n	8005270 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800525c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005264:	b292      	uxth	r2, r2
 8005266:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	22ff      	movs	r2, #255	; 0xff
 800526c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2243      	movs	r2, #67	; 0x43
 8005288:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800528a:	4b03      	ldr	r3, [pc, #12]	; (8005298 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800528c:	4618      	mov	r0, r3
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	20000094 	.word	0x20000094

0800529c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2243      	movs	r2, #67	; 0x43
 80052a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80052aa:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	20000050 	.word	0x20000050

080052bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2243      	movs	r2, #67	; 0x43
 80052c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80052ca:	4b03      	ldr	r3, [pc, #12]	; (80052d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	200000d8 	.word	0x200000d8

080052dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	220a      	movs	r2, #10
 80052e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80052ea:	4b03      	ldr	r3, [pc, #12]	; (80052f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	2000000c 	.word	0x2000000c

080052fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800530c:	2303      	movs	r3, #3
 800530e:	e004      	b.n	800531a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005326:	b480      	push	{r7}
 8005328:	b087      	sub	sp, #28
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005338:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005340:	2303      	movs	r3, #3
 8005342:	e008      	b.n	8005356 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005372:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800537a:	2303      	movs	r3, #3
 800537c:	e004      	b.n	8005388 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053a2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80053a4:	2301      	movs	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e01a      	b.n	80053ec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d114      	bne.n	80053ea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053de:	2181      	movs	r1, #129	; 0x81
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f001 fe1c 	bl	800701e <USBD_LL_Transmit>

    ret = USBD_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005402:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800540e:	2303      	movs	r3, #3
 8005410:	e016      	b.n	8005440 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	7c1b      	ldrb	r3, [r3, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005424:	2101      	movs	r1, #1
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f001 fe1a 	bl	8007060 <USBD_LL_PrepareReceive>
 800542c:	e007      	b.n	800543e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005434:	2340      	movs	r3, #64	; 0x40
 8005436:	2101      	movs	r1, #1
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 fe11 	bl	8007060 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	4613      	mov	r3, r2
 8005454:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800545c:	2303      	movs	r3, #3
 800545e:	e01f      	b.n	80054a0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	79fa      	ldrb	r2, [r7, #7]
 8005492:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f001 fc8d 	bl	8006db4 <USBD_LL_Init>
 800549a:	4603      	mov	r3, r0
 800549c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800549e:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80054bc:	2303      	movs	r3, #3
 80054be:	e016      	b.n	80054ee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00b      	beq.n	80054ec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	f107 020e 	add.w	r2, r7, #14
 80054e0:	4610      	mov	r0, r2
 80054e2:	4798      	blx	r3
 80054e4:	4602      	mov	r2, r0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f001 fca4 	bl	8006e4c <USBD_LL_Start>
 8005504:	4603      	mov	r3, r0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005530:	2303      	movs	r3, #3
 8005532:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	78fa      	ldrb	r2, [r7, #3]
 8005548:	4611      	mov	r1, r2
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	4798      	blx	r3
 800554e:	4603      	mov	r3, r0
 8005550:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005552:	7bfb      	ldrb	r3, [r7, #15]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d007      	beq.n	8005582 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	78fa      	ldrb	r2, [r7, #3]
 800557c:	4611      	mov	r1, r2
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	4798      	blx	r3
  }

  return USBD_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 ff90 	bl	80064c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80055b2:	461a      	mov	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d01a      	beq.n	80055fe <USBD_LL_SetupStage+0x72>
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d822      	bhi.n	8005612 <USBD_LL_SetupStage+0x86>
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <USBD_LL_SetupStage+0x4a>
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d00a      	beq.n	80055ea <USBD_LL_SetupStage+0x5e>
 80055d4:	e01d      	b.n	8005612 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055dc:	4619      	mov	r1, r3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fa62 	bl	8005aa8 <USBD_StdDevReq>
 80055e4:	4603      	mov	r3, r0
 80055e6:	73fb      	strb	r3, [r7, #15]
      break;
 80055e8:	e020      	b.n	800562c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80055f0:	4619      	mov	r1, r3
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fac6 	bl	8005b84 <USBD_StdItfReq>
 80055f8:	4603      	mov	r3, r0
 80055fa:	73fb      	strb	r3, [r7, #15]
      break;
 80055fc:	e016      	b.n	800562c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005604:	4619      	mov	r1, r3
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fb05 	bl	8005c16 <USBD_StdEPReq>
 800560c:	4603      	mov	r3, r0
 800560e:	73fb      	strb	r3, [r7, #15]
      break;
 8005610:	e00c      	b.n	800562c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005618:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800561c:	b2db      	uxtb	r3, r3
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f001 fc73 	bl	8006f0c <USBD_LL_StallEP>
 8005626:	4603      	mov	r3, r0
 8005628:	73fb      	strb	r3, [r7, #15]
      break;
 800562a:	bf00      	nop
  }

  return ret;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b086      	sub	sp, #24
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	460b      	mov	r3, r1
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005644:	7afb      	ldrb	r3, [r7, #11]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d138      	bne.n	80056bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005650:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005658:	2b03      	cmp	r3, #3
 800565a:	d14a      	bne.n	80056f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	429a      	cmp	r2, r3
 8005666:	d913      	bls.n	8005690 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	1ad2      	subs	r2, r2, r3
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	4293      	cmp	r3, r2
 8005680:	bf28      	it	cs
 8005682:	4613      	movcs	r3, r2
 8005684:	461a      	mov	r2, r3
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f001 f80f 	bl	80066ac <USBD_CtlContinueRx>
 800568e:	e030      	b.n	80056f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b03      	cmp	r3, #3
 800569a:	d10b      	bne.n	80056b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f001 f80a 	bl	80066ce <USBD_CtlSendStatus>
 80056ba:	e01a      	b.n	80056f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d114      	bne.n	80056f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00e      	beq.n	80056f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	7afa      	ldrb	r2, [r7, #11]
 80056de:	4611      	mov	r1, r2
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	4798      	blx	r3
 80056e4:	4603      	mov	r3, r0
 80056e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
 80056f0:	e000      	b.n	80056f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	460b      	mov	r3, r1
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800570a:	7afb      	ldrb	r3, [r7, #11]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d16b      	bne.n	80057e8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3314      	adds	r3, #20
 8005714:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800571c:	2b02      	cmp	r3, #2
 800571e:	d156      	bne.n	80057ce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	429a      	cmp	r2, r3
 800572a:	d914      	bls.n	8005756 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	1ad2      	subs	r2, r2, r3
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	461a      	mov	r2, r3
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 ff84 	bl	8006650 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005748:	2300      	movs	r3, #0
 800574a:	2200      	movs	r2, #0
 800574c:	2100      	movs	r1, #0
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f001 fc86 	bl	8007060 <USBD_LL_PrepareReceive>
 8005754:	e03b      	b.n	80057ce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	429a      	cmp	r2, r3
 8005760:	d11c      	bne.n	800579c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800576a:	429a      	cmp	r2, r3
 800576c:	d316      	bcc.n	800579c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005778:	429a      	cmp	r2, r3
 800577a:	d20f      	bcs.n	800579c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800577c:	2200      	movs	r2, #0
 800577e:	2100      	movs	r1, #0
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 ff65 	bl	8006650 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800578e:	2300      	movs	r3, #0
 8005790:	2200      	movs	r2, #0
 8005792:	2100      	movs	r1, #0
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f001 fc63 	bl	8007060 <USBD_LL_PrepareReceive>
 800579a:	e018      	b.n	80057ce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d10b      	bne.n	80057c0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80057c0:	2180      	movs	r1, #128	; 0x80
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f001 fba2 	bl	8006f0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 ff93 	bl	80066f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d122      	bne.n	800581e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f7ff fe98 	bl	800550e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80057e6:	e01a      	b.n	800581e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d114      	bne.n	800581e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00e      	beq.n	800581e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	7afa      	ldrb	r2, [r7, #11]
 800580a:	4611      	mov	r1, r2
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	4798      	blx	r3
 8005810:	4603      	mov	r3, r0
 8005812:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800581a:	7dfb      	ldrb	r3, [r7, #23]
 800581c:	e000      	b.n	8005820 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005858:	2303      	movs	r3, #3
 800585a:	e02f      	b.n	80058bc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00f      	beq.n	8005886 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6852      	ldr	r2, [r2, #4]
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	4611      	mov	r1, r2
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005886:	2340      	movs	r3, #64	; 0x40
 8005888:	2200      	movs	r2, #0
 800588a:	2100      	movs	r1, #0
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f001 faf8 	bl	8006e82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2240      	movs	r2, #64	; 0x40
 800589e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058a2:	2340      	movs	r3, #64	; 0x40
 80058a4:	2200      	movs	r2, #0
 80058a6:	2180      	movs	r1, #128	; 0x80
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f001 faea 	bl	8006e82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2240      	movs	r2, #64	; 0x40
 80058b8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	78fa      	ldrb	r2, [r7, #3]
 80058d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2204      	movs	r2, #4
 80058fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b04      	cmp	r3, #4
 8005922:	d106      	bne.n	8005932 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800592a:	b2da      	uxtb	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005952:	2303      	movs	r3, #3
 8005954:	e012      	b.n	800597c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b03      	cmp	r3, #3
 8005960:	d10b      	bne.n	800597a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800599a:	2303      	movs	r3, #3
 800599c:	e014      	b.n	80059c8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d10d      	bne.n	80059c6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d007      	beq.n	80059c6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	78fa      	ldrb	r2, [r7, #3]
 80059c0:	4611      	mov	r1, r2
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e014      	b.n	8005a14 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d10d      	bne.n	8005a12 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d007      	beq.n	8005a12 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	78fa      	ldrb	r2, [r7, #3]
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d009      	beq.n	8005a60 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6852      	ldr	r2, [r2, #4]
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
  }

  return USBD_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b087      	sub	sp, #28
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005a88:	8a3b      	ldrh	r3, [r7, #16]
 8005a8a:	021b      	lsls	r3, r3, #8
 8005a8c:	b21a      	sxth	r2, r3
 8005a8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	b21b      	sxth	r3, r3
 8005a96:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005a98:	89fb      	ldrh	r3, [r7, #14]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005abe:	2b40      	cmp	r3, #64	; 0x40
 8005ac0:	d005      	beq.n	8005ace <USBD_StdDevReq+0x26>
 8005ac2:	2b40      	cmp	r3, #64	; 0x40
 8005ac4:	d853      	bhi.n	8005b6e <USBD_StdDevReq+0xc6>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00b      	beq.n	8005ae2 <USBD_StdDevReq+0x3a>
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d14f      	bne.n	8005b6e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	4798      	blx	r3
 8005adc:	4603      	mov	r3, r0
 8005ade:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae0:	e04a      	b.n	8005b78 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	2b09      	cmp	r3, #9
 8005ae8:	d83b      	bhi.n	8005b62 <USBD_StdDevReq+0xba>
 8005aea:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <USBD_StdDevReq+0x48>)
 8005aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af0:	08005b45 	.word	0x08005b45
 8005af4:	08005b59 	.word	0x08005b59
 8005af8:	08005b63 	.word	0x08005b63
 8005afc:	08005b4f 	.word	0x08005b4f
 8005b00:	08005b63 	.word	0x08005b63
 8005b04:	08005b23 	.word	0x08005b23
 8005b08:	08005b19 	.word	0x08005b19
 8005b0c:	08005b63 	.word	0x08005b63
 8005b10:	08005b3b 	.word	0x08005b3b
 8005b14:	08005b2d 	.word	0x08005b2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f9de 	bl	8005edc <USBD_GetDescriptor>
          break;
 8005b20:	e024      	b.n	8005b6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fb43 	bl	80061b0 <USBD_SetAddress>
          break;
 8005b2a:	e01f      	b.n	8005b6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fb82 	bl	8006238 <USBD_SetConfig>
 8005b34:	4603      	mov	r3, r0
 8005b36:	73fb      	strb	r3, [r7, #15]
          break;
 8005b38:	e018      	b.n	8005b6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fc21 	bl	8006384 <USBD_GetConfig>
          break;
 8005b42:	e013      	b.n	8005b6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fc52 	bl	80063f0 <USBD_GetStatus>
          break;
 8005b4c:	e00e      	b.n	8005b6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fc81 	bl	8006458 <USBD_SetFeature>
          break;
 8005b56:	e009      	b.n	8005b6c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fc90 	bl	8006480 <USBD_ClrFeature>
          break;
 8005b60:	e004      	b.n	8005b6c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fce7 	bl	8006538 <USBD_CtlError>
          break;
 8005b6a:	bf00      	nop
      }
      break;
 8005b6c:	e004      	b.n	8005b78 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fce1 	bl	8006538 <USBD_CtlError>
      break;
 8005b76:	bf00      	nop
  }

  return ret;
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop

08005b84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b9a:	2b40      	cmp	r3, #64	; 0x40
 8005b9c:	d005      	beq.n	8005baa <USBD_StdItfReq+0x26>
 8005b9e:	2b40      	cmp	r3, #64	; 0x40
 8005ba0:	d82f      	bhi.n	8005c02 <USBD_StdItfReq+0x7e>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <USBD_StdItfReq+0x26>
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d12b      	bne.n	8005c02 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d81d      	bhi.n	8005bf4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	889b      	ldrh	r3, [r3, #4]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d813      	bhi.n	8005bea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	4798      	blx	r3
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	88db      	ldrh	r3, [r3, #6]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d110      	bne.n	8005bfe <USBD_StdItfReq+0x7a>
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10d      	bne.n	8005bfe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fd73 	bl	80066ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005be8:	e009      	b.n	8005bfe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fca3 	bl	8006538 <USBD_CtlError>
          break;
 8005bf2:	e004      	b.n	8005bfe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fc9e 	bl	8006538 <USBD_CtlError>
          break;
 8005bfc:	e000      	b.n	8005c00 <USBD_StdItfReq+0x7c>
          break;
 8005bfe:	bf00      	nop
      }
      break;
 8005c00:	e004      	b.n	8005c0c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fc97 	bl	8006538 <USBD_CtlError>
      break;
 8005c0a:	bf00      	nop
  }

  return ret;
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	889b      	ldrh	r3, [r3, #4]
 8005c28:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c32:	2b40      	cmp	r3, #64	; 0x40
 8005c34:	d007      	beq.n	8005c46 <USBD_StdEPReq+0x30>
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	f200 8145 	bhi.w	8005ec6 <USBD_StdEPReq+0x2b0>
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00c      	beq.n	8005c5a <USBD_StdEPReq+0x44>
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	f040 8140 	bne.w	8005ec6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	4798      	blx	r3
 8005c54:	4603      	mov	r3, r0
 8005c56:	73fb      	strb	r3, [r7, #15]
      break;
 8005c58:	e13a      	b.n	8005ed0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	785b      	ldrb	r3, [r3, #1]
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d007      	beq.n	8005c72 <USBD_StdEPReq+0x5c>
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	f300 8129 	bgt.w	8005eba <USBD_StdEPReq+0x2a4>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d07f      	beq.n	8005d6c <USBD_StdEPReq+0x156>
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d03c      	beq.n	8005cea <USBD_StdEPReq+0xd4>
 8005c70:	e123      	b.n	8005eba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d002      	beq.n	8005c84 <USBD_StdEPReq+0x6e>
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d016      	beq.n	8005cb0 <USBD_StdEPReq+0x9a>
 8005c82:	e02c      	b.n	8005cde <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c84:	7bbb      	ldrb	r3, [r7, #14]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00d      	beq.n	8005ca6 <USBD_StdEPReq+0x90>
 8005c8a:	7bbb      	ldrb	r3, [r7, #14]
 8005c8c:	2b80      	cmp	r3, #128	; 0x80
 8005c8e:	d00a      	beq.n	8005ca6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c90:	7bbb      	ldrb	r3, [r7, #14]
 8005c92:	4619      	mov	r1, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f001 f939 	bl	8006f0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c9a:	2180      	movs	r1, #128	; 0x80
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f001 f935 	bl	8006f0c <USBD_LL_StallEP>
 8005ca2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ca4:	e020      	b.n	8005ce8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fc45 	bl	8006538 <USBD_CtlError>
              break;
 8005cae:	e01b      	b.n	8005ce8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	885b      	ldrh	r3, [r3, #2]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10e      	bne.n	8005cd6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00b      	beq.n	8005cd6 <USBD_StdEPReq+0xc0>
 8005cbe:	7bbb      	ldrb	r3, [r7, #14]
 8005cc0:	2b80      	cmp	r3, #128	; 0x80
 8005cc2:	d008      	beq.n	8005cd6 <USBD_StdEPReq+0xc0>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	88db      	ldrh	r3, [r3, #6]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ccc:	7bbb      	ldrb	r3, [r7, #14]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f001 f91b 	bl	8006f0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fcf9 	bl	80066ce <USBD_CtlSendStatus>

              break;
 8005cdc:	e004      	b.n	8005ce8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005cde:	6839      	ldr	r1, [r7, #0]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fc29 	bl	8006538 <USBD_CtlError>
              break;
 8005ce6:	bf00      	nop
          }
          break;
 8005ce8:	e0ec      	b.n	8005ec4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d002      	beq.n	8005cfc <USBD_StdEPReq+0xe6>
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d016      	beq.n	8005d28 <USBD_StdEPReq+0x112>
 8005cfa:	e030      	b.n	8005d5e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cfc:	7bbb      	ldrb	r3, [r7, #14]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00d      	beq.n	8005d1e <USBD_StdEPReq+0x108>
 8005d02:	7bbb      	ldrb	r3, [r7, #14]
 8005d04:	2b80      	cmp	r3, #128	; 0x80
 8005d06:	d00a      	beq.n	8005d1e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d08:	7bbb      	ldrb	r3, [r7, #14]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f001 f8fd 	bl	8006f0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d12:	2180      	movs	r1, #128	; 0x80
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f001 f8f9 	bl	8006f0c <USBD_LL_StallEP>
 8005d1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d1c:	e025      	b.n	8005d6a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fc09 	bl	8006538 <USBD_CtlError>
              break;
 8005d26:	e020      	b.n	8005d6a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	885b      	ldrh	r3, [r3, #2]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d11b      	bne.n	8005d68 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005d30:	7bbb      	ldrb	r3, [r7, #14]
 8005d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d004      	beq.n	8005d44 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005d3a:	7bbb      	ldrb	r3, [r7, #14]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f001 f903 	bl	8006f4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fcc2 	bl	80066ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	4798      	blx	r3
 8005d58:	4603      	mov	r3, r0
 8005d5a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005d5c:	e004      	b.n	8005d68 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fbe9 	bl	8006538 <USBD_CtlError>
              break;
 8005d66:	e000      	b.n	8005d6a <USBD_StdEPReq+0x154>
              break;
 8005d68:	bf00      	nop
          }
          break;
 8005d6a:	e0ab      	b.n	8005ec4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d002      	beq.n	8005d7e <USBD_StdEPReq+0x168>
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d032      	beq.n	8005de2 <USBD_StdEPReq+0x1cc>
 8005d7c:	e097      	b.n	8005eae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d7e:	7bbb      	ldrb	r3, [r7, #14]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d007      	beq.n	8005d94 <USBD_StdEPReq+0x17e>
 8005d84:	7bbb      	ldrb	r3, [r7, #14]
 8005d86:	2b80      	cmp	r3, #128	; 0x80
 8005d88:	d004      	beq.n	8005d94 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fbd3 	bl	8006538 <USBD_CtlError>
                break;
 8005d92:	e091      	b.n	8005eb8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	da0b      	bge.n	8005db4 <USBD_StdEPReq+0x19e>
 8005d9c:	7bbb      	ldrb	r3, [r7, #14]
 8005d9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	3310      	adds	r3, #16
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	4413      	add	r3, r2
 8005db0:	3304      	adds	r3, #4
 8005db2:	e00b      	b.n	8005dcc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005db4:	7bbb      	ldrb	r3, [r7, #14]
 8005db6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dba:	4613      	mov	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4413      	add	r3, r2
 8005dca:	3304      	adds	r3, #4
 8005dcc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fc1d 	bl	800661a <USBD_CtlSendData>
              break;
 8005de0:	e06a      	b.n	8005eb8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005de2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	da11      	bge.n	8005e0e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005dea:	7bbb      	ldrb	r3, [r7, #14]
 8005dec:	f003 020f 	and.w	r2, r3, #15
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	3324      	adds	r3, #36	; 0x24
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d117      	bne.n	8005e34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fb96 	bl	8006538 <USBD_CtlError>
                  break;
 8005e0c:	e054      	b.n	8005eb8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e0e:	7bbb      	ldrb	r3, [r7, #14]
 8005e10:	f003 020f 	and.w	r2, r3, #15
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	440b      	add	r3, r1
 8005e20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d104      	bne.n	8005e34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fb83 	bl	8006538 <USBD_CtlError>
                  break;
 8005e32:	e041      	b.n	8005eb8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	da0b      	bge.n	8005e54 <USBD_StdEPReq+0x23e>
 8005e3c:	7bbb      	ldrb	r3, [r7, #14]
 8005e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	3310      	adds	r3, #16
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	4413      	add	r3, r2
 8005e50:	3304      	adds	r3, #4
 8005e52:	e00b      	b.n	8005e6c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e54:	7bbb      	ldrb	r3, [r7, #14]
 8005e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	4413      	add	r3, r2
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e6e:	7bbb      	ldrb	r3, [r7, #14]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <USBD_StdEPReq+0x264>
 8005e74:	7bbb      	ldrb	r3, [r7, #14]
 8005e76:	2b80      	cmp	r3, #128	; 0x80
 8005e78:	d103      	bne.n	8005e82 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	e00e      	b.n	8005ea0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005e82:	7bbb      	ldrb	r3, [r7, #14]
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f001 f87e 	bl	8006f88 <USBD_LL_IsStallEP>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2201      	movs	r2, #1
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	e002      	b.n	8005ea0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fbb7 	bl	800661a <USBD_CtlSendData>
              break;
 8005eac:	e004      	b.n	8005eb8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fb41 	bl	8006538 <USBD_CtlError>
              break;
 8005eb6:	bf00      	nop
          }
          break;
 8005eb8:	e004      	b.n	8005ec4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fb3b 	bl	8006538 <USBD_CtlError>
          break;
 8005ec2:	bf00      	nop
      }
      break;
 8005ec4:	e004      	b.n	8005ed0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fb35 	bl	8006538 <USBD_CtlError>
      break;
 8005ece:	bf00      	nop
  }

  return ret;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	885b      	ldrh	r3, [r3, #2]
 8005ef6:	0a1b      	lsrs	r3, r3, #8
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	3b01      	subs	r3, #1
 8005efc:	2b06      	cmp	r3, #6
 8005efe:	f200 8128 	bhi.w	8006152 <USBD_GetDescriptor+0x276>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <USBD_GetDescriptor+0x2c>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f25 	.word	0x08005f25
 8005f0c:	08005f3d 	.word	0x08005f3d
 8005f10:	08005f7d 	.word	0x08005f7d
 8005f14:	08006153 	.word	0x08006153
 8005f18:	08006153 	.word	0x08006153
 8005f1c:	080060f3 	.word	0x080060f3
 8005f20:	0800611f 	.word	0x0800611f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	7c12      	ldrb	r2, [r2, #16]
 8005f30:	f107 0108 	add.w	r1, r7, #8
 8005f34:	4610      	mov	r0, r2
 8005f36:	4798      	blx	r3
 8005f38:	60f8      	str	r0, [r7, #12]
      break;
 8005f3a:	e112      	b.n	8006162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	7c1b      	ldrb	r3, [r3, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10d      	bne.n	8005f60 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	f107 0208 	add.w	r2, r7, #8
 8005f50:	4610      	mov	r0, r2
 8005f52:	4798      	blx	r3
 8005f54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005f5e:	e100      	b.n	8006162 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	f107 0208 	add.w	r2, r7, #8
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	4798      	blx	r3
 8005f70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3301      	adds	r3, #1
 8005f76:	2202      	movs	r2, #2
 8005f78:	701a      	strb	r2, [r3, #0]
      break;
 8005f7a:	e0f2      	b.n	8006162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	885b      	ldrh	r3, [r3, #2]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b05      	cmp	r3, #5
 8005f84:	f200 80ac 	bhi.w	80060e0 <USBD_GetDescriptor+0x204>
 8005f88:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <USBD_GetDescriptor+0xb4>)
 8005f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8e:	bf00      	nop
 8005f90:	08005fa9 	.word	0x08005fa9
 8005f94:	08005fdd 	.word	0x08005fdd
 8005f98:	08006011 	.word	0x08006011
 8005f9c:	08006045 	.word	0x08006045
 8005fa0:	08006079 	.word	0x08006079
 8005fa4:	080060ad 	.word	0x080060ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00b      	beq.n	8005fcc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	7c12      	ldrb	r2, [r2, #16]
 8005fc0:	f107 0108 	add.w	r1, r7, #8
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	4798      	blx	r3
 8005fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fca:	e091      	b.n	80060f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fab2 	bl	8006538 <USBD_CtlError>
            err++;
 8005fd4:	7afb      	ldrb	r3, [r7, #11]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8005fda:	e089      	b.n	80060f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00b      	beq.n	8006000 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	7c12      	ldrb	r2, [r2, #16]
 8005ff4:	f107 0108 	add.w	r1, r7, #8
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4798      	blx	r3
 8005ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ffe:	e077      	b.n	80060f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa98 	bl	8006538 <USBD_CtlError>
            err++;
 8006008:	7afb      	ldrb	r3, [r7, #11]
 800600a:	3301      	adds	r3, #1
 800600c:	72fb      	strb	r3, [r7, #11]
          break;
 800600e:	e06f      	b.n	80060f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00b      	beq.n	8006034 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	7c12      	ldrb	r2, [r2, #16]
 8006028:	f107 0108 	add.w	r1, r7, #8
 800602c:	4610      	mov	r0, r2
 800602e:	4798      	blx	r3
 8006030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006032:	e05d      	b.n	80060f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa7e 	bl	8006538 <USBD_CtlError>
            err++;
 800603c:	7afb      	ldrb	r3, [r7, #11]
 800603e:	3301      	adds	r3, #1
 8006040:	72fb      	strb	r3, [r7, #11]
          break;
 8006042:	e055      	b.n	80060f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00b      	beq.n	8006068 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	7c12      	ldrb	r2, [r2, #16]
 800605c:	f107 0108 	add.w	r1, r7, #8
 8006060:	4610      	mov	r0, r2
 8006062:	4798      	blx	r3
 8006064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006066:	e043      	b.n	80060f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fa64 	bl	8006538 <USBD_CtlError>
            err++;
 8006070:	7afb      	ldrb	r3, [r7, #11]
 8006072:	3301      	adds	r3, #1
 8006074:	72fb      	strb	r3, [r7, #11]
          break;
 8006076:	e03b      	b.n	80060f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00b      	beq.n	800609c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	7c12      	ldrb	r2, [r2, #16]
 8006090:	f107 0108 	add.w	r1, r7, #8
 8006094:	4610      	mov	r0, r2
 8006096:	4798      	blx	r3
 8006098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800609a:	e029      	b.n	80060f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fa4a 	bl	8006538 <USBD_CtlError>
            err++;
 80060a4:	7afb      	ldrb	r3, [r7, #11]
 80060a6:	3301      	adds	r3, #1
 80060a8:	72fb      	strb	r3, [r7, #11]
          break;
 80060aa:	e021      	b.n	80060f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00b      	beq.n	80060d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	7c12      	ldrb	r2, [r2, #16]
 80060c4:	f107 0108 	add.w	r1, r7, #8
 80060c8:	4610      	mov	r0, r2
 80060ca:	4798      	blx	r3
 80060cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060ce:	e00f      	b.n	80060f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fa30 	bl	8006538 <USBD_CtlError>
            err++;
 80060d8:	7afb      	ldrb	r3, [r7, #11]
 80060da:	3301      	adds	r3, #1
 80060dc:	72fb      	strb	r3, [r7, #11]
          break;
 80060de:	e007      	b.n	80060f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fa28 	bl	8006538 <USBD_CtlError>
          err++;
 80060e8:	7afb      	ldrb	r3, [r7, #11]
 80060ea:	3301      	adds	r3, #1
 80060ec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80060ee:	bf00      	nop
      }
      break;
 80060f0:	e037      	b.n	8006162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	7c1b      	ldrb	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d109      	bne.n	800610e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006102:	f107 0208 	add.w	r2, r7, #8
 8006106:	4610      	mov	r0, r2
 8006108:	4798      	blx	r3
 800610a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800610c:	e029      	b.n	8006162 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fa11 	bl	8006538 <USBD_CtlError>
        err++;
 8006116:	7afb      	ldrb	r3, [r7, #11]
 8006118:	3301      	adds	r3, #1
 800611a:	72fb      	strb	r3, [r7, #11]
      break;
 800611c:	e021      	b.n	8006162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	7c1b      	ldrb	r3, [r3, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10d      	bne.n	8006142 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	f107 0208 	add.w	r2, r7, #8
 8006132:	4610      	mov	r0, r2
 8006134:	4798      	blx	r3
 8006136:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3301      	adds	r3, #1
 800613c:	2207      	movs	r2, #7
 800613e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006140:	e00f      	b.n	8006162 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f9f7 	bl	8006538 <USBD_CtlError>
        err++;
 800614a:	7afb      	ldrb	r3, [r7, #11]
 800614c:	3301      	adds	r3, #1
 800614e:	72fb      	strb	r3, [r7, #11]
      break;
 8006150:	e007      	b.n	8006162 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006152:	6839      	ldr	r1, [r7, #0]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f9ef 	bl	8006538 <USBD_CtlError>
      err++;
 800615a:	7afb      	ldrb	r3, [r7, #11]
 800615c:	3301      	adds	r3, #1
 800615e:	72fb      	strb	r3, [r7, #11]
      break;
 8006160:	bf00      	nop
  }

  if (err != 0U)
 8006162:	7afb      	ldrb	r3, [r7, #11]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d11e      	bne.n	80061a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	88db      	ldrh	r3, [r3, #6]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d016      	beq.n	800619e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006170:	893b      	ldrh	r3, [r7, #8]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00e      	beq.n	8006194 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	88da      	ldrh	r2, [r3, #6]
 800617a:	893b      	ldrh	r3, [r7, #8]
 800617c:	4293      	cmp	r3, r2
 800617e:	bf28      	it	cs
 8006180:	4613      	movcs	r3, r2
 8006182:	b29b      	uxth	r3, r3
 8006184:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006186:	893b      	ldrh	r3, [r7, #8]
 8006188:	461a      	mov	r2, r3
 800618a:	68f9      	ldr	r1, [r7, #12]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fa44 	bl	800661a <USBD_CtlSendData>
 8006192:	e009      	b.n	80061a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f9ce 	bl	8006538 <USBD_CtlError>
 800619c:	e004      	b.n	80061a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fa95 	bl	80066ce <USBD_CtlSendStatus>
 80061a4:	e000      	b.n	80061a8 <USBD_GetDescriptor+0x2cc>
    return;
 80061a6:	bf00      	nop
  }
}
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop

080061b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	889b      	ldrh	r3, [r3, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d131      	bne.n	8006226 <USBD_SetAddress+0x76>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	88db      	ldrh	r3, [r3, #6]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d12d      	bne.n	8006226 <USBD_SetAddress+0x76>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	885b      	ldrh	r3, [r3, #2]
 80061ce:	2b7f      	cmp	r3, #127	; 0x7f
 80061d0:	d829      	bhi.n	8006226 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	885b      	ldrh	r3, [r3, #2]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d104      	bne.n	80061f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f9a3 	bl	8006538 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f2:	e01d      	b.n	8006230 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	7bfa      	ldrb	r2, [r7, #15]
 80061f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	4619      	mov	r1, r3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 feed 	bl	8006fe0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa61 	bl	80066ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800620c:	7bfb      	ldrb	r3, [r7, #15]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d004      	beq.n	800621c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2202      	movs	r2, #2
 8006216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800621a:	e009      	b.n	8006230 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006224:	e004      	b.n	8006230 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f985 	bl	8006538 <USBD_CtlError>
  }
}
 800622e:	bf00      	nop
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	885b      	ldrh	r3, [r3, #2]
 800624a:	b2da      	uxtb	r2, r3
 800624c:	4b4c      	ldr	r3, [pc, #304]	; (8006380 <USBD_SetConfig+0x148>)
 800624e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006250:	4b4b      	ldr	r3, [pc, #300]	; (8006380 <USBD_SetConfig+0x148>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d905      	bls.n	8006264 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f96c 	bl	8006538 <USBD_CtlError>
    return USBD_FAIL;
 8006260:	2303      	movs	r3, #3
 8006262:	e088      	b.n	8006376 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d002      	beq.n	8006276 <USBD_SetConfig+0x3e>
 8006270:	2b03      	cmp	r3, #3
 8006272:	d025      	beq.n	80062c0 <USBD_SetConfig+0x88>
 8006274:	e071      	b.n	800635a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006276:	4b42      	ldr	r3, [pc, #264]	; (8006380 <USBD_SetConfig+0x148>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d01c      	beq.n	80062b8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800627e:	4b40      	ldr	r3, [pc, #256]	; (8006380 <USBD_SetConfig+0x148>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006288:	4b3d      	ldr	r3, [pc, #244]	; (8006380 <USBD_SetConfig+0x148>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	4619      	mov	r1, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff f948 	bl	8005524 <USBD_SetClassConfig>
 8006294:	4603      	mov	r3, r0
 8006296:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d004      	beq.n	80062a8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f949 	bl	8006538 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80062a6:	e065      	b.n	8006374 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fa10 	bl	80066ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2203      	movs	r2, #3
 80062b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80062b6:	e05d      	b.n	8006374 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fa08 	bl	80066ce <USBD_CtlSendStatus>
      break;
 80062be:	e059      	b.n	8006374 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80062c0:	4b2f      	ldr	r3, [pc, #188]	; (8006380 <USBD_SetConfig+0x148>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d112      	bne.n	80062ee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80062d0:	4b2b      	ldr	r3, [pc, #172]	; (8006380 <USBD_SetConfig+0x148>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80062da:	4b29      	ldr	r3, [pc, #164]	; (8006380 <USBD_SetConfig+0x148>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff f93b 	bl	800555c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f9f1 	bl	80066ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80062ec:	e042      	b.n	8006374 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80062ee:	4b24      	ldr	r3, [pc, #144]	; (8006380 <USBD_SetConfig+0x148>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d02a      	beq.n	8006352 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff f929 	bl	800555c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800630a:	4b1d      	ldr	r3, [pc, #116]	; (8006380 <USBD_SetConfig+0x148>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006314:	4b1a      	ldr	r3, [pc, #104]	; (8006380 <USBD_SetConfig+0x148>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff f902 	bl	8005524 <USBD_SetClassConfig>
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00f      	beq.n	800634a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800632a:	6839      	ldr	r1, [r7, #0]
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f903 	bl	8006538 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff f90e 	bl	800555c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006348:	e014      	b.n	8006374 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f9bf 	bl	80066ce <USBD_CtlSendStatus>
      break;
 8006350:	e010      	b.n	8006374 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f9bb 	bl	80066ce <USBD_CtlSendStatus>
      break;
 8006358:	e00c      	b.n	8006374 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f8eb 	bl	8006538 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006362:	4b07      	ldr	r3, [pc, #28]	; (8006380 <USBD_SetConfig+0x148>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff f8f7 	bl	800555c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800636e:	2303      	movs	r3, #3
 8006370:	73fb      	strb	r3, [r7, #15]
      break;
 8006372:	bf00      	nop
  }

  return ret;
 8006374:	7bfb      	ldrb	r3, [r7, #15]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	2000025c 	.word	0x2000025c

08006384 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	88db      	ldrh	r3, [r3, #6]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d004      	beq.n	80063a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f8cd 	bl	8006538 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800639e:	e023      	b.n	80063e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	dc02      	bgt.n	80063b2 <USBD_GetConfig+0x2e>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dc03      	bgt.n	80063b8 <USBD_GetConfig+0x34>
 80063b0:	e015      	b.n	80063de <USBD_GetConfig+0x5a>
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d00b      	beq.n	80063ce <USBD_GetConfig+0x4a>
 80063b6:	e012      	b.n	80063de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3308      	adds	r3, #8
 80063c2:	2201      	movs	r2, #1
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f927 	bl	800661a <USBD_CtlSendData>
        break;
 80063cc:	e00c      	b.n	80063e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	3304      	adds	r3, #4
 80063d2:	2201      	movs	r2, #1
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f91f 	bl	800661a <USBD_CtlSendData>
        break;
 80063dc:	e004      	b.n	80063e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f8a9 	bl	8006538 <USBD_CtlError>
        break;
 80063e6:	bf00      	nop
}
 80063e8:	bf00      	nop
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006400:	b2db      	uxtb	r3, r3
 8006402:	3b01      	subs	r3, #1
 8006404:	2b02      	cmp	r3, #2
 8006406:	d81e      	bhi.n	8006446 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	88db      	ldrh	r3, [r3, #6]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d004      	beq.n	800641a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f890 	bl	8006538 <USBD_CtlError>
        break;
 8006418:	e01a      	b.n	8006450 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f043 0202 	orr.w	r2, r3, #2
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	330c      	adds	r3, #12
 800643a:	2202      	movs	r2, #2
 800643c:	4619      	mov	r1, r3
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f8eb 	bl	800661a <USBD_CtlSendData>
      break;
 8006444:	e004      	b.n	8006450 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f875 	bl	8006538 <USBD_CtlError>
      break;
 800644e:	bf00      	nop
  }
}
 8006450:	bf00      	nop
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	885b      	ldrh	r3, [r3, #2]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d106      	bne.n	8006478 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f92b 	bl	80066ce <USBD_CtlSendStatus>
  }
}
 8006478:	bf00      	nop
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006490:	b2db      	uxtb	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	2b02      	cmp	r3, #2
 8006496:	d80b      	bhi.n	80064b0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	885b      	ldrh	r3, [r3, #2]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d10c      	bne.n	80064ba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f910 	bl	80066ce <USBD_CtlSendStatus>
      }
      break;
 80064ae:	e004      	b.n	80064ba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f840 	bl	8006538 <USBD_CtlError>
      break;
 80064b8:	e000      	b.n	80064bc <USBD_ClrFeature+0x3c>
      break;
 80064ba:	bf00      	nop
  }
}
 80064bc:	bf00      	nop
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	781a      	ldrb	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3301      	adds	r3, #1
 80064de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	781a      	ldrb	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3301      	adds	r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f7ff fabb 	bl	8005a6a <SWAPBYTE>
 80064f4:	4603      	mov	r3, r0
 80064f6:	461a      	mov	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	3301      	adds	r3, #1
 8006500:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3301      	adds	r3, #1
 8006506:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f7ff faae 	bl	8005a6a <SWAPBYTE>
 800650e:	4603      	mov	r3, r0
 8006510:	461a      	mov	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3301      	adds	r3, #1
 800651a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3301      	adds	r3, #1
 8006520:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f7ff faa1 	bl	8005a6a <SWAPBYTE>
 8006528:	4603      	mov	r3, r0
 800652a:	461a      	mov	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	80da      	strh	r2, [r3, #6]
}
 8006530:	bf00      	nop
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006542:	2180      	movs	r1, #128	; 0x80
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fce1 	bl	8006f0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800654a:	2100      	movs	r1, #0
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fcdd 	bl	8006f0c <USBD_LL_StallEP>
}
 8006552:	bf00      	nop
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b086      	sub	sp, #24
 800655e:	af00      	add	r7, sp, #0
 8006560:	60f8      	str	r0, [r7, #12]
 8006562:	60b9      	str	r1, [r7, #8]
 8006564:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d036      	beq.n	80065de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006574:	6938      	ldr	r0, [r7, #16]
 8006576:	f000 f836 	bl	80065e6 <USBD_GetLen>
 800657a:	4603      	mov	r3, r0
 800657c:	3301      	adds	r3, #1
 800657e:	b29b      	uxth	r3, r3
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006588:	7dfb      	ldrb	r3, [r7, #23]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	4413      	add	r3, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	7812      	ldrb	r2, [r2, #0]
 8006592:	701a      	strb	r2, [r3, #0]
  idx++;
 8006594:	7dfb      	ldrb	r3, [r7, #23]
 8006596:	3301      	adds	r3, #1
 8006598:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	4413      	add	r3, r2
 80065a0:	2203      	movs	r2, #3
 80065a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
 80065a6:	3301      	adds	r3, #1
 80065a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80065aa:	e013      	b.n	80065d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	4413      	add	r3, r2
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	7812      	ldrb	r2, [r2, #0]
 80065b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	3301      	adds	r3, #1
 80065bc:	613b      	str	r3, [r7, #16]
    idx++;
 80065be:	7dfb      	ldrb	r3, [r7, #23]
 80065c0:	3301      	adds	r3, #1
 80065c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	4413      	add	r3, r2
 80065ca:	2200      	movs	r2, #0
 80065cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80065ce:	7dfb      	ldrb	r3, [r7, #23]
 80065d0:	3301      	adds	r3, #1
 80065d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e7      	bne.n	80065ac <USBD_GetString+0x52>
 80065dc:	e000      	b.n	80065e0 <USBD_GetString+0x86>
    return;
 80065de:	bf00      	nop
  }
}
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80065f6:	e005      	b.n	8006604 <USBD_GetLen+0x1e>
  {
    len++;
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	3301      	adds	r3, #1
 80065fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	3301      	adds	r3, #1
 8006602:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1f5      	bne.n	80065f8 <USBD_GetLen+0x12>
  }

  return len;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b084      	sub	sp, #16
 800661e:	af00      	add	r7, sp, #0
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	60b9      	str	r1, [r7, #8]
 8006624:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2202      	movs	r2, #2
 800662a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	2100      	movs	r1, #0
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 fcec 	bl	800701e <USBD_LL_Transmit>

  return USBD_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	2100      	movs	r1, #0
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 fcdb 	bl	800701e <USBD_LL_Transmit>

  return USBD_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2203      	movs	r2, #3
 8006682:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	2100      	movs	r1, #0
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 fcdf 	bl	8007060 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	2100      	movs	r1, #0
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 fcce 	bl	8007060 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2204      	movs	r2, #4
 80066da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80066de:	2300      	movs	r3, #0
 80066e0:	2200      	movs	r2, #0
 80066e2:	2100      	movs	r1, #0
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fc9a 	bl	800701e <USBD_LL_Transmit>

  return USBD_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2205      	movs	r2, #5
 8006700:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006704:	2300      	movs	r3, #0
 8006706:	2200      	movs	r2, #0
 8006708:	2100      	movs	r1, #0
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fca8 	bl	8007060 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006720:	2200      	movs	r2, #0
 8006722:	4912      	ldr	r1, [pc, #72]	; (800676c <MX_USB_DEVICE_Init+0x50>)
 8006724:	4812      	ldr	r0, [pc, #72]	; (8006770 <MX_USB_DEVICE_Init+0x54>)
 8006726:	f7fe fe8f 	bl	8005448 <USBD_Init>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006730:	f7fa f970 	bl	8000a14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006734:	490f      	ldr	r1, [pc, #60]	; (8006774 <MX_USB_DEVICE_Init+0x58>)
 8006736:	480e      	ldr	r0, [pc, #56]	; (8006770 <MX_USB_DEVICE_Init+0x54>)
 8006738:	f7fe feb6 	bl	80054a8 <USBD_RegisterClass>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006742:	f7fa f967 	bl	8000a14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006746:	490c      	ldr	r1, [pc, #48]	; (8006778 <MX_USB_DEVICE_Init+0x5c>)
 8006748:	4809      	ldr	r0, [pc, #36]	; (8006770 <MX_USB_DEVICE_Init+0x54>)
 800674a:	f7fe fdd7 	bl	80052fc <USBD_CDC_RegisterInterface>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006754:	f7fa f95e 	bl	8000a14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006758:	4805      	ldr	r0, [pc, #20]	; (8006770 <MX_USB_DEVICE_Init+0x54>)
 800675a:	f7fe fecc 	bl	80054f6 <USBD_Start>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006764:	f7fa f956 	bl	8000a14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006768:	bf00      	nop
 800676a:	bd80      	pop	{r7, pc}
 800676c:	20000130 	.word	0x20000130
 8006770:	2000048c 	.word	0x2000048c
 8006774:	20000018 	.word	0x20000018
 8006778:	2000011c 	.word	0x2000011c

0800677c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006780:	2200      	movs	r2, #0
 8006782:	4905      	ldr	r1, [pc, #20]	; (8006798 <CDC_Init_FS+0x1c>)
 8006784:	4805      	ldr	r0, [pc, #20]	; (800679c <CDC_Init_FS+0x20>)
 8006786:	f7fe fdce 	bl	8005326 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800678a:	4905      	ldr	r1, [pc, #20]	; (80067a0 <CDC_Init_FS+0x24>)
 800678c:	4803      	ldr	r0, [pc, #12]	; (800679c <CDC_Init_FS+0x20>)
 800678e:	f7fe fde8 	bl	8005362 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006792:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006794:	4618      	mov	r0, r3
 8006796:	bd80      	pop	{r7, pc}
 8006798:	20000f5c 	.word	0x20000f5c
 800679c:	2000048c 	.word	0x2000048c
 80067a0:	2000075c 	.word	0x2000075c

080067a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80067a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	6039      	str	r1, [r7, #0]
 80067be:	71fb      	strb	r3, [r7, #7]
 80067c0:	4613      	mov	r3, r2
 80067c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80067c4:	79fb      	ldrb	r3, [r7, #7]
 80067c6:	2b23      	cmp	r3, #35	; 0x23
 80067c8:	d84a      	bhi.n	8006860 <CDC_Control_FS+0xac>
 80067ca:	a201      	add	r2, pc, #4	; (adr r2, 80067d0 <CDC_Control_FS+0x1c>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	08006861 	.word	0x08006861
 80067d4:	08006861 	.word	0x08006861
 80067d8:	08006861 	.word	0x08006861
 80067dc:	08006861 	.word	0x08006861
 80067e0:	08006861 	.word	0x08006861
 80067e4:	08006861 	.word	0x08006861
 80067e8:	08006861 	.word	0x08006861
 80067ec:	08006861 	.word	0x08006861
 80067f0:	08006861 	.word	0x08006861
 80067f4:	08006861 	.word	0x08006861
 80067f8:	08006861 	.word	0x08006861
 80067fc:	08006861 	.word	0x08006861
 8006800:	08006861 	.word	0x08006861
 8006804:	08006861 	.word	0x08006861
 8006808:	08006861 	.word	0x08006861
 800680c:	08006861 	.word	0x08006861
 8006810:	08006861 	.word	0x08006861
 8006814:	08006861 	.word	0x08006861
 8006818:	08006861 	.word	0x08006861
 800681c:	08006861 	.word	0x08006861
 8006820:	08006861 	.word	0x08006861
 8006824:	08006861 	.word	0x08006861
 8006828:	08006861 	.word	0x08006861
 800682c:	08006861 	.word	0x08006861
 8006830:	08006861 	.word	0x08006861
 8006834:	08006861 	.word	0x08006861
 8006838:	08006861 	.word	0x08006861
 800683c:	08006861 	.word	0x08006861
 8006840:	08006861 	.word	0x08006861
 8006844:	08006861 	.word	0x08006861
 8006848:	08006861 	.word	0x08006861
 800684c:	08006861 	.word	0x08006861
 8006850:	08006861 	.word	0x08006861
 8006854:	08006861 	.word	0x08006861
 8006858:	08006861 	.word	0x08006861
 800685c:	08006861 	.word	0x08006861
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006860:	bf00      	nop
  }

  return (USBD_OK);
 8006862:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006864:	4618      	mov	r0, r3
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	4805      	ldr	r0, [pc, #20]	; (8006894 <CDC_Receive_FS+0x24>)
 800687e:	f7fe fd70 	bl	8005362 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006882:	4804      	ldr	r0, [pc, #16]	; (8006894 <CDC_Receive_FS+0x24>)
 8006884:	f7fe fdb6 	bl	80053f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006888:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	2000048c 	.word	0x2000048c

08006898 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	460b      	mov	r3, r1
 80068a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80068a8:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <CDC_Transmit_FS+0x48>)
 80068aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e00b      	b.n	80068d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80068be:	887b      	ldrh	r3, [r7, #2]
 80068c0:	461a      	mov	r2, r3
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	4806      	ldr	r0, [pc, #24]	; (80068e0 <CDC_Transmit_FS+0x48>)
 80068c6:	f7fe fd2e 	bl	8005326 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80068ca:	4805      	ldr	r0, [pc, #20]	; (80068e0 <CDC_Transmit_FS+0x48>)
 80068cc:	f7fe fd62 	bl	8005394 <USBD_CDC_TransmitPacket>
 80068d0:	4603      	mov	r3, r0
 80068d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	2000048c 	.word	0x2000048c

080068e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	4613      	mov	r3, r2
 80068f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80068f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
	...

08006908 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	6039      	str	r1, [r7, #0]
 8006912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2212      	movs	r2, #18
 8006918:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800691a:	4b03      	ldr	r3, [pc, #12]	; (8006928 <USBD_FS_DeviceDescriptor+0x20>)
}
 800691c:	4618      	mov	r0, r3
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	2000014c 	.word	0x2000014c

0800692c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	6039      	str	r1, [r7, #0]
 8006936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2204      	movs	r2, #4
 800693c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800693e:	4b03      	ldr	r3, [pc, #12]	; (800694c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	20000160 	.word	0x20000160

08006950 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	4603      	mov	r3, r0
 8006958:	6039      	str	r1, [r7, #0]
 800695a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d105      	bne.n	800696e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	4907      	ldr	r1, [pc, #28]	; (8006984 <USBD_FS_ProductStrDescriptor+0x34>)
 8006966:	4808      	ldr	r0, [pc, #32]	; (8006988 <USBD_FS_ProductStrDescriptor+0x38>)
 8006968:	f7ff fdf7 	bl	800655a <USBD_GetString>
 800696c:	e004      	b.n	8006978 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	4904      	ldr	r1, [pc, #16]	; (8006984 <USBD_FS_ProductStrDescriptor+0x34>)
 8006972:	4805      	ldr	r0, [pc, #20]	; (8006988 <USBD_FS_ProductStrDescriptor+0x38>)
 8006974:	f7ff fdf1 	bl	800655a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006978:	4b02      	ldr	r3, [pc, #8]	; (8006984 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	2000175c 	.word	0x2000175c
 8006988:	08007a34 	.word	0x08007a34

0800698c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	4603      	mov	r3, r0
 8006994:	6039      	str	r1, [r7, #0]
 8006996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	4904      	ldr	r1, [pc, #16]	; (80069ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800699c:	4804      	ldr	r0, [pc, #16]	; (80069b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800699e:	f7ff fddc 	bl	800655a <USBD_GetString>
  return USBD_StrDesc;
 80069a2:	4b02      	ldr	r3, [pc, #8]	; (80069ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	2000175c 	.word	0x2000175c
 80069b0:	08007a4c 	.word	0x08007a4c

080069b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	6039      	str	r1, [r7, #0]
 80069be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	221a      	movs	r2, #26
 80069c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80069c6:	f000 f843 	bl	8006a50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80069ca:	4b02      	ldr	r3, [pc, #8]	; (80069d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	20000164 	.word	0x20000164

080069d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	6039      	str	r1, [r7, #0]
 80069e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80069e4:	79fb      	ldrb	r3, [r7, #7]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d105      	bne.n	80069f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	4907      	ldr	r1, [pc, #28]	; (8006a0c <USBD_FS_ConfigStrDescriptor+0x34>)
 80069ee:	4808      	ldr	r0, [pc, #32]	; (8006a10 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069f0:	f7ff fdb3 	bl	800655a <USBD_GetString>
 80069f4:	e004      	b.n	8006a00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	4904      	ldr	r1, [pc, #16]	; (8006a0c <USBD_FS_ConfigStrDescriptor+0x34>)
 80069fa:	4805      	ldr	r0, [pc, #20]	; (8006a10 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069fc:	f7ff fdad 	bl	800655a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a00:	4b02      	ldr	r3, [pc, #8]	; (8006a0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	2000175c 	.word	0x2000175c
 8006a10:	08007a60 	.word	0x08007a60

08006a14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	6039      	str	r1, [r7, #0]
 8006a1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d105      	bne.n	8006a32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	4907      	ldr	r1, [pc, #28]	; (8006a48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a2a:	4808      	ldr	r0, [pc, #32]	; (8006a4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a2c:	f7ff fd95 	bl	800655a <USBD_GetString>
 8006a30:	e004      	b.n	8006a3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	4904      	ldr	r1, [pc, #16]	; (8006a48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a36:	4805      	ldr	r0, [pc, #20]	; (8006a4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a38:	f7ff fd8f 	bl	800655a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a3c:	4b02      	ldr	r3, [pc, #8]	; (8006a48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	2000175c 	.word	0x2000175c
 8006a4c:	08007a6c 	.word	0x08007a6c

08006a50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a56:	4b0f      	ldr	r3, [pc, #60]	; (8006a94 <Get_SerialNum+0x44>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a5c:	4b0e      	ldr	r3, [pc, #56]	; (8006a98 <Get_SerialNum+0x48>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a62:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <Get_SerialNum+0x4c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d009      	beq.n	8006a8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a76:	2208      	movs	r2, #8
 8006a78:	4909      	ldr	r1, [pc, #36]	; (8006aa0 <Get_SerialNum+0x50>)
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 f814 	bl	8006aa8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a80:	2204      	movs	r2, #4
 8006a82:	4908      	ldr	r1, [pc, #32]	; (8006aa4 <Get_SerialNum+0x54>)
 8006a84:	68b8      	ldr	r0, [r7, #8]
 8006a86:	f000 f80f 	bl	8006aa8 <IntToUnicode>
  }
}
 8006a8a:	bf00      	nop
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	1fff7a10 	.word	0x1fff7a10
 8006a98:	1fff7a14 	.word	0x1fff7a14
 8006a9c:	1fff7a18 	.word	0x1fff7a18
 8006aa0:	20000166 	.word	0x20000166
 8006aa4:	20000176 	.word	0x20000176

08006aa8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006aba:	2300      	movs	r3, #0
 8006abc:	75fb      	strb	r3, [r7, #23]
 8006abe:	e027      	b.n	8006b10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	0f1b      	lsrs	r3, r3, #28
 8006ac4:	2b09      	cmp	r3, #9
 8006ac6:	d80b      	bhi.n	8006ae0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	0f1b      	lsrs	r3, r3, #28
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	440b      	add	r3, r1
 8006ad8:	3230      	adds	r2, #48	; 0x30
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	e00a      	b.n	8006af6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	0f1b      	lsrs	r3, r3, #28
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	7dfb      	ldrb	r3, [r7, #23]
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	4619      	mov	r1, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	440b      	add	r3, r1
 8006af0:	3237      	adds	r2, #55	; 0x37
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006afc:	7dfb      	ldrb	r3, [r7, #23]
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	3301      	adds	r3, #1
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	4413      	add	r3, r2
 8006b06:	2200      	movs	r2, #0
 8006b08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	75fb      	strb	r3, [r7, #23]
 8006b10:	7dfa      	ldrb	r2, [r7, #23]
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d3d3      	bcc.n	8006ac0 <IntToUnicode+0x18>
  }
}
 8006b18:	bf00      	nop
 8006b1a:	bf00      	nop
 8006b1c:	371c      	adds	r7, #28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
	...

08006b28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08a      	sub	sp, #40	; 0x28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b30:	f107 0314 	add.w	r3, r7, #20
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	605a      	str	r2, [r3, #4]
 8006b3a:	609a      	str	r2, [r3, #8]
 8006b3c:	60da      	str	r2, [r3, #12]
 8006b3e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b48:	d13a      	bne.n	8006bc0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	613b      	str	r3, [r7, #16]
 8006b4e:	4b1e      	ldr	r3, [pc, #120]	; (8006bc8 <HAL_PCD_MspInit+0xa0>)
 8006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b52:	4a1d      	ldr	r2, [pc, #116]	; (8006bc8 <HAL_PCD_MspInit+0xa0>)
 8006b54:	f043 0301 	orr.w	r3, r3, #1
 8006b58:	6313      	str	r3, [r2, #48]	; 0x30
 8006b5a:	4b1b      	ldr	r3, [pc, #108]	; (8006bc8 <HAL_PCD_MspInit+0xa0>)
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b74:	2303      	movs	r3, #3
 8006b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b78:	230a      	movs	r3, #10
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b7c:	f107 0314 	add.w	r3, r7, #20
 8006b80:	4619      	mov	r1, r3
 8006b82:	4812      	ldr	r0, [pc, #72]	; (8006bcc <HAL_PCD_MspInit+0xa4>)
 8006b84:	f7fa fa0a 	bl	8000f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b88:	4b0f      	ldr	r3, [pc, #60]	; (8006bc8 <HAL_PCD_MspInit+0xa0>)
 8006b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8c:	4a0e      	ldr	r2, [pc, #56]	; (8006bc8 <HAL_PCD_MspInit+0xa0>)
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b92:	6353      	str	r3, [r2, #52]	; 0x34
 8006b94:	2300      	movs	r3, #0
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <HAL_PCD_MspInit+0xa0>)
 8006b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9c:	4a0a      	ldr	r2, [pc, #40]	; (8006bc8 <HAL_PCD_MspInit+0xa0>)
 8006b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ba2:	6453      	str	r3, [r2, #68]	; 0x44
 8006ba4:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <HAL_PCD_MspInit+0xa0>)
 8006ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	2043      	movs	r0, #67	; 0x43
 8006bb6:	f7fa f9ba 	bl	8000f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006bba:	2043      	movs	r0, #67	; 0x43
 8006bbc:	f7fa f9d3 	bl	8000f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006bc0:	bf00      	nop
 8006bc2:	3728      	adds	r7, #40	; 0x28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	40023800 	.word	0x40023800
 8006bcc:	40020000 	.word	0x40020000

08006bd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006be4:	4619      	mov	r1, r3
 8006be6:	4610      	mov	r0, r2
 8006be8:	f7fe fcd0 	bl	800558c <USBD_LL_SetupStage>
}
 8006bec:	bf00      	nop
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006c06:	78fa      	ldrb	r2, [r7, #3]
 8006c08:	6879      	ldr	r1, [r7, #4]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	1a9b      	subs	r3, r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	440b      	add	r3, r1
 8006c14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	f7fe fd0a 	bl	8005636 <USBD_LL_DataOutStage>
}
 8006c22:	bf00      	nop
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	460b      	mov	r3, r1
 8006c34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006c3c:	78fa      	ldrb	r2, [r7, #3]
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	4613      	mov	r3, r2
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	440b      	add	r3, r1
 8006c4a:	3348      	adds	r3, #72	; 0x48
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	4619      	mov	r1, r3
 8006c52:	f7fe fd53 	bl	80056fc <USBD_LL_DataInStage>
}
 8006c56:	bf00      	nop
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fe fe67 	bl	8005940 <USBD_LL_SOF>
}
 8006c72:	bf00      	nop
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c82:	2301      	movs	r3, #1
 8006c84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d102      	bne.n	8006c94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	73fb      	strb	r3, [r7, #15]
 8006c92:	e008      	b.n	8006ca6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d102      	bne.n	8006ca2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	73fb      	strb	r3, [r7, #15]
 8006ca0:	e001      	b.n	8006ca6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006ca2:	f7f9 feb7 	bl	8000a14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cac:	7bfa      	ldrb	r2, [r7, #15]
 8006cae:	4611      	mov	r1, r2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fe fe07 	bl	80058c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fe fdb3 	bl	8005828 <USBD_LL_Reset>
}
 8006cc2:	bf00      	nop
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fe fe02 	bl	80058e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6812      	ldr	r2, [r2, #0]
 8006cee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cf2:	f043 0301 	orr.w	r3, r3, #1
 8006cf6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d005      	beq.n	8006d0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d00:	4b04      	ldr	r3, [pc, #16]	; (8006d14 <HAL_PCD_SuspendCallback+0x48>)
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	4a03      	ldr	r2, [pc, #12]	; (8006d14 <HAL_PCD_SuspendCallback+0x48>)
 8006d06:	f043 0306 	orr.w	r3, r3, #6
 8006d0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006d0c:	bf00      	nop
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	e000ed00 	.word	0xe000ed00

08006d18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fdf2 	bl	8005910 <USBD_LL_Resume>
}
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe fe40 	bl	80059d0 <USBD_LL_IsoOUTIncomplete>
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d6a:	78fa      	ldrb	r2, [r7, #3]
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe fe08 	bl	8005984 <USBD_LL_IsoINIncomplete>
}
 8006d74:	bf00      	nop
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fe fe46 	bl	8005a1c <USBD_LL_DevConnected>
}
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fe fe43 	bl	8005a32 <USBD_LL_DevDisconnected>
}
 8006dac:	bf00      	nop
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d13c      	bne.n	8006e3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006dc4:	4a20      	ldr	r2, [pc, #128]	; (8006e48 <USBD_LL_Init+0x94>)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a1e      	ldr	r2, [pc, #120]	; (8006e48 <USBD_LL_Init+0x94>)
 8006dd0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006dd4:	4b1c      	ldr	r3, [pc, #112]	; (8006e48 <USBD_LL_Init+0x94>)
 8006dd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006dda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006ddc:	4b1a      	ldr	r3, [pc, #104]	; (8006e48 <USBD_LL_Init+0x94>)
 8006dde:	2204      	movs	r2, #4
 8006de0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006de2:	4b19      	ldr	r3, [pc, #100]	; (8006e48 <USBD_LL_Init+0x94>)
 8006de4:	2202      	movs	r2, #2
 8006de6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006de8:	4b17      	ldr	r3, [pc, #92]	; (8006e48 <USBD_LL_Init+0x94>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006dee:	4b16      	ldr	r3, [pc, #88]	; (8006e48 <USBD_LL_Init+0x94>)
 8006df0:	2202      	movs	r2, #2
 8006df2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006df4:	4b14      	ldr	r3, [pc, #80]	; (8006e48 <USBD_LL_Init+0x94>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006dfa:	4b13      	ldr	r3, [pc, #76]	; (8006e48 <USBD_LL_Init+0x94>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006e00:	4b11      	ldr	r3, [pc, #68]	; (8006e48 <USBD_LL_Init+0x94>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006e06:	4b10      	ldr	r3, [pc, #64]	; (8006e48 <USBD_LL_Init+0x94>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006e0c:	4b0e      	ldr	r3, [pc, #56]	; (8006e48 <USBD_LL_Init+0x94>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006e12:	480d      	ldr	r0, [pc, #52]	; (8006e48 <USBD_LL_Init+0x94>)
 8006e14:	f7fa fa77 	bl	8001306 <HAL_PCD_Init>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006e1e:	f7f9 fdf9 	bl	8000a14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006e22:	2180      	movs	r1, #128	; 0x80
 8006e24:	4808      	ldr	r0, [pc, #32]	; (8006e48 <USBD_LL_Init+0x94>)
 8006e26:	f7fb fbd4 	bl	80025d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006e2a:	2240      	movs	r2, #64	; 0x40
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	4806      	ldr	r0, [pc, #24]	; (8006e48 <USBD_LL_Init+0x94>)
 8006e30:	f7fb fb88 	bl	8002544 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006e34:	2280      	movs	r2, #128	; 0x80
 8006e36:	2101      	movs	r1, #1
 8006e38:	4803      	ldr	r0, [pc, #12]	; (8006e48 <USBD_LL_Init+0x94>)
 8006e3a:	f7fb fb83 	bl	8002544 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	2000195c 	.word	0x2000195c

08006e4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fa fb6c 	bl	8001540 <HAL_PCD_Start>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 f942 	bl	80070f8 <USBD_Get_USB_Status>
 8006e74:	4603      	mov	r3, r0
 8006e76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	4608      	mov	r0, r1
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	461a      	mov	r2, r3
 8006e90:	4603      	mov	r3, r0
 8006e92:	70fb      	strb	r3, [r7, #3]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70bb      	strb	r3, [r7, #2]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006eaa:	78bb      	ldrb	r3, [r7, #2]
 8006eac:	883a      	ldrh	r2, [r7, #0]
 8006eae:	78f9      	ldrb	r1, [r7, #3]
 8006eb0:	f7fa ff50 	bl	8001d54 <HAL_PCD_EP_Open>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 f91c 	bl	80070f8 <USBD_Get_USB_Status>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ee8:	78fa      	ldrb	r2, [r7, #3]
 8006eea:	4611      	mov	r1, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fa ff99 	bl	8001e24 <HAL_PCD_EP_Close>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 f8fd 	bl	80070f8 <USBD_Get_USB_Status>
 8006efe:	4603      	mov	r3, r0
 8006f00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f26:	78fa      	ldrb	r2, [r7, #3]
 8006f28:	4611      	mov	r1, r2
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fb f871 	bl	8002012 <HAL_PCD_EP_SetStall>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 f8de 	bl	80070f8 <USBD_Get_USB_Status>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	460b      	mov	r3, r1
 8006f54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f64:	78fa      	ldrb	r2, [r7, #3]
 8006f66:	4611      	mov	r1, r2
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fb f8b6 	bl	80020da <HAL_PCD_EP_ClrStall>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 f8bf 	bl	80070f8 <USBD_Get_USB_Status>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006f9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	da0b      	bge.n	8006fbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006fa4:	78fb      	ldrb	r3, [r7, #3]
 8006fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006faa:	68f9      	ldr	r1, [r7, #12]
 8006fac:	4613      	mov	r3, r2
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	440b      	add	r3, r1
 8006fb6:	333e      	adds	r3, #62	; 0x3e
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	e00b      	b.n	8006fd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006fbc:	78fb      	ldrb	r3, [r7, #3]
 8006fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fc2:	68f9      	ldr	r1, [r7, #12]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	1a9b      	subs	r3, r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	440b      	add	r3, r1
 8006fce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006fd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ffa:	78fa      	ldrb	r2, [r7, #3]
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fa fe83 	bl	8001d0a <HAL_PCD_SetAddress>
 8007004:	4603      	mov	r3, r0
 8007006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	4618      	mov	r0, r3
 800700c:	f000 f874 	bl	80070f8 <USBD_Get_USB_Status>
 8007010:	4603      	mov	r3, r0
 8007012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007014:	7bbb      	ldrb	r3, [r7, #14]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b086      	sub	sp, #24
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
 800702a:	460b      	mov	r3, r1
 800702c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800703c:	7af9      	ldrb	r1, [r7, #11]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	f7fa ff9c 	bl	8001f7e <HAL_PCD_EP_Transmit>
 8007046:	4603      	mov	r3, r0
 8007048:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	4618      	mov	r0, r3
 800704e:	f000 f853 	bl	80070f8 <USBD_Get_USB_Status>
 8007052:	4603      	mov	r3, r0
 8007054:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007056:	7dbb      	ldrb	r3, [r7, #22]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	607a      	str	r2, [r7, #4]
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	460b      	mov	r3, r1
 800706e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800707e:	7af9      	ldrb	r1, [r7, #11]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	f7fa ff18 	bl	8001eb8 <HAL_PCD_EP_Receive>
 8007088:	4603      	mov	r3, r0
 800708a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800708c:	7dfb      	ldrb	r3, [r7, #23]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 f832 	bl	80070f8 <USBD_Get_USB_Status>
 8007094:	4603      	mov	r3, r0
 8007096:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007098:	7dbb      	ldrb	r3, [r7, #22]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	460b      	mov	r3, r1
 80070ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80070b4:	78fa      	ldrb	r2, [r7, #3]
 80070b6:	4611      	mov	r1, r2
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fa ff48 	bl	8001f4e <HAL_PCD_EP_GetRxCount>
 80070be:	4603      	mov	r3, r0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80070d0:	4b03      	ldr	r3, [pc, #12]	; (80070e0 <USBD_static_malloc+0x18>)
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20000260 	.word	0x20000260

080070e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]

}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	4603      	mov	r3, r0
 8007100:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	2b03      	cmp	r3, #3
 800710a:	d817      	bhi.n	800713c <USBD_Get_USB_Status+0x44>
 800710c:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <USBD_Get_USB_Status+0x1c>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	08007125 	.word	0x08007125
 8007118:	0800712b 	.word	0x0800712b
 800711c:	08007131 	.word	0x08007131
 8007120:	08007137 	.word	0x08007137
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
    break;
 8007128:	e00b      	b.n	8007142 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800712a:	2303      	movs	r3, #3
 800712c:	73fb      	strb	r3, [r7, #15]
    break;
 800712e:	e008      	b.n	8007142 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007130:	2301      	movs	r3, #1
 8007132:	73fb      	strb	r3, [r7, #15]
    break;
 8007134:	e005      	b.n	8007142 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007136:	2303      	movs	r3, #3
 8007138:	73fb      	strb	r3, [r7, #15]
    break;
 800713a:	e002      	b.n	8007142 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800713c:	2303      	movs	r3, #3
 800713e:	73fb      	strb	r3, [r7, #15]
    break;
 8007140:	bf00      	nop
  }
  return usb_status;
 8007142:	7bfb      	ldrb	r3, [r7, #15]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <__errno>:
 8007150:	4b01      	ldr	r3, [pc, #4]	; (8007158 <__errno+0x8>)
 8007152:	6818      	ldr	r0, [r3, #0]
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	20000180 	.word	0x20000180

0800715c <__libc_init_array>:
 800715c:	b570      	push	{r4, r5, r6, lr}
 800715e:	4d0d      	ldr	r5, [pc, #52]	; (8007194 <__libc_init_array+0x38>)
 8007160:	4c0d      	ldr	r4, [pc, #52]	; (8007198 <__libc_init_array+0x3c>)
 8007162:	1b64      	subs	r4, r4, r5
 8007164:	10a4      	asrs	r4, r4, #2
 8007166:	2600      	movs	r6, #0
 8007168:	42a6      	cmp	r6, r4
 800716a:	d109      	bne.n	8007180 <__libc_init_array+0x24>
 800716c:	4d0b      	ldr	r5, [pc, #44]	; (800719c <__libc_init_array+0x40>)
 800716e:	4c0c      	ldr	r4, [pc, #48]	; (80071a0 <__libc_init_array+0x44>)
 8007170:	f000 fc4e 	bl	8007a10 <_init>
 8007174:	1b64      	subs	r4, r4, r5
 8007176:	10a4      	asrs	r4, r4, #2
 8007178:	2600      	movs	r6, #0
 800717a:	42a6      	cmp	r6, r4
 800717c:	d105      	bne.n	800718a <__libc_init_array+0x2e>
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	f855 3b04 	ldr.w	r3, [r5], #4
 8007184:	4798      	blx	r3
 8007186:	3601      	adds	r6, #1
 8007188:	e7ee      	b.n	8007168 <__libc_init_array+0xc>
 800718a:	f855 3b04 	ldr.w	r3, [r5], #4
 800718e:	4798      	blx	r3
 8007190:	3601      	adds	r6, #1
 8007192:	e7f2      	b.n	800717a <__libc_init_array+0x1e>
 8007194:	08007ac8 	.word	0x08007ac8
 8007198:	08007ac8 	.word	0x08007ac8
 800719c:	08007ac8 	.word	0x08007ac8
 80071a0:	08007acc 	.word	0x08007acc

080071a4 <memset>:
 80071a4:	4402      	add	r2, r0
 80071a6:	4603      	mov	r3, r0
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d100      	bne.n	80071ae <memset+0xa>
 80071ac:	4770      	bx	lr
 80071ae:	f803 1b01 	strb.w	r1, [r3], #1
 80071b2:	e7f9      	b.n	80071a8 <memset+0x4>

080071b4 <siprintf>:
 80071b4:	b40e      	push	{r1, r2, r3}
 80071b6:	b500      	push	{lr}
 80071b8:	b09c      	sub	sp, #112	; 0x70
 80071ba:	ab1d      	add	r3, sp, #116	; 0x74
 80071bc:	9002      	str	r0, [sp, #8]
 80071be:	9006      	str	r0, [sp, #24]
 80071c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071c4:	4809      	ldr	r0, [pc, #36]	; (80071ec <siprintf+0x38>)
 80071c6:	9107      	str	r1, [sp, #28]
 80071c8:	9104      	str	r1, [sp, #16]
 80071ca:	4909      	ldr	r1, [pc, #36]	; (80071f0 <siprintf+0x3c>)
 80071cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80071d0:	9105      	str	r1, [sp, #20]
 80071d2:	6800      	ldr	r0, [r0, #0]
 80071d4:	9301      	str	r3, [sp, #4]
 80071d6:	a902      	add	r1, sp, #8
 80071d8:	f000 f868 	bl	80072ac <_svfiprintf_r>
 80071dc:	9b02      	ldr	r3, [sp, #8]
 80071de:	2200      	movs	r2, #0
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	b01c      	add	sp, #112	; 0x70
 80071e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071e8:	b003      	add	sp, #12
 80071ea:	4770      	bx	lr
 80071ec:	20000180 	.word	0x20000180
 80071f0:	ffff0208 	.word	0xffff0208

080071f4 <__ssputs_r>:
 80071f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071f8:	688e      	ldr	r6, [r1, #8]
 80071fa:	429e      	cmp	r6, r3
 80071fc:	4682      	mov	sl, r0
 80071fe:	460c      	mov	r4, r1
 8007200:	4690      	mov	r8, r2
 8007202:	461f      	mov	r7, r3
 8007204:	d838      	bhi.n	8007278 <__ssputs_r+0x84>
 8007206:	898a      	ldrh	r2, [r1, #12]
 8007208:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800720c:	d032      	beq.n	8007274 <__ssputs_r+0x80>
 800720e:	6825      	ldr	r5, [r4, #0]
 8007210:	6909      	ldr	r1, [r1, #16]
 8007212:	eba5 0901 	sub.w	r9, r5, r1
 8007216:	6965      	ldr	r5, [r4, #20]
 8007218:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800721c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007220:	3301      	adds	r3, #1
 8007222:	444b      	add	r3, r9
 8007224:	106d      	asrs	r5, r5, #1
 8007226:	429d      	cmp	r5, r3
 8007228:	bf38      	it	cc
 800722a:	461d      	movcc	r5, r3
 800722c:	0553      	lsls	r3, r2, #21
 800722e:	d531      	bpl.n	8007294 <__ssputs_r+0xa0>
 8007230:	4629      	mov	r1, r5
 8007232:	f000 fb47 	bl	80078c4 <_malloc_r>
 8007236:	4606      	mov	r6, r0
 8007238:	b950      	cbnz	r0, 8007250 <__ssputs_r+0x5c>
 800723a:	230c      	movs	r3, #12
 800723c:	f8ca 3000 	str.w	r3, [sl]
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007246:	81a3      	strh	r3, [r4, #12]
 8007248:	f04f 30ff 	mov.w	r0, #4294967295
 800724c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007250:	6921      	ldr	r1, [r4, #16]
 8007252:	464a      	mov	r2, r9
 8007254:	f000 fabe 	bl	80077d4 <memcpy>
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800725e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007262:	81a3      	strh	r3, [r4, #12]
 8007264:	6126      	str	r6, [r4, #16]
 8007266:	6165      	str	r5, [r4, #20]
 8007268:	444e      	add	r6, r9
 800726a:	eba5 0509 	sub.w	r5, r5, r9
 800726e:	6026      	str	r6, [r4, #0]
 8007270:	60a5      	str	r5, [r4, #8]
 8007272:	463e      	mov	r6, r7
 8007274:	42be      	cmp	r6, r7
 8007276:	d900      	bls.n	800727a <__ssputs_r+0x86>
 8007278:	463e      	mov	r6, r7
 800727a:	4632      	mov	r2, r6
 800727c:	6820      	ldr	r0, [r4, #0]
 800727e:	4641      	mov	r1, r8
 8007280:	f000 fab6 	bl	80077f0 <memmove>
 8007284:	68a3      	ldr	r3, [r4, #8]
 8007286:	6822      	ldr	r2, [r4, #0]
 8007288:	1b9b      	subs	r3, r3, r6
 800728a:	4432      	add	r2, r6
 800728c:	60a3      	str	r3, [r4, #8]
 800728e:	6022      	str	r2, [r4, #0]
 8007290:	2000      	movs	r0, #0
 8007292:	e7db      	b.n	800724c <__ssputs_r+0x58>
 8007294:	462a      	mov	r2, r5
 8007296:	f000 fb6f 	bl	8007978 <_realloc_r>
 800729a:	4606      	mov	r6, r0
 800729c:	2800      	cmp	r0, #0
 800729e:	d1e1      	bne.n	8007264 <__ssputs_r+0x70>
 80072a0:	6921      	ldr	r1, [r4, #16]
 80072a2:	4650      	mov	r0, sl
 80072a4:	f000 fabe 	bl	8007824 <_free_r>
 80072a8:	e7c7      	b.n	800723a <__ssputs_r+0x46>
	...

080072ac <_svfiprintf_r>:
 80072ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b0:	4698      	mov	r8, r3
 80072b2:	898b      	ldrh	r3, [r1, #12]
 80072b4:	061b      	lsls	r3, r3, #24
 80072b6:	b09d      	sub	sp, #116	; 0x74
 80072b8:	4607      	mov	r7, r0
 80072ba:	460d      	mov	r5, r1
 80072bc:	4614      	mov	r4, r2
 80072be:	d50e      	bpl.n	80072de <_svfiprintf_r+0x32>
 80072c0:	690b      	ldr	r3, [r1, #16]
 80072c2:	b963      	cbnz	r3, 80072de <_svfiprintf_r+0x32>
 80072c4:	2140      	movs	r1, #64	; 0x40
 80072c6:	f000 fafd 	bl	80078c4 <_malloc_r>
 80072ca:	6028      	str	r0, [r5, #0]
 80072cc:	6128      	str	r0, [r5, #16]
 80072ce:	b920      	cbnz	r0, 80072da <_svfiprintf_r+0x2e>
 80072d0:	230c      	movs	r3, #12
 80072d2:	603b      	str	r3, [r7, #0]
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	e0d1      	b.n	800747e <_svfiprintf_r+0x1d2>
 80072da:	2340      	movs	r3, #64	; 0x40
 80072dc:	616b      	str	r3, [r5, #20]
 80072de:	2300      	movs	r3, #0
 80072e0:	9309      	str	r3, [sp, #36]	; 0x24
 80072e2:	2320      	movs	r3, #32
 80072e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ec:	2330      	movs	r3, #48	; 0x30
 80072ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007498 <_svfiprintf_r+0x1ec>
 80072f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072f6:	f04f 0901 	mov.w	r9, #1
 80072fa:	4623      	mov	r3, r4
 80072fc:	469a      	mov	sl, r3
 80072fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007302:	b10a      	cbz	r2, 8007308 <_svfiprintf_r+0x5c>
 8007304:	2a25      	cmp	r2, #37	; 0x25
 8007306:	d1f9      	bne.n	80072fc <_svfiprintf_r+0x50>
 8007308:	ebba 0b04 	subs.w	fp, sl, r4
 800730c:	d00b      	beq.n	8007326 <_svfiprintf_r+0x7a>
 800730e:	465b      	mov	r3, fp
 8007310:	4622      	mov	r2, r4
 8007312:	4629      	mov	r1, r5
 8007314:	4638      	mov	r0, r7
 8007316:	f7ff ff6d 	bl	80071f4 <__ssputs_r>
 800731a:	3001      	adds	r0, #1
 800731c:	f000 80aa 	beq.w	8007474 <_svfiprintf_r+0x1c8>
 8007320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007322:	445a      	add	r2, fp
 8007324:	9209      	str	r2, [sp, #36]	; 0x24
 8007326:	f89a 3000 	ldrb.w	r3, [sl]
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 80a2 	beq.w	8007474 <_svfiprintf_r+0x1c8>
 8007330:	2300      	movs	r3, #0
 8007332:	f04f 32ff 	mov.w	r2, #4294967295
 8007336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800733a:	f10a 0a01 	add.w	sl, sl, #1
 800733e:	9304      	str	r3, [sp, #16]
 8007340:	9307      	str	r3, [sp, #28]
 8007342:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007346:	931a      	str	r3, [sp, #104]	; 0x68
 8007348:	4654      	mov	r4, sl
 800734a:	2205      	movs	r2, #5
 800734c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007350:	4851      	ldr	r0, [pc, #324]	; (8007498 <_svfiprintf_r+0x1ec>)
 8007352:	f7f8 ff45 	bl	80001e0 <memchr>
 8007356:	9a04      	ldr	r2, [sp, #16]
 8007358:	b9d8      	cbnz	r0, 8007392 <_svfiprintf_r+0xe6>
 800735a:	06d0      	lsls	r0, r2, #27
 800735c:	bf44      	itt	mi
 800735e:	2320      	movmi	r3, #32
 8007360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007364:	0711      	lsls	r1, r2, #28
 8007366:	bf44      	itt	mi
 8007368:	232b      	movmi	r3, #43	; 0x2b
 800736a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800736e:	f89a 3000 	ldrb.w	r3, [sl]
 8007372:	2b2a      	cmp	r3, #42	; 0x2a
 8007374:	d015      	beq.n	80073a2 <_svfiprintf_r+0xf6>
 8007376:	9a07      	ldr	r2, [sp, #28]
 8007378:	4654      	mov	r4, sl
 800737a:	2000      	movs	r0, #0
 800737c:	f04f 0c0a 	mov.w	ip, #10
 8007380:	4621      	mov	r1, r4
 8007382:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007386:	3b30      	subs	r3, #48	; 0x30
 8007388:	2b09      	cmp	r3, #9
 800738a:	d94e      	bls.n	800742a <_svfiprintf_r+0x17e>
 800738c:	b1b0      	cbz	r0, 80073bc <_svfiprintf_r+0x110>
 800738e:	9207      	str	r2, [sp, #28]
 8007390:	e014      	b.n	80073bc <_svfiprintf_r+0x110>
 8007392:	eba0 0308 	sub.w	r3, r0, r8
 8007396:	fa09 f303 	lsl.w	r3, r9, r3
 800739a:	4313      	orrs	r3, r2
 800739c:	9304      	str	r3, [sp, #16]
 800739e:	46a2      	mov	sl, r4
 80073a0:	e7d2      	b.n	8007348 <_svfiprintf_r+0x9c>
 80073a2:	9b03      	ldr	r3, [sp, #12]
 80073a4:	1d19      	adds	r1, r3, #4
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	9103      	str	r1, [sp, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	bfbb      	ittet	lt
 80073ae:	425b      	neglt	r3, r3
 80073b0:	f042 0202 	orrlt.w	r2, r2, #2
 80073b4:	9307      	strge	r3, [sp, #28]
 80073b6:	9307      	strlt	r3, [sp, #28]
 80073b8:	bfb8      	it	lt
 80073ba:	9204      	strlt	r2, [sp, #16]
 80073bc:	7823      	ldrb	r3, [r4, #0]
 80073be:	2b2e      	cmp	r3, #46	; 0x2e
 80073c0:	d10c      	bne.n	80073dc <_svfiprintf_r+0x130>
 80073c2:	7863      	ldrb	r3, [r4, #1]
 80073c4:	2b2a      	cmp	r3, #42	; 0x2a
 80073c6:	d135      	bne.n	8007434 <_svfiprintf_r+0x188>
 80073c8:	9b03      	ldr	r3, [sp, #12]
 80073ca:	1d1a      	adds	r2, r3, #4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	9203      	str	r2, [sp, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bfb8      	it	lt
 80073d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80073d8:	3402      	adds	r4, #2
 80073da:	9305      	str	r3, [sp, #20]
 80073dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80074a8 <_svfiprintf_r+0x1fc>
 80073e0:	7821      	ldrb	r1, [r4, #0]
 80073e2:	2203      	movs	r2, #3
 80073e4:	4650      	mov	r0, sl
 80073e6:	f7f8 fefb 	bl	80001e0 <memchr>
 80073ea:	b140      	cbz	r0, 80073fe <_svfiprintf_r+0x152>
 80073ec:	2340      	movs	r3, #64	; 0x40
 80073ee:	eba0 000a 	sub.w	r0, r0, sl
 80073f2:	fa03 f000 	lsl.w	r0, r3, r0
 80073f6:	9b04      	ldr	r3, [sp, #16]
 80073f8:	4303      	orrs	r3, r0
 80073fa:	3401      	adds	r4, #1
 80073fc:	9304      	str	r3, [sp, #16]
 80073fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007402:	4826      	ldr	r0, [pc, #152]	; (800749c <_svfiprintf_r+0x1f0>)
 8007404:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007408:	2206      	movs	r2, #6
 800740a:	f7f8 fee9 	bl	80001e0 <memchr>
 800740e:	2800      	cmp	r0, #0
 8007410:	d038      	beq.n	8007484 <_svfiprintf_r+0x1d8>
 8007412:	4b23      	ldr	r3, [pc, #140]	; (80074a0 <_svfiprintf_r+0x1f4>)
 8007414:	bb1b      	cbnz	r3, 800745e <_svfiprintf_r+0x1b2>
 8007416:	9b03      	ldr	r3, [sp, #12]
 8007418:	3307      	adds	r3, #7
 800741a:	f023 0307 	bic.w	r3, r3, #7
 800741e:	3308      	adds	r3, #8
 8007420:	9303      	str	r3, [sp, #12]
 8007422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007424:	4433      	add	r3, r6
 8007426:	9309      	str	r3, [sp, #36]	; 0x24
 8007428:	e767      	b.n	80072fa <_svfiprintf_r+0x4e>
 800742a:	fb0c 3202 	mla	r2, ip, r2, r3
 800742e:	460c      	mov	r4, r1
 8007430:	2001      	movs	r0, #1
 8007432:	e7a5      	b.n	8007380 <_svfiprintf_r+0xd4>
 8007434:	2300      	movs	r3, #0
 8007436:	3401      	adds	r4, #1
 8007438:	9305      	str	r3, [sp, #20]
 800743a:	4619      	mov	r1, r3
 800743c:	f04f 0c0a 	mov.w	ip, #10
 8007440:	4620      	mov	r0, r4
 8007442:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007446:	3a30      	subs	r2, #48	; 0x30
 8007448:	2a09      	cmp	r2, #9
 800744a:	d903      	bls.n	8007454 <_svfiprintf_r+0x1a8>
 800744c:	2b00      	cmp	r3, #0
 800744e:	d0c5      	beq.n	80073dc <_svfiprintf_r+0x130>
 8007450:	9105      	str	r1, [sp, #20]
 8007452:	e7c3      	b.n	80073dc <_svfiprintf_r+0x130>
 8007454:	fb0c 2101 	mla	r1, ip, r1, r2
 8007458:	4604      	mov	r4, r0
 800745a:	2301      	movs	r3, #1
 800745c:	e7f0      	b.n	8007440 <_svfiprintf_r+0x194>
 800745e:	ab03      	add	r3, sp, #12
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	462a      	mov	r2, r5
 8007464:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <_svfiprintf_r+0x1f8>)
 8007466:	a904      	add	r1, sp, #16
 8007468:	4638      	mov	r0, r7
 800746a:	f3af 8000 	nop.w
 800746e:	1c42      	adds	r2, r0, #1
 8007470:	4606      	mov	r6, r0
 8007472:	d1d6      	bne.n	8007422 <_svfiprintf_r+0x176>
 8007474:	89ab      	ldrh	r3, [r5, #12]
 8007476:	065b      	lsls	r3, r3, #25
 8007478:	f53f af2c 	bmi.w	80072d4 <_svfiprintf_r+0x28>
 800747c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800747e:	b01d      	add	sp, #116	; 0x74
 8007480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007484:	ab03      	add	r3, sp, #12
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	462a      	mov	r2, r5
 800748a:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <_svfiprintf_r+0x1f8>)
 800748c:	a904      	add	r1, sp, #16
 800748e:	4638      	mov	r0, r7
 8007490:	f000 f87a 	bl	8007588 <_printf_i>
 8007494:	e7eb      	b.n	800746e <_svfiprintf_r+0x1c2>
 8007496:	bf00      	nop
 8007498:	08007a8c 	.word	0x08007a8c
 800749c:	08007a96 	.word	0x08007a96
 80074a0:	00000000 	.word	0x00000000
 80074a4:	080071f5 	.word	0x080071f5
 80074a8:	08007a92 	.word	0x08007a92

080074ac <_printf_common>:
 80074ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b0:	4616      	mov	r6, r2
 80074b2:	4699      	mov	r9, r3
 80074b4:	688a      	ldr	r2, [r1, #8]
 80074b6:	690b      	ldr	r3, [r1, #16]
 80074b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074bc:	4293      	cmp	r3, r2
 80074be:	bfb8      	it	lt
 80074c0:	4613      	movlt	r3, r2
 80074c2:	6033      	str	r3, [r6, #0]
 80074c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074c8:	4607      	mov	r7, r0
 80074ca:	460c      	mov	r4, r1
 80074cc:	b10a      	cbz	r2, 80074d2 <_printf_common+0x26>
 80074ce:	3301      	adds	r3, #1
 80074d0:	6033      	str	r3, [r6, #0]
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	0699      	lsls	r1, r3, #26
 80074d6:	bf42      	ittt	mi
 80074d8:	6833      	ldrmi	r3, [r6, #0]
 80074da:	3302      	addmi	r3, #2
 80074dc:	6033      	strmi	r3, [r6, #0]
 80074de:	6825      	ldr	r5, [r4, #0]
 80074e0:	f015 0506 	ands.w	r5, r5, #6
 80074e4:	d106      	bne.n	80074f4 <_printf_common+0x48>
 80074e6:	f104 0a19 	add.w	sl, r4, #25
 80074ea:	68e3      	ldr	r3, [r4, #12]
 80074ec:	6832      	ldr	r2, [r6, #0]
 80074ee:	1a9b      	subs	r3, r3, r2
 80074f0:	42ab      	cmp	r3, r5
 80074f2:	dc26      	bgt.n	8007542 <_printf_common+0x96>
 80074f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074f8:	1e13      	subs	r3, r2, #0
 80074fa:	6822      	ldr	r2, [r4, #0]
 80074fc:	bf18      	it	ne
 80074fe:	2301      	movne	r3, #1
 8007500:	0692      	lsls	r2, r2, #26
 8007502:	d42b      	bmi.n	800755c <_printf_common+0xb0>
 8007504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007508:	4649      	mov	r1, r9
 800750a:	4638      	mov	r0, r7
 800750c:	47c0      	blx	r8
 800750e:	3001      	adds	r0, #1
 8007510:	d01e      	beq.n	8007550 <_printf_common+0xa4>
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	68e5      	ldr	r5, [r4, #12]
 8007516:	6832      	ldr	r2, [r6, #0]
 8007518:	f003 0306 	and.w	r3, r3, #6
 800751c:	2b04      	cmp	r3, #4
 800751e:	bf08      	it	eq
 8007520:	1aad      	subeq	r5, r5, r2
 8007522:	68a3      	ldr	r3, [r4, #8]
 8007524:	6922      	ldr	r2, [r4, #16]
 8007526:	bf0c      	ite	eq
 8007528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800752c:	2500      	movne	r5, #0
 800752e:	4293      	cmp	r3, r2
 8007530:	bfc4      	itt	gt
 8007532:	1a9b      	subgt	r3, r3, r2
 8007534:	18ed      	addgt	r5, r5, r3
 8007536:	2600      	movs	r6, #0
 8007538:	341a      	adds	r4, #26
 800753a:	42b5      	cmp	r5, r6
 800753c:	d11a      	bne.n	8007574 <_printf_common+0xc8>
 800753e:	2000      	movs	r0, #0
 8007540:	e008      	b.n	8007554 <_printf_common+0xa8>
 8007542:	2301      	movs	r3, #1
 8007544:	4652      	mov	r2, sl
 8007546:	4649      	mov	r1, r9
 8007548:	4638      	mov	r0, r7
 800754a:	47c0      	blx	r8
 800754c:	3001      	adds	r0, #1
 800754e:	d103      	bne.n	8007558 <_printf_common+0xac>
 8007550:	f04f 30ff 	mov.w	r0, #4294967295
 8007554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007558:	3501      	adds	r5, #1
 800755a:	e7c6      	b.n	80074ea <_printf_common+0x3e>
 800755c:	18e1      	adds	r1, r4, r3
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	2030      	movs	r0, #48	; 0x30
 8007562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007566:	4422      	add	r2, r4
 8007568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800756c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007570:	3302      	adds	r3, #2
 8007572:	e7c7      	b.n	8007504 <_printf_common+0x58>
 8007574:	2301      	movs	r3, #1
 8007576:	4622      	mov	r2, r4
 8007578:	4649      	mov	r1, r9
 800757a:	4638      	mov	r0, r7
 800757c:	47c0      	blx	r8
 800757e:	3001      	adds	r0, #1
 8007580:	d0e6      	beq.n	8007550 <_printf_common+0xa4>
 8007582:	3601      	adds	r6, #1
 8007584:	e7d9      	b.n	800753a <_printf_common+0x8e>
	...

08007588 <_printf_i>:
 8007588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800758c:	460c      	mov	r4, r1
 800758e:	4691      	mov	r9, r2
 8007590:	7e27      	ldrb	r7, [r4, #24]
 8007592:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007594:	2f78      	cmp	r7, #120	; 0x78
 8007596:	4680      	mov	r8, r0
 8007598:	469a      	mov	sl, r3
 800759a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800759e:	d807      	bhi.n	80075b0 <_printf_i+0x28>
 80075a0:	2f62      	cmp	r7, #98	; 0x62
 80075a2:	d80a      	bhi.n	80075ba <_printf_i+0x32>
 80075a4:	2f00      	cmp	r7, #0
 80075a6:	f000 80d8 	beq.w	800775a <_printf_i+0x1d2>
 80075aa:	2f58      	cmp	r7, #88	; 0x58
 80075ac:	f000 80a3 	beq.w	80076f6 <_printf_i+0x16e>
 80075b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075b8:	e03a      	b.n	8007630 <_printf_i+0xa8>
 80075ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075be:	2b15      	cmp	r3, #21
 80075c0:	d8f6      	bhi.n	80075b0 <_printf_i+0x28>
 80075c2:	a001      	add	r0, pc, #4	; (adr r0, 80075c8 <_printf_i+0x40>)
 80075c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80075c8:	08007621 	.word	0x08007621
 80075cc:	08007635 	.word	0x08007635
 80075d0:	080075b1 	.word	0x080075b1
 80075d4:	080075b1 	.word	0x080075b1
 80075d8:	080075b1 	.word	0x080075b1
 80075dc:	080075b1 	.word	0x080075b1
 80075e0:	08007635 	.word	0x08007635
 80075e4:	080075b1 	.word	0x080075b1
 80075e8:	080075b1 	.word	0x080075b1
 80075ec:	080075b1 	.word	0x080075b1
 80075f0:	080075b1 	.word	0x080075b1
 80075f4:	08007741 	.word	0x08007741
 80075f8:	08007665 	.word	0x08007665
 80075fc:	08007723 	.word	0x08007723
 8007600:	080075b1 	.word	0x080075b1
 8007604:	080075b1 	.word	0x080075b1
 8007608:	08007763 	.word	0x08007763
 800760c:	080075b1 	.word	0x080075b1
 8007610:	08007665 	.word	0x08007665
 8007614:	080075b1 	.word	0x080075b1
 8007618:	080075b1 	.word	0x080075b1
 800761c:	0800772b 	.word	0x0800772b
 8007620:	680b      	ldr	r3, [r1, #0]
 8007622:	1d1a      	adds	r2, r3, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	600a      	str	r2, [r1, #0]
 8007628:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800762c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007630:	2301      	movs	r3, #1
 8007632:	e0a3      	b.n	800777c <_printf_i+0x1f4>
 8007634:	6825      	ldr	r5, [r4, #0]
 8007636:	6808      	ldr	r0, [r1, #0]
 8007638:	062e      	lsls	r6, r5, #24
 800763a:	f100 0304 	add.w	r3, r0, #4
 800763e:	d50a      	bpl.n	8007656 <_printf_i+0xce>
 8007640:	6805      	ldr	r5, [r0, #0]
 8007642:	600b      	str	r3, [r1, #0]
 8007644:	2d00      	cmp	r5, #0
 8007646:	da03      	bge.n	8007650 <_printf_i+0xc8>
 8007648:	232d      	movs	r3, #45	; 0x2d
 800764a:	426d      	negs	r5, r5
 800764c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007650:	485e      	ldr	r0, [pc, #376]	; (80077cc <_printf_i+0x244>)
 8007652:	230a      	movs	r3, #10
 8007654:	e019      	b.n	800768a <_printf_i+0x102>
 8007656:	f015 0f40 	tst.w	r5, #64	; 0x40
 800765a:	6805      	ldr	r5, [r0, #0]
 800765c:	600b      	str	r3, [r1, #0]
 800765e:	bf18      	it	ne
 8007660:	b22d      	sxthne	r5, r5
 8007662:	e7ef      	b.n	8007644 <_printf_i+0xbc>
 8007664:	680b      	ldr	r3, [r1, #0]
 8007666:	6825      	ldr	r5, [r4, #0]
 8007668:	1d18      	adds	r0, r3, #4
 800766a:	6008      	str	r0, [r1, #0]
 800766c:	0628      	lsls	r0, r5, #24
 800766e:	d501      	bpl.n	8007674 <_printf_i+0xec>
 8007670:	681d      	ldr	r5, [r3, #0]
 8007672:	e002      	b.n	800767a <_printf_i+0xf2>
 8007674:	0669      	lsls	r1, r5, #25
 8007676:	d5fb      	bpl.n	8007670 <_printf_i+0xe8>
 8007678:	881d      	ldrh	r5, [r3, #0]
 800767a:	4854      	ldr	r0, [pc, #336]	; (80077cc <_printf_i+0x244>)
 800767c:	2f6f      	cmp	r7, #111	; 0x6f
 800767e:	bf0c      	ite	eq
 8007680:	2308      	moveq	r3, #8
 8007682:	230a      	movne	r3, #10
 8007684:	2100      	movs	r1, #0
 8007686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800768a:	6866      	ldr	r6, [r4, #4]
 800768c:	60a6      	str	r6, [r4, #8]
 800768e:	2e00      	cmp	r6, #0
 8007690:	bfa2      	ittt	ge
 8007692:	6821      	ldrge	r1, [r4, #0]
 8007694:	f021 0104 	bicge.w	r1, r1, #4
 8007698:	6021      	strge	r1, [r4, #0]
 800769a:	b90d      	cbnz	r5, 80076a0 <_printf_i+0x118>
 800769c:	2e00      	cmp	r6, #0
 800769e:	d04d      	beq.n	800773c <_printf_i+0x1b4>
 80076a0:	4616      	mov	r6, r2
 80076a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80076a6:	fb03 5711 	mls	r7, r3, r1, r5
 80076aa:	5dc7      	ldrb	r7, [r0, r7]
 80076ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076b0:	462f      	mov	r7, r5
 80076b2:	42bb      	cmp	r3, r7
 80076b4:	460d      	mov	r5, r1
 80076b6:	d9f4      	bls.n	80076a2 <_printf_i+0x11a>
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d10b      	bne.n	80076d4 <_printf_i+0x14c>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	07df      	lsls	r7, r3, #31
 80076c0:	d508      	bpl.n	80076d4 <_printf_i+0x14c>
 80076c2:	6923      	ldr	r3, [r4, #16]
 80076c4:	6861      	ldr	r1, [r4, #4]
 80076c6:	4299      	cmp	r1, r3
 80076c8:	bfde      	ittt	le
 80076ca:	2330      	movle	r3, #48	; 0x30
 80076cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076d4:	1b92      	subs	r2, r2, r6
 80076d6:	6122      	str	r2, [r4, #16]
 80076d8:	f8cd a000 	str.w	sl, [sp]
 80076dc:	464b      	mov	r3, r9
 80076de:	aa03      	add	r2, sp, #12
 80076e0:	4621      	mov	r1, r4
 80076e2:	4640      	mov	r0, r8
 80076e4:	f7ff fee2 	bl	80074ac <_printf_common>
 80076e8:	3001      	adds	r0, #1
 80076ea:	d14c      	bne.n	8007786 <_printf_i+0x1fe>
 80076ec:	f04f 30ff 	mov.w	r0, #4294967295
 80076f0:	b004      	add	sp, #16
 80076f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f6:	4835      	ldr	r0, [pc, #212]	; (80077cc <_printf_i+0x244>)
 80076f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	680e      	ldr	r6, [r1, #0]
 8007700:	061f      	lsls	r7, r3, #24
 8007702:	f856 5b04 	ldr.w	r5, [r6], #4
 8007706:	600e      	str	r6, [r1, #0]
 8007708:	d514      	bpl.n	8007734 <_printf_i+0x1ac>
 800770a:	07d9      	lsls	r1, r3, #31
 800770c:	bf44      	itt	mi
 800770e:	f043 0320 	orrmi.w	r3, r3, #32
 8007712:	6023      	strmi	r3, [r4, #0]
 8007714:	b91d      	cbnz	r5, 800771e <_printf_i+0x196>
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	f023 0320 	bic.w	r3, r3, #32
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	2310      	movs	r3, #16
 8007720:	e7b0      	b.n	8007684 <_printf_i+0xfc>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	f043 0320 	orr.w	r3, r3, #32
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	2378      	movs	r3, #120	; 0x78
 800772c:	4828      	ldr	r0, [pc, #160]	; (80077d0 <_printf_i+0x248>)
 800772e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007732:	e7e3      	b.n	80076fc <_printf_i+0x174>
 8007734:	065e      	lsls	r6, r3, #25
 8007736:	bf48      	it	mi
 8007738:	b2ad      	uxthmi	r5, r5
 800773a:	e7e6      	b.n	800770a <_printf_i+0x182>
 800773c:	4616      	mov	r6, r2
 800773e:	e7bb      	b.n	80076b8 <_printf_i+0x130>
 8007740:	680b      	ldr	r3, [r1, #0]
 8007742:	6826      	ldr	r6, [r4, #0]
 8007744:	6960      	ldr	r0, [r4, #20]
 8007746:	1d1d      	adds	r5, r3, #4
 8007748:	600d      	str	r5, [r1, #0]
 800774a:	0635      	lsls	r5, r6, #24
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	d501      	bpl.n	8007754 <_printf_i+0x1cc>
 8007750:	6018      	str	r0, [r3, #0]
 8007752:	e002      	b.n	800775a <_printf_i+0x1d2>
 8007754:	0671      	lsls	r1, r6, #25
 8007756:	d5fb      	bpl.n	8007750 <_printf_i+0x1c8>
 8007758:	8018      	strh	r0, [r3, #0]
 800775a:	2300      	movs	r3, #0
 800775c:	6123      	str	r3, [r4, #16]
 800775e:	4616      	mov	r6, r2
 8007760:	e7ba      	b.n	80076d8 <_printf_i+0x150>
 8007762:	680b      	ldr	r3, [r1, #0]
 8007764:	1d1a      	adds	r2, r3, #4
 8007766:	600a      	str	r2, [r1, #0]
 8007768:	681e      	ldr	r6, [r3, #0]
 800776a:	6862      	ldr	r2, [r4, #4]
 800776c:	2100      	movs	r1, #0
 800776e:	4630      	mov	r0, r6
 8007770:	f7f8 fd36 	bl	80001e0 <memchr>
 8007774:	b108      	cbz	r0, 800777a <_printf_i+0x1f2>
 8007776:	1b80      	subs	r0, r0, r6
 8007778:	6060      	str	r0, [r4, #4]
 800777a:	6863      	ldr	r3, [r4, #4]
 800777c:	6123      	str	r3, [r4, #16]
 800777e:	2300      	movs	r3, #0
 8007780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007784:	e7a8      	b.n	80076d8 <_printf_i+0x150>
 8007786:	6923      	ldr	r3, [r4, #16]
 8007788:	4632      	mov	r2, r6
 800778a:	4649      	mov	r1, r9
 800778c:	4640      	mov	r0, r8
 800778e:	47d0      	blx	sl
 8007790:	3001      	adds	r0, #1
 8007792:	d0ab      	beq.n	80076ec <_printf_i+0x164>
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	079b      	lsls	r3, r3, #30
 8007798:	d413      	bmi.n	80077c2 <_printf_i+0x23a>
 800779a:	68e0      	ldr	r0, [r4, #12]
 800779c:	9b03      	ldr	r3, [sp, #12]
 800779e:	4298      	cmp	r0, r3
 80077a0:	bfb8      	it	lt
 80077a2:	4618      	movlt	r0, r3
 80077a4:	e7a4      	b.n	80076f0 <_printf_i+0x168>
 80077a6:	2301      	movs	r3, #1
 80077a8:	4632      	mov	r2, r6
 80077aa:	4649      	mov	r1, r9
 80077ac:	4640      	mov	r0, r8
 80077ae:	47d0      	blx	sl
 80077b0:	3001      	adds	r0, #1
 80077b2:	d09b      	beq.n	80076ec <_printf_i+0x164>
 80077b4:	3501      	adds	r5, #1
 80077b6:	68e3      	ldr	r3, [r4, #12]
 80077b8:	9903      	ldr	r1, [sp, #12]
 80077ba:	1a5b      	subs	r3, r3, r1
 80077bc:	42ab      	cmp	r3, r5
 80077be:	dcf2      	bgt.n	80077a6 <_printf_i+0x21e>
 80077c0:	e7eb      	b.n	800779a <_printf_i+0x212>
 80077c2:	2500      	movs	r5, #0
 80077c4:	f104 0619 	add.w	r6, r4, #25
 80077c8:	e7f5      	b.n	80077b6 <_printf_i+0x22e>
 80077ca:	bf00      	nop
 80077cc:	08007a9d 	.word	0x08007a9d
 80077d0:	08007aae 	.word	0x08007aae

080077d4 <memcpy>:
 80077d4:	440a      	add	r2, r1
 80077d6:	4291      	cmp	r1, r2
 80077d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80077dc:	d100      	bne.n	80077e0 <memcpy+0xc>
 80077de:	4770      	bx	lr
 80077e0:	b510      	push	{r4, lr}
 80077e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077ea:	4291      	cmp	r1, r2
 80077ec:	d1f9      	bne.n	80077e2 <memcpy+0xe>
 80077ee:	bd10      	pop	{r4, pc}

080077f0 <memmove>:
 80077f0:	4288      	cmp	r0, r1
 80077f2:	b510      	push	{r4, lr}
 80077f4:	eb01 0402 	add.w	r4, r1, r2
 80077f8:	d902      	bls.n	8007800 <memmove+0x10>
 80077fa:	4284      	cmp	r4, r0
 80077fc:	4623      	mov	r3, r4
 80077fe:	d807      	bhi.n	8007810 <memmove+0x20>
 8007800:	1e43      	subs	r3, r0, #1
 8007802:	42a1      	cmp	r1, r4
 8007804:	d008      	beq.n	8007818 <memmove+0x28>
 8007806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800780a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800780e:	e7f8      	b.n	8007802 <memmove+0x12>
 8007810:	4402      	add	r2, r0
 8007812:	4601      	mov	r1, r0
 8007814:	428a      	cmp	r2, r1
 8007816:	d100      	bne.n	800781a <memmove+0x2a>
 8007818:	bd10      	pop	{r4, pc}
 800781a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800781e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007822:	e7f7      	b.n	8007814 <memmove+0x24>

08007824 <_free_r>:
 8007824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007826:	2900      	cmp	r1, #0
 8007828:	d048      	beq.n	80078bc <_free_r+0x98>
 800782a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800782e:	9001      	str	r0, [sp, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f1a1 0404 	sub.w	r4, r1, #4
 8007836:	bfb8      	it	lt
 8007838:	18e4      	addlt	r4, r4, r3
 800783a:	f000 f8d3 	bl	80079e4 <__malloc_lock>
 800783e:	4a20      	ldr	r2, [pc, #128]	; (80078c0 <_free_r+0x9c>)
 8007840:	9801      	ldr	r0, [sp, #4]
 8007842:	6813      	ldr	r3, [r2, #0]
 8007844:	4615      	mov	r5, r2
 8007846:	b933      	cbnz	r3, 8007856 <_free_r+0x32>
 8007848:	6063      	str	r3, [r4, #4]
 800784a:	6014      	str	r4, [r2, #0]
 800784c:	b003      	add	sp, #12
 800784e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007852:	f000 b8cd 	b.w	80079f0 <__malloc_unlock>
 8007856:	42a3      	cmp	r3, r4
 8007858:	d90b      	bls.n	8007872 <_free_r+0x4e>
 800785a:	6821      	ldr	r1, [r4, #0]
 800785c:	1862      	adds	r2, r4, r1
 800785e:	4293      	cmp	r3, r2
 8007860:	bf04      	itt	eq
 8007862:	681a      	ldreq	r2, [r3, #0]
 8007864:	685b      	ldreq	r3, [r3, #4]
 8007866:	6063      	str	r3, [r4, #4]
 8007868:	bf04      	itt	eq
 800786a:	1852      	addeq	r2, r2, r1
 800786c:	6022      	streq	r2, [r4, #0]
 800786e:	602c      	str	r4, [r5, #0]
 8007870:	e7ec      	b.n	800784c <_free_r+0x28>
 8007872:	461a      	mov	r2, r3
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	b10b      	cbz	r3, 800787c <_free_r+0x58>
 8007878:	42a3      	cmp	r3, r4
 800787a:	d9fa      	bls.n	8007872 <_free_r+0x4e>
 800787c:	6811      	ldr	r1, [r2, #0]
 800787e:	1855      	adds	r5, r2, r1
 8007880:	42a5      	cmp	r5, r4
 8007882:	d10b      	bne.n	800789c <_free_r+0x78>
 8007884:	6824      	ldr	r4, [r4, #0]
 8007886:	4421      	add	r1, r4
 8007888:	1854      	adds	r4, r2, r1
 800788a:	42a3      	cmp	r3, r4
 800788c:	6011      	str	r1, [r2, #0]
 800788e:	d1dd      	bne.n	800784c <_free_r+0x28>
 8007890:	681c      	ldr	r4, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	6053      	str	r3, [r2, #4]
 8007896:	4421      	add	r1, r4
 8007898:	6011      	str	r1, [r2, #0]
 800789a:	e7d7      	b.n	800784c <_free_r+0x28>
 800789c:	d902      	bls.n	80078a4 <_free_r+0x80>
 800789e:	230c      	movs	r3, #12
 80078a0:	6003      	str	r3, [r0, #0]
 80078a2:	e7d3      	b.n	800784c <_free_r+0x28>
 80078a4:	6825      	ldr	r5, [r4, #0]
 80078a6:	1961      	adds	r1, r4, r5
 80078a8:	428b      	cmp	r3, r1
 80078aa:	bf04      	itt	eq
 80078ac:	6819      	ldreq	r1, [r3, #0]
 80078ae:	685b      	ldreq	r3, [r3, #4]
 80078b0:	6063      	str	r3, [r4, #4]
 80078b2:	bf04      	itt	eq
 80078b4:	1949      	addeq	r1, r1, r5
 80078b6:	6021      	streq	r1, [r4, #0]
 80078b8:	6054      	str	r4, [r2, #4]
 80078ba:	e7c7      	b.n	800784c <_free_r+0x28>
 80078bc:	b003      	add	sp, #12
 80078be:	bd30      	pop	{r4, r5, pc}
 80078c0:	20000480 	.word	0x20000480

080078c4 <_malloc_r>:
 80078c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c6:	1ccd      	adds	r5, r1, #3
 80078c8:	f025 0503 	bic.w	r5, r5, #3
 80078cc:	3508      	adds	r5, #8
 80078ce:	2d0c      	cmp	r5, #12
 80078d0:	bf38      	it	cc
 80078d2:	250c      	movcc	r5, #12
 80078d4:	2d00      	cmp	r5, #0
 80078d6:	4606      	mov	r6, r0
 80078d8:	db01      	blt.n	80078de <_malloc_r+0x1a>
 80078da:	42a9      	cmp	r1, r5
 80078dc:	d903      	bls.n	80078e6 <_malloc_r+0x22>
 80078de:	230c      	movs	r3, #12
 80078e0:	6033      	str	r3, [r6, #0]
 80078e2:	2000      	movs	r0, #0
 80078e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078e6:	f000 f87d 	bl	80079e4 <__malloc_lock>
 80078ea:	4921      	ldr	r1, [pc, #132]	; (8007970 <_malloc_r+0xac>)
 80078ec:	680a      	ldr	r2, [r1, #0]
 80078ee:	4614      	mov	r4, r2
 80078f0:	b99c      	cbnz	r4, 800791a <_malloc_r+0x56>
 80078f2:	4f20      	ldr	r7, [pc, #128]	; (8007974 <_malloc_r+0xb0>)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	b923      	cbnz	r3, 8007902 <_malloc_r+0x3e>
 80078f8:	4621      	mov	r1, r4
 80078fa:	4630      	mov	r0, r6
 80078fc:	f000 f862 	bl	80079c4 <_sbrk_r>
 8007900:	6038      	str	r0, [r7, #0]
 8007902:	4629      	mov	r1, r5
 8007904:	4630      	mov	r0, r6
 8007906:	f000 f85d 	bl	80079c4 <_sbrk_r>
 800790a:	1c43      	adds	r3, r0, #1
 800790c:	d123      	bne.n	8007956 <_malloc_r+0x92>
 800790e:	230c      	movs	r3, #12
 8007910:	6033      	str	r3, [r6, #0]
 8007912:	4630      	mov	r0, r6
 8007914:	f000 f86c 	bl	80079f0 <__malloc_unlock>
 8007918:	e7e3      	b.n	80078e2 <_malloc_r+0x1e>
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	1b5b      	subs	r3, r3, r5
 800791e:	d417      	bmi.n	8007950 <_malloc_r+0x8c>
 8007920:	2b0b      	cmp	r3, #11
 8007922:	d903      	bls.n	800792c <_malloc_r+0x68>
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	441c      	add	r4, r3
 8007928:	6025      	str	r5, [r4, #0]
 800792a:	e004      	b.n	8007936 <_malloc_r+0x72>
 800792c:	6863      	ldr	r3, [r4, #4]
 800792e:	42a2      	cmp	r2, r4
 8007930:	bf0c      	ite	eq
 8007932:	600b      	streq	r3, [r1, #0]
 8007934:	6053      	strne	r3, [r2, #4]
 8007936:	4630      	mov	r0, r6
 8007938:	f000 f85a 	bl	80079f0 <__malloc_unlock>
 800793c:	f104 000b 	add.w	r0, r4, #11
 8007940:	1d23      	adds	r3, r4, #4
 8007942:	f020 0007 	bic.w	r0, r0, #7
 8007946:	1ac2      	subs	r2, r0, r3
 8007948:	d0cc      	beq.n	80078e4 <_malloc_r+0x20>
 800794a:	1a1b      	subs	r3, r3, r0
 800794c:	50a3      	str	r3, [r4, r2]
 800794e:	e7c9      	b.n	80078e4 <_malloc_r+0x20>
 8007950:	4622      	mov	r2, r4
 8007952:	6864      	ldr	r4, [r4, #4]
 8007954:	e7cc      	b.n	80078f0 <_malloc_r+0x2c>
 8007956:	1cc4      	adds	r4, r0, #3
 8007958:	f024 0403 	bic.w	r4, r4, #3
 800795c:	42a0      	cmp	r0, r4
 800795e:	d0e3      	beq.n	8007928 <_malloc_r+0x64>
 8007960:	1a21      	subs	r1, r4, r0
 8007962:	4630      	mov	r0, r6
 8007964:	f000 f82e 	bl	80079c4 <_sbrk_r>
 8007968:	3001      	adds	r0, #1
 800796a:	d1dd      	bne.n	8007928 <_malloc_r+0x64>
 800796c:	e7cf      	b.n	800790e <_malloc_r+0x4a>
 800796e:	bf00      	nop
 8007970:	20000480 	.word	0x20000480
 8007974:	20000484 	.word	0x20000484

08007978 <_realloc_r>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	4607      	mov	r7, r0
 800797c:	4614      	mov	r4, r2
 800797e:	460e      	mov	r6, r1
 8007980:	b921      	cbnz	r1, 800798c <_realloc_r+0x14>
 8007982:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007986:	4611      	mov	r1, r2
 8007988:	f7ff bf9c 	b.w	80078c4 <_malloc_r>
 800798c:	b922      	cbnz	r2, 8007998 <_realloc_r+0x20>
 800798e:	f7ff ff49 	bl	8007824 <_free_r>
 8007992:	4625      	mov	r5, r4
 8007994:	4628      	mov	r0, r5
 8007996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007998:	f000 f830 	bl	80079fc <_malloc_usable_size_r>
 800799c:	42a0      	cmp	r0, r4
 800799e:	d20f      	bcs.n	80079c0 <_realloc_r+0x48>
 80079a0:	4621      	mov	r1, r4
 80079a2:	4638      	mov	r0, r7
 80079a4:	f7ff ff8e 	bl	80078c4 <_malloc_r>
 80079a8:	4605      	mov	r5, r0
 80079aa:	2800      	cmp	r0, #0
 80079ac:	d0f2      	beq.n	8007994 <_realloc_r+0x1c>
 80079ae:	4631      	mov	r1, r6
 80079b0:	4622      	mov	r2, r4
 80079b2:	f7ff ff0f 	bl	80077d4 <memcpy>
 80079b6:	4631      	mov	r1, r6
 80079b8:	4638      	mov	r0, r7
 80079ba:	f7ff ff33 	bl	8007824 <_free_r>
 80079be:	e7e9      	b.n	8007994 <_realloc_r+0x1c>
 80079c0:	4635      	mov	r5, r6
 80079c2:	e7e7      	b.n	8007994 <_realloc_r+0x1c>

080079c4 <_sbrk_r>:
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	4d06      	ldr	r5, [pc, #24]	; (80079e0 <_sbrk_r+0x1c>)
 80079c8:	2300      	movs	r3, #0
 80079ca:	4604      	mov	r4, r0
 80079cc:	4608      	mov	r0, r1
 80079ce:	602b      	str	r3, [r5, #0]
 80079d0:	f7f9 f8ca 	bl	8000b68 <_sbrk>
 80079d4:	1c43      	adds	r3, r0, #1
 80079d6:	d102      	bne.n	80079de <_sbrk_r+0x1a>
 80079d8:	682b      	ldr	r3, [r5, #0]
 80079da:	b103      	cbz	r3, 80079de <_sbrk_r+0x1a>
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	20001d64 	.word	0x20001d64

080079e4 <__malloc_lock>:
 80079e4:	4801      	ldr	r0, [pc, #4]	; (80079ec <__malloc_lock+0x8>)
 80079e6:	f000 b811 	b.w	8007a0c <__retarget_lock_acquire_recursive>
 80079ea:	bf00      	nop
 80079ec:	20001d6c 	.word	0x20001d6c

080079f0 <__malloc_unlock>:
 80079f0:	4801      	ldr	r0, [pc, #4]	; (80079f8 <__malloc_unlock+0x8>)
 80079f2:	f000 b80c 	b.w	8007a0e <__retarget_lock_release_recursive>
 80079f6:	bf00      	nop
 80079f8:	20001d6c 	.word	0x20001d6c

080079fc <_malloc_usable_size_r>:
 80079fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a00:	1f18      	subs	r0, r3, #4
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bfbc      	itt	lt
 8007a06:	580b      	ldrlt	r3, [r1, r0]
 8007a08:	18c0      	addlt	r0, r0, r3
 8007a0a:	4770      	bx	lr

08007a0c <__retarget_lock_acquire_recursive>:
 8007a0c:	4770      	bx	lr

08007a0e <__retarget_lock_release_recursive>:
 8007a0e:	4770      	bx	lr

08007a10 <_init>:
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	bf00      	nop
 8007a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a16:	bc08      	pop	{r3}
 8007a18:	469e      	mov	lr, r3
 8007a1a:	4770      	bx	lr

08007a1c <_fini>:
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	bf00      	nop
 8007a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a22:	bc08      	pop	{r3}
 8007a24:	469e      	mov	lr, r3
 8007a26:	4770      	bx	lr
